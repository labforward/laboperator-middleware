{
  "paths": {
    "/applications": {
      "get": {
        "description": "Get a list of registered OAuth 2 Applications.",
        "operationId": "getApplications",
        "summary": "List of registered OAuth 2 Applications",
        "tags": [
          "applications"
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsResponse"
                },
                "examples": {
                  "List of Applications": {
                    "summary": "List of Applications",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "application",
                          "attributes": {
                            "name": "Bigtax",
                            "redirect_uri": "urn:ietf:wg:oauth:2.0:oob"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/applications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/applications/{id}": {
      "get": {
        "description": "Get a single Application by its id.",
        "operationId": "getApplication",
        "summary": "Get Application",
        "tags": [
          "applications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Application to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Application attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "application",
                        "attributes": {
                          "name": "Bigtax",
                          "redirect_uri": "urn:ietf:wg:oauth:2.0:oob"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/applications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/attachments/{id}": {
      "get": {
        "description": "Get a single Attachment by its id.",
        "operationId": "getAttachment",
        "summary": "Get Attachment",
        "tags": [
          "attachments"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Attachment to get."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                },
                "examples": {
                  "Attachment": {
                    "summary": "Attachment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "attachment",
                        "attributes": {
                          "content_type": "text/plain",
                          "original_filename": "attachment.txt"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/attachments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/attachments/{id}/download": {
      "get": {
        "description": "Download a single Attachment by its id.",
        "operationId": "downloadAttachment",
        "summary": "Download Attachment",
        "tags": [
          "attachments"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Attachment to download."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                },
                "examples": {
                  "Attachment": {
                    "summary": "Attachment",
                    "value": "attachment\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentications": {
      "get": {
        "description": "Get a list of user Authentications.",
        "operationId": "getAuthentications",
        "summary": "Get Authentications",
        "tags": [
          "authentications"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Authentication attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsResponse"
                },
                "examples": {
                  "List of Authentications": {
                    "summary": "List of Authentications",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "authentication",
                          "attributes": {
                            "provider": "openid_connect",
                            "uid": "ruby_ebert-17@hamill.test",
                            "access_token": "5c5d6687ac2a37daf9699f3a49540ecc",
                            "expires_in": 3600,
                            "refresh_token": "574d5bf1940c33a4962077b1a094781c",
                            "created_at": "2023-04-21T13:05:02.796Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/authentications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for authentications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentications/{id}": {
      "get": {
        "description": "Get a single Authentication by its id.",
        "operationId": "getAuthentication",
        "summary": "Get Authentication",
        "tags": [
          "authentications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "An encoded id of the Authentication to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Authentication attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "Authentication": {
                    "summary": "Authentication",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "authentication",
                        "attributes": {
                          "provider": "openid_connect",
                          "uid": "ruby_ebert-23@hamill.test",
                          "access_token": "c26e2eb972c3975f5030c4bc523b1ad4",
                          "expires_in": 3600,
                          "refresh_token": "e60b7e73b181f0b0b62a937ea51fcadc",
                          "created_at": "2023-04-21T13:05:04.396Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/authentications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for authentications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/automations": {
      "get": {
        "description": "Get a list of existing Automations.",
        "operationId": "getAutomations",
        "summary": "Get Automations",
        "tags": [
          "automations"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Automation attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `organisation`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationsResponse"
                },
                "examples": {
                  "List of Automations": {
                    "summary": "List of Automations",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "automation",
                          "attributes": {
                            "id": 1,
                            "name": "Racer 5 India Pale Ale, Bear Republic Bre #1",
                            "activated_at": null,
                            "created_at": "2023-04-21T13:05:07.633Z",
                            "updated_at": "2023-04-21T13:05:07.633Z",
                            "active": false
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/automations/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "automation",
                          "attributes": {
                            "id": 2,
                            "name": "Delirium Tremens #2",
                            "activated_at": null,
                            "created_at": "2023-04-21T13:05:07.646Z",
                            "updated_at": "2023-04-21T13:05:07.646Z",
                            "active": false
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/automations/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for automations given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for automations given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutomation"
              }
            }
          }
        },
        "description": "Create a Automation.",
        "operationId": "createAutomation",
        "summary": "Create Automation",
        "tags": [
          "automations"
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation": {
                    "summary": "Automation",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "automation",
                        "attributes": {
                          "id": 2,
                          "name": "Delirium Tremens #12",
                          "created_at": "2023-04-21T13:05:13.200Z",
                          "updated_at": "2023-04-21T13:05:13.200Z",
                          "active": false
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/automations/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for automation: `file`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/automations/{id}/download": {
      "get": {
        "description": "Download a previously uploaded automation file.",
        "operationId": "downloadAutomation",
        "summary": "Download Automation",
        "tags": [
          "automations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Automation with a file to download."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation download": {
                    "summary": "Automation download",
                    "value": "when:\n  RESOURCE_OPEN:\n    type: smart_view\nand: |\n  AND(\n    resource.data.attributes.settings.filters.contains = 'workflow-template-uuid',\n    AND(\n      resource.data.attributes.settings.filters.types[0] = 'workflow_run',\n      resource.data.attributes.settings.filters.statuses[0] = 1\n    )\n  )\ndo:\n  webhook:\n    url: http://localhost:5000/__cypress__/webhook?status=200&body={{resource.data.attributes.settings.filters.contains}}\n    method: post\n    headers:\n      authorization: \"Bearer {{signal.auth_token.openid_connect}}\"\n      content-type: application/json\n    body: |\n      {\n        \"automation_id\": {{automation.data.id}}\n      }\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/automations/{id}": {
      "patch": {
        "description": "Update a Automation.",
        "operationId": "updateAutomation",
        "summary": "Update Automation",
        "tags": [
          "automations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Automation to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Automation.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAutomation"
              },
              "example": {
                "data": {
                  "type": "automation",
                  "attributes": {
                    "name": "Delirium Tremens #25"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation": {
                    "summary": "Automation",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "automation",
                        "attributes": {
                          "id": 1,
                          "name": "Delirium Tremens #25",
                          "created_at": "2023-04-21T13:05:16.827Z",
                          "updated_at": "2023-04-21T13:05:17.131Z",
                          "active": false
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/automations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Automation.",
        "operationId": "deleteAutomation",
        "summary": "Delete Automation",
        "tags": [
          "automations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Automation to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channels": {
      "get": {
        "description": "Get a list of existing Channels.",
        "operationId": "getChannels",
        "summary": "List of existing Channels",
        "tags": [
          "channels"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Channel attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ChannelsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelsResponse"
                },
                "examples": {
                  "List of Channels": {
                    "summary": "List of Channels",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "channel",
                          "attributes": {
                            "interval": null,
                            "name": "weight",
                            "on_update": null,
                            "status": "online",
                            "unit": "mg",
                            "type_sym": "float",
                            "specific_attributes": {
                              "description": ""
                            },
                            "disabled": false,
                            "dynamic": false,
                            "device_class": "25",
                            "has_element": true
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "thresholds": {
                              "data": []
                            },
                            "incidents": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "2",
                          "type": "channel",
                          "attributes": {
                            "interval": null,
                            "name": "display_weight",
                            "on_update": null,
                            "status": "online",
                            "unit": "mg",
                            "type_sym": "float",
                            "specific_attributes": {
                              "description": ""
                            },
                            "disabled": false,
                            "dynamic": false,
                            "device_class": "25",
                            "has_element": true
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "thresholds": {
                              "data": []
                            },
                            "incidents": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "3",
                          "type": "channel",
                          "attributes": {
                            "interval": null,
                            "name": "rawdata",
                            "on_update": null,
                            "status": "online",
                            "unit": null,
                            "type_sym": "string",
                            "specific_attributes": {},
                            "disabled": false,
                            "dynamic": false,
                            "device_class": "25",
                            "has_element": false
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "thresholds": {
                              "data": []
                            },
                            "incidents": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "4",
                          "type": "channel",
                          "attributes": {
                            "interval": null,
                            "name": "status",
                            "on_update": null,
                            "status": "online",
                            "unit": null,
                            "type_sym": "string",
                            "specific_attributes": {},
                            "disabled": false,
                            "dynamic": false,
                            "device_class": "25",
                            "has_element": false
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "thresholds": {
                              "data": []
                            },
                            "incidents": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "5",
                          "type": "channel",
                          "attributes": {
                            "interval": null,
                            "name": "channel-37",
                            "on_update": null,
                            "status": "online",
                            "unit": "A",
                            "type_sym": "float",
                            "specific_attributes": {},
                            "disabled": false,
                            "dynamic": true,
                            "device_class": "25",
                            "has_element": false
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "thresholds": {
                              "data": []
                            },
                            "incidents": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 5,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "recordsSize": 5
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channels/{id}": {
      "get": {
        "description": "Get a single Channel by its id.",
        "operationId": "getChannel",
        "summary": "Get Channel",
        "tags": [
          "channels"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Channel to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Channel attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `device`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                },
                "examples": {
                  "Channel": {
                    "summary": "Channel",
                    "value": {
                      "data": {
                        "id": "5",
                        "type": "channel",
                        "attributes": {
                          "name": "channel-42",
                          "status": "online",
                          "unit": "A",
                          "type_sym": "float",
                          "specific_attributes": {},
                          "disabled": false,
                          "dynamic": true,
                          "device_class": "25",
                          "has_element": false
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "thresholds": {
                            "data": []
                          },
                          "channel_thresholds": {
                            "data": []
                          },
                          "incidents": {
                            "data": []
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection_resources": {
      "get": {
        "description": "Get a list of existing CollectionResources.",
        "operationId": "getCollectionResources",
        "summary": "Get Collection Resources",
        "tags": [
          "collection_resources"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CollectionResource attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `collection`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CollectionResourcesFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourcesResponse"
                },
                "examples": {
                  "List of CollectionResources": {
                    "summary": "List of CollectionResources",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "collection_resource",
                          "attributes": {
                            "resource_id": 2,
                            "resource_type": "Collection",
                            "created_at": "2023-04-21T13:05:51.925Z",
                            "updated_at": "2023-04-21T13:05:51.925Z",
                            "hidden_at": null
                          },
                          "relationships": {
                            "collection": {
                              "data": {
                                "id": "1",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "3",
                          "type": "collection_resource",
                          "attributes": {
                            "resource_id": 4,
                            "resource_type": "Collection",
                            "created_at": "2023-04-21T13:05:52.026Z",
                            "updated_at": "2023-04-21T13:05:52.026Z",
                            "hidden_at": null
                          },
                          "relationships": {
                            "collection": {
                              "data": {
                                "id": "1",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "4",
                          "type": "collection_resource",
                          "attributes": {
                            "resource_id": 1,
                            "resource_type": "Sample",
                            "created_at": "2023-04-21T13:05:52.092Z",
                            "updated_at": "2023-04-21T13:05:52.092Z",
                            "hidden_at": null
                          },
                          "relationships": {
                            "collection": {
                              "data": {
                                "id": "4",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          3,
                          4
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong collection_resources attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for collection_resources given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection_resources/{id}": {},
    "/collections": {
      "get": {
        "description": "Get a list of existing Collections.",
        "operationId": "getCollections",
        "summary": "Get Collections",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Collection attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CollectionsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponse"
                },
                "examples": {
                  "List of Collections": {
                    "summary": "List of Collections",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "collection",
                          "attributes": {
                            "display_name": "Collections",
                            "name": "root_collection",
                            "created_at": "2023-04-21T12:45:57.882Z",
                            "updated_at": "2023-04-21T12:45:57.882Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "group"
                                },
                                {
                                  "id": "4",
                                  "type": "group"
                                },
                                {
                                  "id": "5",
                                  "type": "group"
                                },
                                {
                                  "id": "6",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/collections/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "collection",
                          "attributes": {
                            "display_name": "Heavy Duty Paper Bottle",
                            "name": "Heavy Duty Paper Bottle",
                            "created_at": "2023-04-21T13:05:56.612Z",
                            "updated_at": "2023-04-21T13:05:56.612Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "group"
                                },
                                {
                                  "id": "4",
                                  "type": "group"
                                },
                                {
                                  "id": "5",
                                  "type": "group"
                                },
                                {
                                  "id": "6",
                                  "type": "group"
                                },
                                {
                                  "id": "7",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/collections/2"
                          }
                        },
                        {
                          "id": "4",
                          "type": "collection",
                          "attributes": {
                            "display_name": "Aerodynamic Steel Lamp",
                            "name": "Aerodynamic Steel Lamp",
                            "created_at": "2023-04-21T13:05:56.736Z",
                            "updated_at": "2023-04-21T13:05:56.736Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "group"
                                },
                                {
                                  "id": "4",
                                  "type": "group"
                                },
                                {
                                  "id": "5",
                                  "type": "group"
                                },
                                {
                                  "id": "6",
                                  "type": "group"
                                },
                                {
                                  "id": "7",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/collections/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          2,
                          4
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong collections attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for collections given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Collection.",
        "operationId": "createCollection",
        "summary": "Create Collection",
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Create a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollection"
              },
              "example": {
                "data": {
                  "type": "collection",
                  "attributes": {
                    "name": "Test collection"
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "5",
                        "type": "collection",
                        "attributes": {
                          "display_name": "Test collection",
                          "name": "Test collection",
                          "created_at": "2023-04-21T13:06:06.799Z",
                          "updated_at": "2023-04-21T13:06:06.799Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "3",
                                "type": "group"
                              },
                              {
                                "id": "4",
                                "type": "group"
                              },
                              {
                                "id": "5",
                                "type": "group"
                              },
                              {
                                "id": "6",
                                "type": "group"
                              },
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/collections/5"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for collection: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/collections/{id}": {
      "get": {
        "description": "Get a single Collection by its id.",
        "operationId": "getCollection",
        "summary": "Get Collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Collection to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Collection attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "collection",
                        "attributes": {
                          "display_name": "Heavy Duty Paper Bottle",
                          "name": "Heavy Duty Paper Bottle",
                          "created_at": "2023-04-21T13:06:01.262Z",
                          "updated_at": "2023-04-21T13:06:01.262Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "3",
                                "type": "group"
                              },
                              {
                                "id": "4",
                                "type": "group"
                              },
                              {
                                "id": "5",
                                "type": "group"
                              },
                              {
                                "id": "6",
                                "type": "group"
                              },
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/collections/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for collections given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Collection.",
        "operationId": "updateCollection",
        "summary": "Update Collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCollection"
              },
              "example": {
                "data": {
                  "type": "collection",
                  "attributes": {
                    "name": "Test collection updated"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "collection",
                        "attributes": {
                          "display_name": "Test collection updated",
                          "name": "Test collection updated",
                          "created_at": "2023-04-21T13:06:13.119Z",
                          "updated_at": "2023-04-21T13:06:13.782Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "3",
                                "type": "group"
                              },
                              {
                                "id": "4",
                                "type": "group"
                              },
                              {
                                "id": "5",
                                "type": "group"
                              },
                              {
                                "id": "6",
                                "type": "group"
                              },
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/collections/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Collection.",
        "operationId": "deleteCollection",
        "summary": "Delete Collection",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Error (Non-empty Collection)": {
                    "summary": "Conflict Error (Non-empty Collection)",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent collection_resources",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collections/{id}/resources": {
      "post": {
        "description": "Add a Resource to a Collection.",
        "operationId": "addCollectionResource",
        "summary": "Add Collection Resource",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create collection of a Resource.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AddResource"
              },
              "example": {
                "data": {
                  "type": "resource",
                  "attributes": {
                    "resource_id": "1",
                    "resource_type": "sample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "6",
                        "type": "collection_resource",
                        "attributes": {
                          "resource_id": 1,
                          "resource_type": "Sample",
                          "created_at": "2023-04-21T13:14:07.816Z",
                          "updated_at": "2023-04-21T13:14:07.816Z"
                        },
                        "relationships": {
                          "collection": {
                            "data": {
                              "id": "2",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collections/{id}/resources/{resource_type}/{resource_id}": {
      "patch": {
        "description": "Move a Resource to a Collection.",
        "operationId": "moveCollectionResource",
        "summary": "Move Collection Resource",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update collection of a Resource.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/MoveResource"
              },
              "example": {
                "data": {
                  "type": "resource",
                  "attributes": {
                    "collection_id": "4"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "6",
                        "type": "collection_resource",
                        "attributes": {
                          "resource_id": 1,
                          "resource_type": "Sample",
                          "created_at": "2023-04-21T13:14:11.207Z",
                          "updated_at": "2023-04-21T13:14:11.207Z"
                        },
                        "relationships": {
                          "collection": {
                            "data": {
                              "id": "4",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Resource from a Collection.",
        "operationId": "deleteCollectionResource",
        "summary": "Delete Collection Resource",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command_executions": {
      "get": {
        "description": "Get a list of existing CommandExecutions.",
        "operationId": "getCommandExecutions",
        "summary": "Get Command Executions",
        "tags": [
          "command_executions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CommandExecution attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommandExecutionsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionsResponse"
                },
                "examples": {
                  "List of CommandExecutions": {
                    "summary": "List of CommandExecutions",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "command_execution",
                          "attributes": {
                            "id": 1,
                            "uuid": "9fd7ceee-68ff-44b9-8b35-393f173f1fcb",
                            "parameters": null,
                            "device_id": 1,
                            "user_id": 1,
                            "status": "sent",
                            "data": null,
                            "confirmed_at": null,
                            "finished_at": null,
                            "created_at": "2023-06-21T08:27:54.663Z",
                            "updated_at": "2023-06-21T08:27:54.663Z"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "context": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/command_executions/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "command_execution",
                          "attributes": {
                            "id": 2,
                            "uuid": "8a4f6e72-d20f-402c-8990-bd479bfe6130",
                            "parameters": null,
                            "device_id": 1,
                            "user_id": 1,
                            "status": "sent",
                            "data": null,
                            "confirmed_at": null,
                            "finished_at": null,
                            "created_at": "2023-06-21T08:27:54.683Z",
                            "updated_at": "2023-06-21T08:27:54.683Z"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "context": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/command_executions/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong command_executions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/command_executions/{id}": {
      "get": {
        "description": "Get a single CommandExecution by its id.",
        "operationId": "getCommandExecution",
        "summary": "Get Command Execution",
        "tags": [
          "command_executions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of CommandExecution to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CommandExecution attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `device`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                },
                "examples": {
                  "CommandExecution": {
                    "summary": "CommandExecution",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "command_execution",
                        "attributes": {
                          "id": 1,
                          "uuid": "73ee9b26-ce91-4f6c-b0eb-a0715c00f3dc",
                          "device_id": 1,
                          "user_id": 1,
                          "status": "sent",
                          "created_at": "2023-06-21T08:28:00.687Z",
                          "updated_at": "2023-06-21T08:28:00.687Z"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "context": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/command_executions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "description": "Get a list of existing Comments.",
        "operationId": "getComments",
        "summary": "Get Comments",
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Comment attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: owner."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommentsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsResponse"
                },
                "examples": {
                  "List of Comments": {
                    "summary": "List of Comments",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "comment",
                          "attributes": {
                            "content": "Illo cupiditate neque praesentium.",
                            "owner_display_name": "Gorczany-4-74154",
                            "created_at": "2023-06-21T11:37:34.775Z",
                            "updated_at": "2023-06-21T11:37:34.775Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/comments/3"
                          }
                        },
                        {
                          "id": "2",
                          "type": "comment",
                          "attributes": {
                            "content": "Officia est odit ut.",
                            "owner_display_name": "Bednar-3-86940",
                            "created_at": "2023-06-21T11:37:34.735Z",
                            "updated_at": "2023-06-21T11:37:34.735Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/comments/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "comment",
                          "attributes": {
                            "content": "Quod id doloremque sint.",
                            "owner_display_name": "Reed McGlynn",
                            "created_at": "2023-06-21T11:37:34.702Z",
                            "updated_at": "2023-06-21T11:37:34.702Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/comments/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          3,
                          2,
                          1
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong comments attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "commentable filter is missing": {
                    "summary": "commentable filter is missing",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for comments: filter[comments][commentable_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "commentable type is wrong": {
                    "summary": "commentable type is wrong",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Invalid values: Wierd given for comments commentable_type.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "commentable doesn't exist": {
                    "summary": "commentable doesn't exist",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Comment.",
        "operationId": "createComment",
        "summary": "Create Comment",
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a Comment.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              },
              "example": {
                "data": {
                  "type": "comment",
                  "attributes": {
                    "content": "Test info",
                    "owner_id": "1"
                  },
                  "relationships": {
                    "commentable": {
                      "data": {
                        "id": "1",
                        "type": "WorkflowStep"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "comment",
                        "attributes": {
                          "content": "Test info",
                          "owner_display_name": "Reed McGlynn",
                          "created_at": "2023-06-21T11:37:54.133Z",
                          "updated_at": "2023-06-21T11:37:54.133Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/comments/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for comment: `content`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "content": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "description": "Get a single Comment by its id.",
        "operationId": "getComment",
        "summary": "Get Comment",
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Comment to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Comment attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "comment",
                        "attributes": {
                          "content": "Quod id doloremque sint.",
                          "owner_display_name": "Reed McGlynn",
                          "created_at": "2023-06-21T11:37:45.968Z",
                          "updated_at": "2023-06-21T11:37:45.968Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/comments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Comment.",
        "operationId": "updateComment",
        "summary": "Update Comment",
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Comment to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Comment.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComment"
              },
              "example": {
                "data": {
                  "type": "comment",
                  "attributes": {
                    "content": "Other info"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "comment",
                        "attributes": {
                          "content": "Other info",
                          "owner_display_name": "Reed McGlynn",
                          "created_at": "2023-06-21T11:38:01.566Z",
                          "updated_at": "2023-06-21T11:38:01.948Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/comments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Comment.",
        "operationId": "deleteComment",
        "summary": "Delete Comment",
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Comment to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors": {
      "get": {
        "description": "Get a list of existing Connectors.",
        "operationId": "getConnectors",
        "summary": "Get Connectors",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Connector attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ConnectorsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`, `pairings`, `ports`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsResponse"
                },
                "examples": {
                  "List of Connectors": {
                    "summary": "List of Connectors",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "637079184077",
                            "serial": "7e46f85f-9770-4c04-8d90-9119ab60421e",
                            "last_seen_at": "2023-04-19T13:07:13.167Z",
                            "last_appeared_at": "2023-04-19T13:07:13.168Z",
                            "status": "offline",
                            "name": "6370-7918-4077",
                            "hidden_at": null,
                            "updated_at": "2023-04-21T13:07:13.199Z",
                            "created_at": "2023-04-21T13:07:13.177Z",
                            "last_reported_at": "2023-04-19T13:07:13.168Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "custom_attributes": [],
                            "connector_key_nice": "6370-7918-4077",
                            "owner_id": 1,
                            "slugs": [
                              "6370-7918-4077"
                            ],
                            "internal_ip": "73bd:c7f0:f1dc:f13d:20f4:f2eb:32b8:810f",
                            "external_ip": "4db7:46eb:e4ee:2978:9109:9b9d:c398:5ffe"
                          },
                          "relationships": {
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "port"
                                },
                                {
                                  "id": "2",
                                  "type": "port"
                                },
                                {
                                  "id": "3",
                                  "type": "port"
                                },
                                {
                                  "id": "4",
                                  "type": "port"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/connectors/1"
                          }
                        },
                        {
                          "id": "4",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "386549847491",
                            "serial": "ebc00949-87f5-402f-9f5b-6956bd01b8fa",
                            "last_seen_at": "2023-04-19T13:07:13.235Z",
                            "last_appeared_at": "2023-04-19T13:07:13.235Z",
                            "status": "offline",
                            "name": "3865-4984-7491",
                            "hidden_at": null,
                            "updated_at": "2023-04-21T13:07:13.250Z",
                            "created_at": "2023-04-21T13:07:13.239Z",
                            "last_reported_at": "2023-04-19T13:07:13.235Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "custom_attributes": [],
                            "connector_key_nice": "3865-4984-7491",
                            "owner_id": 1,
                            "slugs": [
                              "3865-4984-7491"
                            ],
                            "internal_ip": "3a33:f303:d63a:f647:de93:bf5c:3e3e:9535",
                            "external_ip": "a374:fcf2:8dec:856d:2d49:9c6a:f0e1:c338"
                          },
                          "relationships": {
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "13",
                                  "type": "port"
                                },
                                {
                                  "id": "14",
                                  "type": "port"
                                },
                                {
                                  "id": "15",
                                  "type": "port"
                                },
                                {
                                  "id": "16",
                                  "type": "port"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/connectors/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          4
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of found Connectors": {
                    "summary": "List of found Connectors",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "914177240256",
                            "serial": "aa9c061d-0d41-4e5a-9fe7-12129babacb2",
                            "last_seen_at": "2023-04-19T13:07:13.941Z",
                            "last_appeared_at": "2023-04-19T13:07:13.941Z",
                            "status": "offline",
                            "name": "9141-7724-0256",
                            "hidden_at": null,
                            "updated_at": "2023-04-21T13:07:13.955Z",
                            "created_at": "2023-04-21T13:07:13.944Z",
                            "last_reported_at": "2023-04-19T13:07:13.941Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "custom_attributes": [],
                            "connector_key_nice": "9141-7724-0256",
                            "owner_id": 1,
                            "slugs": [
                              "9141-7724-0256"
                            ],
                            "internal_ip": "73bd:c7f0:f1dc:f13d:20f4:f2eb:32b8:810f",
                            "external_ip": "4db7:46eb:e4ee:2978:9109:9b9d:c398:5ffe"
                          },
                          "relationships": {
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "port"
                                },
                                {
                                  "id": "1",
                                  "type": "port"
                                },
                                {
                                  "id": "2",
                                  "type": "port"
                                },
                                {
                                  "id": "3",
                                  "type": "port"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/connectors/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Connector.",
        "operationId": "createConnector",
        "summary": "Create Connector",
        "tags": [
          "connectors"
        ],
        "requestBody": {
          "description": "Create a Connector.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnector"
              },
              "example": {
                "data": {
                  "type": "connector",
                  "attributes": {
                    "connector_key": "321232123212"
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "321232123212",
                          "serial": "d47b007e-32a0-4c0f-9749-339a617492d2",
                          "last_seen_at": "2023-04-19T13:07:21.847Z",
                          "last_appeared_at": "2023-04-19T13:07:21.847Z",
                          "status": "offline",
                          "name": "3212-3212-3212",
                          "updated_at": "2023-04-21T13:07:22.350Z",
                          "created_at": "2023-04-21T13:07:21.858Z",
                          "last_reported_at": "2023-04-19T13:07:21.847Z",
                          "platform": "linux",
                          "last_pairing_button_press_at": "2023-04-21T13:07:21.847Z",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "connector_key_nice": "3212-3212-3212",
                          "owner_id": 1,
                          "slugs": [
                            "3212-3212-3212"
                          ],
                          "internal_ip": "7fdd:4eb0:802:adac:848d:6177:7e9d:87f1",
                          "external_ip": "d943:8091:b7bd:d124:9e98:e1af:62c0:fbb4",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "2",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "5",
                                "type": "port"
                              },
                              {
                                "id": "6",
                                "type": "port"
                              },
                              {
                                "id": "7",
                                "type": "port"
                              },
                              {
                                "id": "8",
                                "type": "port"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/connectors/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for connector: `connector_key`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "target_collection": [
                                "can't be blank"
                              ],
                              "connector_key": [
                                "can't be blank"
                              ],
                              "version_modules": [
                                "can't be blank"
                              ],
                              "platform": [
                                "can't be blank"
                              ],
                              "cpu_architecture": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "The connector is available for pairing only up to 5 minutes after powering on.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/connectors/{id}": {
      "get": {
        "description": "Get a single Connector by its id.",
        "operationId": "getConnector",
        "summary": "Get Connector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Connector to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Connector attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`, `pairings`, `ports`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "948042766566",
                          "serial": "5365b940-dfa3-4163-b686-d75bac7a3a20",
                          "last_seen_at": "2023-04-19T13:07:16.755Z",
                          "last_appeared_at": "2023-04-19T13:07:16.755Z",
                          "status": "offline",
                          "name": "9480-4276-6566",
                          "updated_at": "2023-04-21T13:07:16.806Z",
                          "created_at": "2023-04-21T13:07:16.769Z",
                          "last_reported_at": "2023-04-19T13:07:16.755Z",
                          "platform": "linux",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "connector_key_nice": "9480-4276-6566",
                          "owner_id": 1,
                          "slugs": [
                            "9480-4276-6566"
                          ],
                          "internal_ip": "73bd:c7f0:f1dc:f13d:20f4:f2eb:32b8:810f",
                          "external_ip": "4db7:46eb:e4ee:2978:9109:9b9d:c398:5ffe",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "1",
                                "type": "port"
                              },
                              {
                                "id": "2",
                                "type": "port"
                              },
                              {
                                "id": "3",
                                "type": "port"
                              },
                              {
                                "id": "4",
                                "type": "port"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/connectors/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Connector.",
        "operationId": "updateConnector",
        "summary": "Update Connector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Connector to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Connector.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConnector"
              },
              "example": {
                "data": {
                  "type": "connector",
                  "attributes": {
                    "name": "Connector's name"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "416501326190",
                          "serial": "0eb668be-0dda-4402-98b2-40907abe11a5",
                          "last_seen_at": "2023-04-19T13:07:30.464Z",
                          "last_appeared_at": "2023-04-19T13:07:30.465Z",
                          "status": "offline",
                          "name": "Connector's name",
                          "updated_at": "2023-04-21T13:07:31.080Z",
                          "created_at": "2023-04-21T13:07:30.481Z",
                          "last_reported_at": "2023-04-19T13:07:30.465Z",
                          "platform": "linux",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "connector_key_nice": "4165-0132-6190",
                          "owner_id": 1,
                          "slugs": [
                            "connector-s-name",
                            "4165-0132-6190"
                          ],
                          "internal_ip": "73bd:c7f0:f1dc:f13d:20f4:f2eb:32b8:810f",
                          "external_ip": "4db7:46eb:e4ee:2978:9109:9b9d:c398:5ffe",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "1",
                                "type": "port"
                              },
                              {
                                "id": "2",
                                "type": "port"
                              },
                              {
                                "id": "3",
                                "type": "port"
                              },
                              {
                                "id": "4",
                                "type": "port"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/connectors/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Connector.",
        "operationId": "deleteConnector",
        "summary": "Delete Connector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Connector to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/{id}/reset_drivers": {
      "post": {
        "description": "Force reset the driver for all connected devices.",
        "operationId": "createConnectorResetDriver",
        "summary": "Create Connector Reset Driver",
        "tags": [
          "connector_reset_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "ID of a Connector whose drivers will be reset."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Accepted": {
                    "summary": "Accepted",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/custom_attributes": {
      "get": {
        "description": "Get a list of existing CustomAttributes.",
        "operationId": "getCustomAttributes",
        "summary": "Get Custom Attributes",
        "tags": [
          "custom_attributes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CustomAttribute attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CustomAttributesFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributesResponse"
                },
                "examples": {
                  "List of CustomAttributes": {
                    "summary": "List of CustomAttributes",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "custom_attribute",
                          "attributes": {
                            "name": "Heavy Duty Paper Bottle",
                            "data_type": "text",
                            "description": null,
                            "options": {},
                            "resource_types": [
                              "Sample"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T13:08:11.746Z",
                            "updated_at": "2023-04-21T13:08:11.746Z",
                            "is_being_used": false
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/custom_attributes/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "custom_attribute",
                          "attributes": {
                            "name": "Aerodynamic Marble Keyboard",
                            "data_type": "text",
                            "description": null,
                            "options": {},
                            "resource_types": [
                              "Sample"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T13:08:11.760Z",
                            "updated_at": "2023-04-21T13:08:11.760Z",
                            "is_being_used": false
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/custom_attributes/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong custom_attributes attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for custom_attributes given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for custom_attributes given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a CustomAttribute.",
        "operationId": "createCustomAttribute",
        "summary": "Create Custom Attribute",
        "tags": [
          "custom_attributes"
        ],
        "requestBody": {
          "description": "Create a CustomAttribute.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomAttribute"
              },
              "example": {
                "data": {
                  "type": "custom_attribute",
                  "attributes": {
                    "name": "Test name",
                    "data_type": "text",
                    "description": "Experiments"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeResponse"
                },
                "examples": {
                  "CustomAttribute": {
                    "summary": "CustomAttribute",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "custom_attribute",
                        "attributes": {
                          "name": "Test name",
                          "data_type": "text",
                          "resource_types": [],
                          "created_at": "2023-04-21T13:08:19.717Z",
                          "updated_at": "2023-04-21T13:08:19.717Z",
                          "active": true,
                          "is_being_used": false,
                          "description": "Experiments",
                          "options": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/custom_attributes/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for custom_attribute: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/custom_attributes/{id}": {
      "get": {
        "description": "Get a single CustomAttribute by its id.",
        "operationId": "getCustomAttribute",
        "summary": "Get Custom Attribute",
        "tags": [
          "custom_attributes"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of CustomAttribute to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CustomAttribute attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeResponse"
                },
                "examples": {
                  "CustomAttribute": {
                    "summary": "CustomAttribute",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "custom_attribute",
                        "attributes": {
                          "name": "Heavy Duty Paper Bottle",
                          "data_type": "text",
                          "options": {},
                          "resource_types": [
                            "Sample"
                          ],
                          "created_at": "2023-04-21T13:08:15.814Z",
                          "updated_at": "2023-04-21T13:08:15.814Z",
                          "active": true,
                          "is_being_used": false
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/custom_attributes/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for custom_attributes given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for custom_attributes given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a CustomAttribute.",
        "operationId": "updateCustomAttribute",
        "summary": "Update Custom Attribute",
        "tags": [
          "custom_attributes"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a CustomAttribute to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a CustomAttribute.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomAttribute"
              },
              "example": {
                "data": {
                  "type": "custom_attribute",
                  "attributes": {
                    "name": "Test name updated",
                    "description": "Many Experiments"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeResponse"
                },
                "examples": {
                  "CustomAttribute": {
                    "summary": "CustomAttribute",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "custom_attribute",
                        "attributes": {
                          "name": "Test name updated",
                          "data_type": "text",
                          "options": {},
                          "resource_types": [
                            "Sample"
                          ],
                          "created_at": "2023-04-21T13:08:24.754Z",
                          "updated_at": "2023-04-21T13:08:25.170Z",
                          "active": true,
                          "is_being_used": false,
                          "description": "Many Experiments"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/custom_attributes/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Not Editable Params Error": {
                    "summary": "Not Editable Params Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Name The custom attribute is being used and thus cannot be edited.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "The custom attribute is being used and thus cannot be edited."
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a CustomAttribute.",
        "operationId": "deleteCustomAttribute",
        "summary": "Delete Custom Attribute",
        "tags": [
          "custom_attributes"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a CustomAttribute to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "description": "Get a list of existing Dashboards.",
        "operationId": "getDashboards",
        "summary": "Get Dashboards",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Dashboard attributes to be included in response."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardsResponse"
                },
                "examples": {
                  "List of Dashboards": {
                    "summary": "List of Dashboards",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Aerodynamic Marble Keyboard",
                            "slug": null,
                            "created_at": "2023-04-21T13:08:32.551Z",
                            "updated_at": "2023-04-21T13:08:32.551Z",
                            "hidden_at": null,
                            "public_access_token": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/dashboards/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Intelligent Marble Pants",
                            "slug": null,
                            "created_at": "2023-04-21T13:08:32.607Z",
                            "updated_at": "2023-04-21T13:08:32.607Z",
                            "hidden_at": null,
                            "public_access_token": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "3",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/dashboards/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of found Dashboards": {
                    "summary": "List of found Dashboards",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Aerodynamic Marble Keyboard",
                            "slug": null,
                            "created_at": "2023-04-21T13:08:33.187Z",
                            "updated_at": "2023-04-21T13:08:33.187Z",
                            "hidden_at": null,
                            "public_access_token": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/dashboards/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong dashboards attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for dashboards given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Dashboard.",
        "operationId": "createDashboard",
        "summary": "Create Dashboard",
        "tags": [
          "dashboards"
        ],
        "requestBody": {
          "description": "Create a Dashboard.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDashboard"
              },
              "example": {
                "data": {
                  "type": "dashboard",
                  "attributes": {
                    "name": "Test name 2",
                    "copy_from": "1"
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name 2",
                          "created_at": "2023-04-21T13:08:40.054Z",
                          "updated_at": "2023-04-21T13:08:40.054Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/dashboards/3"
                        }
                      }
                    }
                  },
                  "Create a Dashboard copy": {
                    "summary": "Create a Dashboard copy",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name 2",
                          "created_at": "2023-04-21T13:08:40.702Z",
                          "updated_at": "2023-04-21T13:08:40.702Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/dashboards/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for dashboard: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "target_collection": [
                                "can't be blank"
                              ],
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Layout exemplar is forbidden": {
                    "summary": "Layout exemplar is forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Layout exemplar does not exist": {
                    "summary": "Layout exemplar does not exist",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "Dashboard exemplar with the ID that you passed does not exist or it has been archived",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/dashboards/{id}": {
      "get": {
        "description": "Get a single Dashboard by its id.",
        "operationId": "getDashboard",
        "summary": "Get Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Dashboard to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Dashboard attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Aerodynamic Marble Keyboard",
                          "created_at": "2023-04-21T13:08:36.272Z",
                          "updated_at": "2023-04-21T13:08:36.272Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/dashboards/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for dashboards given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Dashboard.",
        "operationId": "updateDashboard",
        "summary": "Update Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Dashboard to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Dashboard.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboard"
              },
              "example": {
                "data": {
                  "type": "dashboard",
                  "attributes": {
                    "name": "Test name updated"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name updated",
                          "created_at": "2023-04-21T13:08:47.993Z",
                          "updated_at": "2023-04-21T13:08:48.476Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/dashboards/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Dashboard.",
        "operationId": "deleteDashboard",
        "summary": "Delete Dashboard",
        "tags": [
          "dashboards"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Dashboard to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data_points": {
      "get": {
        "description": "Get a list of existing DataPoints. By default, returns the data points created not earlier than a week ago. Set the `data_points[timestamp]` filter if different time scope is needed.",
        "operationId": "getDataPoints",
        "summary": "Get Data Points",
        "tags": [
          "data_points"
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DataPointsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related channels to include. Allowed value is: `channel`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Limit"
          },
          {
            "name": "sampled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Flag indicating whether data points should be downsampled using the Largest-Triangle-Three-Buckets algorithm. The flags `sampled` and `grouped` are mutually exclusive"
          },
          {
            "name": "sample_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1900
            },
            "description": "If the sample flag is set to true, sets the threshold to the sampling algorithm indicating the number of data points that will be returned."
          },
          {
            "name": "grouped",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Flag indicating whether data points should be grouped.The flags `sampled` and `grouped` are mutually exclusive"
          },
          {
            "name": "aggregate",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "count"
              ],
              "enum": [
                "sum",
                "avg",
                "min",
                "max",
                "count",
                "first",
                "last"
              ]
            },
            "description": "Aggregate function for grouped data points"
          },
          {
            "name": "bucket_size",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "1 minute"
            },
            "description": "Time span defining a group"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPointsResponse"
                },
                "examples": {
                  "List of DataPoints": {
                    "summary": "List of DataPoints",
                    "value": {
                      "data": [
                        [
                          1509494400000,
                          10.6,
                          "abc",
                          5
                        ],
                        [
                          1509580800000,
                          20.7,
                          "abc",
                          5
                        ],
                        [
                          1509667200000,
                          30.8,
                          "abc",
                          5
                        ],
                        [
                          1509753600000,
                          40.9,
                          "abc",
                          5
                        ],
                        [
                          1509840000000,
                          50.1,
                          "abc",
                          5
                        ],
                        [
                          1509926400000,
                          60.11,
                          "abc",
                          5
                        ],
                        [
                          1510012800000,
                          70.12,
                          "abc",
                          5
                        ],
                        [
                          1510099200000,
                          80.13,
                          "abc",
                          5
                        ],
                        [
                          1512086400000,
                          10,
                          "abc",
                          6
                        ],
                        [
                          1512172800000,
                          20,
                          "abc",
                          6
                        ],
                        [
                          1512259200000,
                          30,
                          "abc",
                          6
                        ],
                        [
                          1512345600000,
                          40,
                          "abc",
                          6
                        ],
                        [
                          1512432000000,
                          50,
                          "abc",
                          6
                        ],
                        [
                          1512518400000,
                          60,
                          "abc",
                          6
                        ],
                        [
                          1512604800000,
                          70,
                          "abc",
                          6
                        ],
                        [
                          1512691200000,
                          80,
                          "abc",
                          6
                        ]
                      ],
                      "meta": {
                        "pagesTotal": 1,
                        "recordsTotal": 16,
                        "recordsSize": 16,
                        "pageNumber": 1,
                        "pageSize": -1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for data_points: filter[data_points][channel_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You are not allowed to access this resource.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data_points/export": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportDataPointResponse"
                },
                "examples": {
                  "Export DataPoints": {
                    "summary": "Export DataPoints",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "export",
                        "attributes": {
                          "secure_token": "d50b877f-781e-4b6b-8f5b-98d3e40fed07",
                          "status": "processing",
                          "created_at": "2023-04-21T13:09:02.416Z",
                          "updated_at": "2023-04-21T13:09:02.416Z",
                          "custom_attributes": [],
                          "display_name": "d50b877f"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/exports/1"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for data_points: filter[data_points][channel_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You are not allowed to access this resource.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Triggers a background job to export the data points.",
        "operationId": "exportDataPoint",
        "summary": "Export Data Point",
        "tags": [
          "data_points"
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DataPointsFilter"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Limit"
          },
          {
            "name": "collection_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Target Collection where the Export will be added to"
          },
          {
            "name": "export_format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv",
                "xlsx"
              ]
            },
            "description": "Export format"
          },
          {
            "name": "sampled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Flag indicating whether data points should be downsampled using the Largest-Triangle-Three-Buckets algorithm. The flags `sampled` and `grouped` are mutually exclusive"
          },
          {
            "name": "sample_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1900
            },
            "description": "If the sample flag is set to true, sets the threshold to the sampling algorithm indicating the number of data points that will be returned."
          },
          {
            "name": "grouped",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Flag indicating whether data points should be grouped.The flags `sampled` and `grouped` are mutually exclusive"
          },
          {
            "name": "aggregate",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "count"
              ],
              "enum": [
                "sum",
                "avg",
                "min",
                "max",
                "count",
                "first",
                "last"
              ]
            },
            "description": "Aggregate function for grouped data points"
          },
          {
            "name": "bucket_size",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "1 minute"
            },
            "description": "Time span defining a group"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Export a DataPoint.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportDataPoint"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/device_classes": {
      "get": {
        "description": "Get a list of existing Device Classes.",
        "operationId": "getDeviceClasses",
        "summary": "Get Device Classes",
        "tags": [
          "device_classes"
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceClassesResponse"
                },
                "examples": {
                  "List of Device Classes": {
                    "summary": "List of Device Classes",
                    "value": {
                      "data": [
                        {
                          "id": "8",
                          "type": "device_class",
                          "attributes": {
                            "label": "Incubator"
                          }
                        },
                        {
                          "id": "20",
                          "type": "device_class",
                          "attributes": {
                            "label": "Heating/Cooling Unit"
                          }
                        },
                        {
                          "id": "24",
                          "type": "device_class",
                          "attributes": {
                            "label": "Evaporator"
                          }
                        },
                        {
                          "id": "25",
                          "type": "device_class",
                          "attributes": {
                            "label": "Balance"
                          }
                        },
                        {
                          "id": "26",
                          "type": "device_class",
                          "attributes": {
                            "label": "Pump (liquid)"
                          }
                        },
                        {
                          "id": "27",
                          "type": "device_class",
                          "attributes": {
                            "label": "Vacuum Pump"
                          }
                        },
                        {
                          "id": "31",
                          "type": "device_class",
                          "attributes": {
                            "label": "Camera"
                          }
                        },
                        {
                          "id": "1000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Custom Device Class"
                          }
                        },
                        {
                          "id": "1050",
                          "type": "device_class",
                          "attributes": {
                            "label": "Developer Console"
                          }
                        },
                        {
                          "id": "2000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Power Meter"
                          }
                        },
                        {
                          "id": "3000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Soil Moisture Sensor"
                          }
                        },
                        {
                          "id": "3100",
                          "type": "device_class",
                          "attributes": {
                            "label": "Probe"
                          }
                        },
                        {
                          "id": "4000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Analyzer"
                          }
                        },
                        {
                          "id": "5000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Heat Control"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/device_drivers": {
      "get": {
        "description": "Get a list of existing Device Drivers.",
        "operationId": "getDeviceDrivers",
        "summary": "Get Device Drivers",
        "tags": [
          "device_drivers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Driver attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeviceDriversFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriversResponse"
                },
                "examples": {
                  "List of Device Drivers": {
                    "summary": "List of Device Drivers",
                    "value": {
                      "data": [
                        {
                          "id": "10",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-mix",
                            "version": "2.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9050
                            ],
                            "bundle": "driver-2mag-mix-2.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9050": {
                                "id": 9050,
                                "device_class": "20",
                                "name": "MIXdrive",
                                "vendor": "2mag",
                                "driver_type": {
                                  "name": "driver-2mag-mix",
                                  "version": "2.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9F-DCE",
                                    "usb_mapping": "DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9050"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "mode",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "enumLabels": [
                                      "remote",
                                      "manual"
                                    ]
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/10"
                          }
                        },
                        {
                          "id": "1",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-mix",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              9050
                            ],
                            "bundle": "driver-2mag-mix-develop.zip",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9050": {
                                "id": 9050,
                                "device_class": "20",
                                "name": "MIXdrive",
                                "vendor": "2mag",
                                "driver_type": {
                                  "name": "driver-2mag-mix",
                                  "version": "develop"
                                },
                                "hardware": {
                                  "receptacle": "DE09F-DCE",
                                  "usb_mapping": "universal_converter_usb_serial"
                                },
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "plugnplay": {
                                  "passive_detection": false,
                                  "usb_id": "0483:5740"
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9050"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/1"
                          }
                        },
                        {
                          "id": "9",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-mix",
                            "version": "2.0.0",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9050
                            ],
                            "bundle": "driver-2mag-mix-2.0.0.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9050": {
                                "id": 9050,
                                "device_class": "20",
                                "name": "MIXdrive",
                                "vendor": "2mag",
                                "driver_type": {
                                  "name": "driver-2mag-mix",
                                  "version": "develop"
                                },
                                "hardware": {
                                  "receptacle": "DE09F-DCE",
                                  "usb_mapping": "universal_converter_usb_serial"
                                },
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "plugnplay": {
                                  "passive_detection": false,
                                  "usb_id": "0483:5740"
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9050"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/9"
                          }
                        },
                        {
                          "id": "11",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-stirring-hotplate",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9051
                            ],
                            "bundle": "driver-2mag-stirring-hotplate-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9051": {
                                "id": 9051,
                                "device_class": "20",
                                "name": "Stirring Hotplate 6",
                                "vendor": "2mag",
                                "driver_type": {
                                  "name": "driver-2mag-stirring-hotplate",
                                  "version": "1.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9F-DCE",
                                    "usb_mapping": "DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9050"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "mode",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "enumLabels": [
                                      "remote",
                                      "manual"
                                    ]
                                  },
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 2000
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 2000,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 200,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 200,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 2
                                  },
                                  {
                                    "name": "heater_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_heater_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/11"
                          }
                        },
                        {
                          "id": "25",
                          "type": "device_driver",
                          "attributes": {
                            "name": "astmserial",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "device_types": [],
                            "bundle": "driver-astmserial-0.0.1.zip",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {}
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/25"
                          }
                        },
                        {
                          "id": "2",
                          "type": "device_driver",
                          "attributes": {
                            "name": "barcode-hid",
                            "version": "0.1.3",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              9980
                            ],
                            "bundle": "driver-barcode-hid-0.1.3.zip",
                            "schema": null,
                            "device_type_definitions": {
                              "9980": {
                                "id": 9980,
                                "device_class": "31",
                                "name": "USB Barcode Scanner",
                                "vendor": "Aplic",
                                "driver_type": {
                                  "name": "driver-barcode-hid",
                                  "version": "0.1.3"
                                },
                                "hardware": {
                                  "receptacle": "cable",
                                  "usb_mapping": "vendor_cable"
                                },
                                "parameters": {
                                  "hid": {
                                    "dummy": 1
                                  }
                                },
                                "plugnplay": {
                                  "usb_id": "barcodereader"
                                },
                                "port_simulation": {
                                  "class": "usb_barcodereader",
                                  "usb_device": {
                                    "vendor_id": "13BA",
                                    "model_id": "0018",
                                    "serial": "simulated 13ba_Barcode_Reader",
                                    "type": "/dev/hidraw",
                                    "dev": "/dev/hidraw0"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "text",
                                    "unit": "text",
                                    "type": "Channels::Rawdata",
                                    "description": "Barcode"
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "simulate_input",
                                    "label": "simulate_input"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/2"
                          }
                        },
                        {
                          "id": "12",
                          "type": "device_driver",
                          "attributes": {
                            "name": "barcode-hid",
                            "version": "1.2.0",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9979,
                              9980
                            ],
                            "bundle": "driver-barcode-hid-1.2.0.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9979": {
                                "id": 9979,
                                "device_class": "1000",
                                "name": "Hyperion 1300g",
                                "vendor": "Honeywell",
                                "driver_type": {
                                  "name": "driver-barcode-hid",
                                  "version": "1.2.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "cable",
                                    "usb_mapping": "vendor_cable"
                                  }
                                ],
                                "parameters": {
                                  "hid": {
                                    "dummy": 1
                                  }
                                },
                                "port_simulation": {},
                                "channels": [
                                  {
                                    "name": "text",
                                    "unit": "text",
                                    "type": "Channels::Rawdata",
                                    "description": "Barcode"
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "simulate_input",
                                    "label": "simulate_input"
                                  }
                                ]
                              },
                              "9980": {
                                "id": 9980,
                                "device_class": "1000",
                                "name": "USB Barcode Scanner",
                                "vendor": "Aplic",
                                "driver_type": {
                                  "name": "driver-barcode-hid",
                                  "version": "1.2.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "cable",
                                    "usb_mapping": "vendor_cable"
                                  }
                                ],
                                "parameters": {
                                  "hid": {
                                    "dummy": 1
                                  }
                                },
                                "port_simulation": {},
                                "channels": [
                                  {
                                    "name": "text",
                                    "unit": "text",
                                    "type": "Channels::Rawdata",
                                    "description": "Barcode"
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "simulate_input",
                                    "label": "simulate_input"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/12"
                          }
                        },
                        {
                          "id": "3",
                          "type": "device_driver",
                          "attributes": {
                            "name": "console-serial",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [],
                            "bundle": "driver-console-serial-develop.zip",
                            "schema": null,
                            "device_type_definitions": {}
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/3"
                          }
                        },
                        {
                          "id": "13",
                          "type": "device_driver",
                          "attributes": {
                            "name": "eppendorf-5425",
                            "version": "2.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9700
                            ],
                            "bundle": "driver-eppendorf-5425-2.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9700": {
                                "id": 9700,
                                "device_class": "1000",
                                "name": "Centrifuge 5425",
                                "vendor": "Eppendorf",
                                "driver_type": {
                                  "name": "driver-eppendorf-5425",
                                  "version": "2.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-B",
                                    "usb_mapping": "usb_b_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 115200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6015",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9311"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 20000
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 20000,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "lid_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_lid_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "open",
                                          "closed"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "error_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "enumLabels": [
                                      "no error",
                                      "error"
                                    ]
                                  },
                                  {
                                    "name": "centrifugal_force",
                                    "unit": "g",
                                    "description": "",
                                    "min": 0,
                                    "max": 10000
                                  },
                                  {
                                    "name": "centrifugal_force_setpoint",
                                    "unit": "g",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 10000,
                                    "commands": [
                                      {
                                        "title": "set_centrifugal_force_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "runtime",
                                    "unit": "seconds",
                                    "description": "",
                                    "min": 0,
                                    "max": 86400
                                  },
                                  {
                                    "name": "runtime_setpoint",
                                    "unit": "seconds",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 86400,
                                    "commands": [
                                      {
                                        "title": "set_runtime_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/13"
                          }
                        },
                        {
                          "id": "14",
                          "type": "device_driver",
                          "attributes": {
                            "name": "heidolph-vap",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              6000
                            ],
                            "bundle": "driver-heidolph-vap-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "6000": {
                                "id": 6000,
                                "device_class": "24",
                                "name": "Hei-VAP",
                                "vendor": "Heidolph",
                                "driver_type": {
                                  "name": "driver-heidolph-vap",
                                  "version": "1.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-Mini-B",
                                    "usb_mapping": "usb_mini_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 115200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated FTDI_FT232R_USB_UART_A500DSHH",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim6000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 280
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 200,
                                    "capability": 1
                                  },
                                  {
                                    "name": "external_temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 200,
                                    "capability": 1
                                  },
                                  {
                                    "name": "vacuum",
                                    "unit": "mbar",
                                    "description": "",
                                    "min": 0,
                                    "max": 1200
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/14"
                          }
                        },
                        {
                          "id": "4",
                          "type": "device_driver",
                          "attributes": {
                            "name": "ika-retcontrol",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              9000
                            ],
                            "bundle": "driver-ika-retcontrol-0.0.1.zip",
                            "schema": null,
                            "device_type_definitions": {
                              "9000": {
                                "id": 9000,
                                "device_class": "20",
                                "name": "RET control",
                                "vendor": "IKA",
                                "driver_type": {
                                  "name": "driver-ika-retcontrol",
                                  "version": "0.0.5"
                                },
                                "hardware": {
                                  "receptacle": "DE09F-DCE",
                                  "usb_mapping": "universal_converter_usb_serial"
                                },
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 7,
                                    "parity": "even",
                                    "stopbits": 1
                                  }
                                },
                                "plugnplay": {
                                  "passive_detection": false,
                                  "usb_id": "0483:5740"
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_other",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 340,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 2
                                  },
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "heater_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_heater_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "temperature_mode",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_temperature_mode",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "int",
                                          "ext"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "reset",
                                    "label": "reset"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/4"
                          }
                        },
                        {
                          "id": "15",
                          "type": "device_driver",
                          "attributes": {
                            "name": "ika-retcontrol",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              9000
                            ],
                            "bundle": "driver-ika-retcontrol-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9000": {
                                "id": 9000,
                                "device_class": "20",
                                "name": "RET control",
                                "vendor": "IKA",
                                "driver_type": {
                                  "name": "driver-ika-retcontrol",
                                  "version": "1.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9F-DCE",
                                    "usb_mapping": "DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 7,
                                    "parity": "even",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_other",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 340,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 2
                                  },
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "heater_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_heater_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "temperature_mode",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_temperature_mode",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "int",
                                          "ext"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "reset",
                                    "label": "reset"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/15"
                          }
                        },
                        {
                          "id": "5",
                          "type": "device_driver",
                          "attributes": {
                            "name": "ika-retcontrol",
                            "version": "0.0.5",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              9000
                            ],
                            "bundle": "driver-ika-retcontrol-0.0.5.zip",
                            "schema": null,
                            "device_type_definitions": {
                              "9000": {
                                "id": 9000,
                                "device_class": "20",
                                "name": "RET control",
                                "vendor": "IKA",
                                "driver_type": {
                                  "name": "driver-ika-retcontrol",
                                  "version": "0.0.5"
                                },
                                "hardware": {
                                  "receptacle": "DE09F-DCE",
                                  "usb_mapping": "universal_converter_usb_serial"
                                },
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 7,
                                    "parity": "even",
                                    "stopbits": 1
                                  }
                                },
                                "plugnplay": {
                                  "passive_detection": false,
                                  "usb_id": "0483:5740"
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0483",
                                    "model_id": "5740",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim9000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_other",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 340,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 2
                                  },
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "heater_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_heater_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "stirrer_status",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_stirrer_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "temperature_mode",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_temperature_mode",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "int",
                                          "ext"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "reset",
                                    "label": "reset"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/5"
                          }
                        },
                        {
                          "id": "16",
                          "type": "device_driver",
                          "attributes": {
                            "name": "kern-abj",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              4000
                            ],
                            "bundle": "driver-kern-abj-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "4000": {
                                "id": 4000,
                                "device_class": "25",
                                "name": "ABJ-NM",
                                "vendor": "Kern",
                                "driver_type": {
                                  "name": "driver-kern-abj",
                                  "version": "1.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DIN45326",
                                    "usb_mapping": "vendor_cable,DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 1200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim4000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "weight",
                                    "unit": "mg",
                                    "description": ""
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "get_weight",
                                    "label": "print"
                                  },
                                  {
                                    "title": "set_zero",
                                    "label": "zero"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/16"
                          }
                        },
                        {
                          "id": "17",
                          "type": "device_driver",
                          "attributes": {
                            "name": "knf-simdos02",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              5000
                            ],
                            "bundle": "driver-knf-simdos02-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "5000": {
                                "id": 5000,
                                "device_class": "26",
                                "name": "SIMDOS 02",
                                "vendor": "KNF",
                                "driver_type": {
                                  "name": "driver-knf-simdos02",
                                  "version": "1.1.1"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim5000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "flowrate_setpoint",
                                    "unit": "ul/min",
                                    "description": "",
                                    "min": 0,
                                    "max": 500,
                                    "commands": [
                                      {
                                        "title": "set_flowrate_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "pump_engine",
                                    "unit": "boolean",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_pump_engine",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/17"
                          }
                        },
                        {
                          "id": "18",
                          "type": "device_driver",
                          "attributes": {
                            "name": "lauda-mc",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              8300,
                              8302,
                              8303
                            ],
                            "bundle": "driver-lauda-mc-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "8300": {
                                "id": 8300,
                                "device_class": "5000",
                                "name": "MC",
                                "vendor": "Lauda",
                                "driver_type": {
                                  "name": "driver-lauda-mc",
                                  "version": "1.1.1"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8200"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": -150,
                                    "max": 350,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": "1",
                                    "min": -150,
                                    "max": 350,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 4
                                  },
                                  {
                                    "name": "engine",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_engine",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "8302": {
                                "id": 8302,
                                "device_class": "5000",
                                "name": "RP",
                                "vendor": "Lauda",
                                "driver_type": {
                                  "name": "driver-lauda-mc",
                                  "version": "1.1.1"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8302"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": -150,
                                    "max": 350,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": "1",
                                    "min": -150,
                                    "max": 350,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 4
                                  },
                                  {
                                    "name": "engine",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_engine",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "8303": {
                                "id": 8303,
                                "device_class": "5000",
                                "name": "XT",
                                "vendor": "Lauda",
                                "driver_type": {
                                  "name": "driver-lauda-mc",
                                  "version": "1.1.1"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8302"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": -150,
                                    "max": 350,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": "1",
                                    "min": -150,
                                    "max": 350,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 4
                                  },
                                  {
                                    "name": "engine",
                                    "unit": "",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_engine",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/18"
                          }
                        },
                        {
                          "id": "6",
                          "type": "device_driver",
                          "attributes": {
                            "name": "logfile",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              9910
                            ],
                            "bundle": "driver-logfile-0.0.1.zip",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "9910": {
                                "id": 9910,
                                "device_class": "1000",
                                "name": "Logfile",
                                "vendor": "PC Generic",
                                "driver_type": {
                                  "name": "driver-logfile",
                                  "version": "master"
                                },
                                "hardware": {},
                                "parameters": {
                                  "logfile": {
                                    "rootfolder": "C:\\BrukerWS\\MSGLOG\\",
                                    "status_triggers": {
                                      "off": [
                                        "CONNECTION LOST",
                                        "Not Responding!",
                                        "MS: Not Connected"
                                      ],
                                      "on": [
                                        "RECONNECTED TO",
                                        "=== System Control Started",
                                        "MS: Ready"
                                      ],
                                      "measuring": [
                                        "MS: Acquiring"
                                      ]
                                    }
                                  }
                                },
                                "plugnplay": {},
                                "port_simulation": {},
                                "channels": [
                                  {
                                    "name": "text",
                                    "unit": "text",
                                    "description": "Log Entry"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "device_driver",
                          "attributes": {
                            "name": "oldwrapper",
                            "version": "0.1.0",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": true,
                            "device_types": [
                              1100,
                              2100,
                              2200,
                              3000,
                              3100,
                              3200,
                              3600,
                              4100,
                              4101,
                              4200,
                              4300,
                              6100,
                              6200,
                              8000,
                              8100,
                              8500
                            ],
                            "bundle": "driver-oldwrapper-0.1.0.zip",
                            "schema": null,
                            "device_type_definitions": {
                              "1100": {
                                "id": 1100,
                                "device_class": "2000",
                                "name": "VC820/VC840",
                                "vendor": "Voltcraft",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-A",
                                    "usb_mapping": "vendor_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 2400,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "067B",
                                    "model_id": "2303",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim1100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "frequency",
                                    "unit": "Hz",
                                    "description": "",
                                    "min": 45,
                                    "max": 65
                                  },
                                  {
                                    "name": "voltage",
                                    "unit": "V",
                                    "description": "",
                                    "min": 0,
                                    "max": 1000
                                  },
                                  {
                                    "name": "current",
                                    "unit": "A",
                                    "description": "",
                                    "min": 0,
                                    "max": 20
                                  },
                                  {
                                    "name": "resistance",
                                    "unit": "Ohm",
                                    "description": "",
                                    "min": 0,
                                    "max": 40000
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "celsius",
                                    "description": "",
                                    "min": 0,
                                    "max": 100,
                                    "capability": 1
                                  },
                                  {
                                    "name": "capacity",
                                    "unit": "Farad",
                                    "description": "",
                                    "min": 0,
                                    "max": 100
                                  },
                                  {
                                    "name": "ac",
                                    "unit": "boolean",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_ac",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "DC",
                                          "AC"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "2100": {
                                "id": 2100,
                                "device_class": "27",
                                "name": "DCU 002",
                                "vendor": "Pfeiffer Vacuum",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "1A86",
                                    "model_id": "7523",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim2100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1600
                                  }
                                ],
                                "commands": []
                              },
                              "2200": {
                                "id": 2200,
                                "device_class": "27",
                                "name": "SC 920",
                                "vendor": "KNF",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-B",
                                    "usb_mapping": "usb_b_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 115200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "04D8",
                                    "model_id": "FE6D",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim2200"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "pressure",
                                    "unit": "mbar",
                                    "description": "",
                                    "min": 0,
                                    "max": 1100
                                  },
                                  {
                                    "name": "pressure_setpoint",
                                    "unit": "mbar",
                                    "description": "",
                                    "min": 0,
                                    "max": 1100,
                                    "commands": [
                                      {
                                        "title": "set_pressure_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "power",
                                    "unit": "percent",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 100,
                                    "commands": [
                                      {
                                        "title": "set_power",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "runtime",
                                    "unit": "status",
                                    "description": "",
                                    "min": 0,
                                    "max": 100
                                  },
                                  {
                                    "name": "operatingmode",
                                    "unit": "status",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1,
                                      2,
                                      3
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_operatingmode",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "pump_down",
                                          "vac_control"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "coolant",
                                    "unit": "status",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_coolant",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "closed",
                                          "open"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "ventilation",
                                    "unit": "status",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_ventilation",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "closed",
                                          "open"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "name": "process",
                                    "unit": "status",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_process",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "3000": {
                                "id": 3000,
                                "device_class": "3000",
                                "name": "Soil Moisture 1282",
                                "vendor": "Sunrom",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "cable",
                                    "usb_mapping": "vendor_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "10C4",
                                    "model_id": "EA60",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim3000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "soil_moisture",
                                    "unit": "unit",
                                    "description": "",
                                    "min": 0,
                                    "max": 100
                                  }
                                ],
                                "commands": []
                              },
                              "3100": {
                                "id": 3100,
                                "device_class": "3100",
                                "name": "Vision",
                                "vendor": "ITA Instruments",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-Micro-B",
                                    "usb_mapping": "usb_micro_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 115200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6015",
                                    "serial": "simulated ITA Vision",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim3100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "infrared",
                                    "unit": "intensity",
                                    "description": ""
                                  },
                                  {
                                    "name": "orange",
                                    "unit": "intensity",
                                    "description": ""
                                  },
                                  {
                                    "name": "green",
                                    "unit": "intensity",
                                    "description": ""
                                  },
                                  {
                                    "name": "ultraviolet",
                                    "unit": "intensity",
                                    "description": ""
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "celsius",
                                    "description": "",
                                    "min": -10,
                                    "max": 110,
                                    "capability": 1
                                  }
                                ],
                                "commands": []
                              },
                              "3200": {
                                "id": 3200,
                                "device_class": "3100",
                                "name": "HYTELOG",
                                "vendor": "B+B Thermo-Technik GmbH",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 4800,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "humidity",
                                    "unit": "% rel.",
                                    "description": "",
                                    "min": 0,
                                    "max": 100
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "celsius",
                                    "description": "",
                                    "min": -50,
                                    "max": 90,
                                    "capability": 1
                                  }
                                ],
                                "commands": []
                              },
                              "3600": {
                                "id": 3600,
                                "device_class": "3100",
                                "name": "pH 1140",
                                "vendor": "Mettler Toledo",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 4800,
                                    "databits": 7,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim3600"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "ph",
                                    "unit": "unit",
                                    "description": "",
                                    "min": 0,
                                    "max": 14
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "celsius",
                                    "description": "",
                                    "min": 0,
                                    "max": 100,
                                    "capability": 1
                                  }
                                ],
                                "commands": []
                              },
                              "4100": {
                                "id": 4100,
                                "device_class": "25",
                                "name": "Explorer",
                                "vendor": "OHAUS",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim4100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "weight",
                                    "unit": "mg",
                                    "description": ""
                                  },
                                  {
                                    "name": "power",
                                    "unit": "boolean",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_power",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "get_weight",
                                    "label": "print"
                                  },
                                  {
                                    "title": "set_tare",
                                    "label": "tare"
                                  },
                                  {
                                    "title": "set_zero",
                                    "label": "zero"
                                  }
                                ]
                              },
                              "4101": {
                                "id": 4101,
                                "device_class": "25",
                                "name": "Discovery DV215CD",
                                "vendor": "OHAUS",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 19200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim4101"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "weight",
                                    "unit": "mg",
                                    "description": ""
                                  },
                                  {
                                    "name": "power",
                                    "unit": "boolean",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_power",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "get_weight",
                                    "label": "print"
                                  },
                                  {
                                    "title": "set_tare",
                                    "label": "tare"
                                  },
                                  {
                                    "title": "set_zero",
                                    "label": "zero"
                                  }
                                ]
                              },
                              "4200": {
                                "id": 4200,
                                "device_class": "25",
                                "name": "AB (dot matrix)",
                                "vendor": "PCE",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9F-DTE",
                                    "usb_mapping": "DE9M_nullmodem_DE9F,DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim4200"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "weight",
                                    "unit": "mg",
                                    "description": ""
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "get_weight",
                                    "label": "print"
                                  }
                                ]
                              },
                              "4300": {
                                "id": 4300,
                                "device_class": "25",
                                "name": "S/SI Summit",
                                "vendor": "Denver Instruments",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9M-DTE",
                                    "usb_mapping": "DE9F_genderchanger_DE9F,DE9M_nullmodem_DE9F,DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 1200,
                                    "databits": 7,
                                    "parity": "odd",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim4300"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "weight",
                                    "unit": "mg",
                                    "description": ""
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "get_weight",
                                    "label": "print"
                                  }
                                ]
                              },
                              "6100": {
                                "id": 6100,
                                "device_class": "24",
                                "name": "RC 900",
                                "vendor": "KNF",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "USB-Mini-B",
                                    "usb_mapping": "usb_mini_cable"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 57600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "04D8",
                                    "model_id": "00DF",
                                    "serial": "simulated Microchip_Technology_Inc._MCP2200_USB_Serial_Port_Emulator_0000",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyACMsim6100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 280
                                  },
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 200,
                                    "capability": 1
                                  },
                                  {
                                    "name": "vacuum",
                                    "unit": "mbar",
                                    "description": "",
                                    "min": 0,
                                    "max": 1200
                                  }
                                ],
                                "commands": []
                              },
                              "6200": {
                                "id": 6200,
                                "device_class": "24",
                                "name": "ROdist digital",
                                "vendor": "IKA",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 7,
                                    "parity": "even",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim6200"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 280
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 200,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "rotation_status",
                                    "unit": "status",
                                    "description": "",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "commands": [
                                      {
                                        "title": "set_rotation_status",
                                        "enum": [
                                          0,
                                          1
                                        ],
                                        "enumLabels": [
                                          "off",
                                          "on"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "8000": {
                                "id": 8000,
                                "device_class": "8",
                                "name": "Innova 42",
                                "vendor": "Eppendorf",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "DE9M-DTE",
                                    "usb_mapping": "DE9F_genderchanger_DE9F,DE9M_nullmodem_DE9F,DE9M_universal_USB"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 19200,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 340
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 340,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 1
                                  },
                                  {
                                    "name": "rotation",
                                    "unit": "rpm",
                                    "description": "",
                                    "min": 0,
                                    "max": 1700
                                  },
                                  {
                                    "name": "rotation_setpoint",
                                    "unit": "rpm",
                                    "description": "",
                                    "step": "1",
                                    "min": 0,
                                    "max": 1700,
                                    "commands": [
                                      {
                                        "title": "set_rotation_setpoint",
                                        "type": "number"
                                      }
                                    ]
                                  }
                                ],
                                "commands": []
                              },
                              "8100": {
                                "id": 8100,
                                "device_class": "5000",
                                "name": "Quantrol",
                                "vendor": "JUMO",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8100"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "temperature",
                                    "unit": "C",
                                    "description": "",
                                    "min": 0,
                                    "max": 500,
                                    "capability": 1
                                  },
                                  {
                                    "name": "temperature_setpoint",
                                    "unit": "C",
                                    "description": "",
                                    "step": 1,
                                    "min": 0,
                                    "max": 500,
                                    "commands": [
                                      {
                                        "title": "set_temperature_setpoint",
                                        "type": "number"
                                      }
                                    ],
                                    "capability": 2
                                  }
                                ],
                                "commands": []
                              },
                              "8500": {
                                "id": 8500,
                                "device_class": "4000",
                                "name": "P.I.A.2",
                                "vendor": "Protzek",
                                "driver_type": {
                                  "name": "driver-oldwrapper",
                                  "version": "0.1.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 800000,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "opTricon_GmbH_PIA2_12784901913007",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim8500"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "version",
                                    "unit": "ticks",
                                    "description": "",
                                    "min": 0,
                                    "max": 100000
                                  },
                                  {
                                    "name": "measurement",
                                    "type": "Channels::File",
                                    "unit": "json",
                                    "description": ""
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "measurement_start",
                                    "label": "measurement_start"
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/7"
                          }
                        },
                        {
                          "id": "19",
                          "type": "device_driver",
                          "attributes": {
                            "name": "pce-pa8000",
                            "version": "1.1.1",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              1000
                            ],
                            "bundle": "driver-pce-pa8000-1.1.1.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "1000": {
                                "id": 1000,
                                "device_class": "2000",
                                "name": "PA 8000",
                                "vendor": "PCE",
                                "driver_type": {
                                  "name": "driver-pce-pa8000",
                                  "version": "1.1.1"
                                },
                                "hardware": [
                                  {
                                    "receptacle": "vendor",
                                    "usb_mapping": "vendor_cable",
                                    "notes": "DIP Position 1"
                                  }
                                ],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim2000"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "frequency",
                                    "unit": "Hz",
                                    "description": "",
                                    "min": 45,
                                    "max": 65
                                  },
                                  {
                                    "name": "v1",
                                    "unit": "V",
                                    "description": "Alternating current voltammetry.",
                                    "min": 0,
                                    "max": 600
                                  },
                                  {
                                    "name": "i1",
                                    "unit": "A",
                                    "description": "Alternating current ampere.",
                                    "min": 0,
                                    "max": 1200
                                  }
                                ],
                                "commands": []
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/19"
                          }
                        },
                        {
                          "id": "20",
                          "type": "device_driver",
                          "attributes": {
                            "name": "serialconsole",
                            "version": "2.2.0",
                            "releases": [
                              "v72-darwin-x64",
                              "v72-linux-armv7",
                              "v72-linux-x64",
                              "v72-win32-x64"
                            ],
                            "verified": true,
                            "device_types": [
                              999999
                            ],
                            "bundle": "driver-serialconsole-2.2.0.dpak",
                            "schema": "parameters_schema.json",
                            "device_type_definitions": {
                              "999999": {
                                "id": 999999,
                                "device_class": "1050",
                                "name": "Serial Console",
                                "vendor": "labforward GmbH",
                                "driver_type": {
                                  "name": "driver-serialconsole",
                                  "version": "2.2.0"
                                },
                                "hardware": [],
                                "parameters": {
                                  "usb_serial": {
                                    "baudrate": 9600,
                                    "databits": 8,
                                    "parity": "none",
                                    "stopbits": 1,
                                    "rtscts": false,
                                    "xonxoff": false
                                  },
                                  "matcher": {
                                    "type": "none",
                                    "delimiter_line": "CRLF"
                                  }
                                },
                                "port_simulation": {
                                  "class": "usb_serial",
                                  "usb_device": {
                                    "vendor_id": "0403",
                                    "model_id": "6001",
                                    "serial": "simulated USB2serial",
                                    "type": "/dev/tty",
                                    "dev": "/dev/ttyUSBsim999999"
                                  }
                                },
                                "channels": [
                                  {
                                    "name": "log",
                                    "type": "Channels::Rawdata",
                                    "description": "Log"
                                  }
                                ],
                                "commands": [
                                  {
                                    "title": "SendByteArrayDecimal",
                                    "description": "Send Byte Array Decimal",
                                    "label": "Send Byte Array Decimal",
                                    "parametersSchema": {
                                      "type": "object",
                                      "required": [
                                        "ByteArray"
                                      ],
                                      "properties": {
                                        "ByteArray": {
                                          "title": "ByteArray",
                                          "type": "string",
                                          "description": "Decimal values separated by ',' or space"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "title": "SendByteArrayHexadecimal",
                                    "description": "Send Byte Array Hexadecimal",
                                    "label": "Send Byte Array Hexadecimal",
                                    "parametersSchema": {
                                      "type": "object",
                                      "required": [
                                        "ByteArray"
                                      ],
                                      "properties": {
                                        "ByteArray": {
                                          "title": "ByteArray",
                                          "type": "string",
                                          "description": "Hexadecimal values separated by ',' or space"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "title": "SendString",
                                    "description": "Send String",
                                    "label": "Send String",
                                    "parametersSchema": {
                                      "type": "object",
                                      "required": [
                                        "String",
                                        "Suffix"
                                      ],
                                      "properties": {
                                        "String": {
                                          "title": "String",
                                          "type": "string",
                                          "description": "String"
                                        },
                                        "Suffix": {
                                          "title": "Suffix",
                                          "type": "number",
                                          "anyOf": [
                                            {
                                              "type": "number",
                                              "title": "None",
                                              "enum": [
                                                0
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Regular linebreak CRLF",
                                              "enum": [
                                                1
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only CR",
                                              "enum": [
                                                2
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only LF",
                                              "enum": [
                                                3
                                              ]
                                            }
                                          ],
                                          "description": "Suffix for string."
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "title": "SendStringAndWaitForResponseLine",
                                    "description": "Send string and wait for response line.",
                                    "label": "Send string (wait for response line)",
                                    "parametersSchema": {
                                      "type": "object",
                                      "required": [
                                        "String",
                                        "Timeout",
                                        "Suffix",
                                        "Matcher"
                                      ],
                                      "properties": {
                                        "String": {
                                          "title": "String",
                                          "type": "string",
                                          "description": "String"
                                        },
                                        "Timeout": {
                                          "title": "Timeout",
                                          "type": "number",
                                          "description": "ms"
                                        },
                                        "Suffix": {
                                          "title": "Suffix",
                                          "type": "number",
                                          "anyOf": [
                                            {
                                              "type": "number",
                                              "title": "None",
                                              "enum": [
                                                0
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Regular linebreak CRLF",
                                              "enum": [
                                                1
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only CR",
                                              "enum": [
                                                2
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only LF",
                                              "enum": [
                                                3
                                              ]
                                            }
                                          ],
                                          "description": "Suffix for string."
                                        },
                                        "Matcher": {
                                          "title": "Matcher",
                                          "type": "number",
                                          "anyOf": [
                                            {
                                              "type": "number",
                                              "title": "Regular linebreak (CRLF)",
                                              "enum": [
                                                0
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only CR",
                                              "enum": [
                                                1
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only LF",
                                              "enum": [
                                                2
                                              ]
                                            }
                                          ],
                                          "description": "Line matcher for response."
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "title": "SendStringAndWaitForResponseLength",
                                    "description": "Send string and wait for response with defined length.",
                                    "label": "Send string (wait for response with length)",
                                    "parametersSchema": {
                                      "type": "object",
                                      "required": [
                                        "String",
                                        "Timeout",
                                        "Suffix",
                                        "Length"
                                      ],
                                      "properties": {
                                        "String": {
                                          "title": "String",
                                          "type": "string",
                                          "description": "String"
                                        },
                                        "Timeout": {
                                          "title": "Timeout",
                                          "type": "number",
                                          "description": "ms"
                                        },
                                        "Suffix": {
                                          "title": "Suffix",
                                          "type": "number",
                                          "anyOf": [
                                            {
                                              "type": "number",
                                              "title": "None",
                                              "enum": [
                                                0
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Regular linebreak CRLF",
                                              "enum": [
                                                1
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only CR",
                                              "enum": [
                                                2
                                              ]
                                            },
                                            {
                                              "type": "number",
                                              "title": "Only LF",
                                              "enum": [
                                                3
                                              ]
                                            }
                                          ],
                                          "description": "Suffix for string."
                                        },
                                        "Length": {
                                          "title": "Length",
                                          "type": "number",
                                          "description": "Number of bytes."
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_drivers/20"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 2,
                        "recordsTotal": 25,
                        "recordsOrder": [
                          10,
                          1,
                          9,
                          11,
                          25,
                          2,
                          12,
                          3,
                          13,
                          14,
                          4,
                          15,
                          5,
                          16,
                          17,
                          18,
                          6,
                          7,
                          19,
                          20
                        ],
                        "recordsSize": 20
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong device_drivers attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeviceDriver"
              }
            }
          }
        },
        "description": "Create a DeviceDriver.",
        "operationId": "createDeviceDriver",
        "summary": "Create Device Driver",
        "tags": [
          "device_drivers"
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "26",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.2",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "device_types": [],
                          "bundle": "driver-astmserial-0.0.2.zip",
                          "schema": "parameters_schema.json",
                          "device_type_definitions": {}
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/device_drivers/26"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/device_drivers/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceDriver"
              }
            }
          }
        },
        "description": "Update a DeviceDriver.",
        "operationId": "updateDeviceDriver",
        "summary": "Update Device Driver",
        "tags": [
          "device_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a DeviceDriver to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "25",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "device_types": [],
                          "bundle": "driver-astmserial-0.0.1.zip",
                          "schema": "parameters_schema.json",
                          "device_type_definitions": {}
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/device_drivers/25"
                        }
                      }
                    }
                  },
                  "removing a file": {
                    "summary": "removing a file",
                    "value": {
                      "data": {
                        "id": "25",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [],
                          "verified": false,
                          "device_types": [],
                          "schema": "parameters_schema.json",
                          "device_type_definitions": {}
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/device_drivers/25"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Get a single DeviceDriver by its id.",
        "operationId": "getDeviceDriver",
        "summary": "Get Device Driver",
        "tags": [
          "device_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of the DeviceDriver to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of DeviceDriver attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "25",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "device_types": [],
                          "bundle": "driver-astmserial-0.0.1.zip",
                          "schema": "parameters_schema.json",
                          "device_type_definitions": {}
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/device_drivers/25"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for device_drivers given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for device_drivers given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a DeviceDriver.",
        "operationId": "deleteDeviceDriver",
        "summary": "Delete Device Driver",
        "tags": [
          "device_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a DeviceDriver to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Delete Restriction Error": {
                    "summary": "Delete Restriction Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent devices",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/device_types": {
      "get": {
        "description": "Get a list of existing Device Types.",
        "operationId": "getDeviceTypes",
        "summary": "Get Device Types",
        "tags": [
          "device_types"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Types attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeviceTypesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypesResponse"
                },
                "examples": {
                  "List of Device Types": {
                    "summary": "List of Device Types",
                    "value": {
                      "data": [
                        {
                          "id": "9050",
                          "type": "device_type",
                          "attributes": {
                            "name": "MIXdrive",
                            "vendor": "2mag",
                            "device_class": "20"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9050"
                          }
                        },
                        {
                          "id": "9051",
                          "type": "device_type",
                          "attributes": {
                            "name": "Stirring Hotplate 6",
                            "vendor": "2mag",
                            "device_class": "20"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9051"
                          }
                        },
                        {
                          "id": "9980",
                          "type": "device_type",
                          "attributes": {
                            "name": "USB Barcode Scanner",
                            "vendor": "Aplic",
                            "device_class": "31"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9980"
                          }
                        },
                        {
                          "id": "3200",
                          "type": "device_type",
                          "attributes": {
                            "name": "HYTELOG",
                            "vendor": "B+B Thermo-Technik GmbH",
                            "device_class": "3100"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/3200"
                          }
                        },
                        {
                          "id": "4300",
                          "type": "device_type",
                          "attributes": {
                            "name": "S/SI Summit",
                            "vendor": "Denver Instruments",
                            "device_class": "25"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/4300"
                          }
                        },
                        {
                          "id": "9700",
                          "type": "device_type",
                          "attributes": {
                            "name": "Centrifuge 5425",
                            "vendor": "Eppendorf",
                            "device_class": "1000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9700"
                          }
                        },
                        {
                          "id": "8000",
                          "type": "device_type",
                          "attributes": {
                            "name": "Innova 42",
                            "vendor": "Eppendorf",
                            "device_class": "8"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/8000"
                          }
                        },
                        {
                          "id": "9999911",
                          "type": "device_type",
                          "attributes": {
                            "name": "Kevin",
                            "vendor": "Fraunhofer IPA",
                            "device_class": "1000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9999911"
                          }
                        },
                        {
                          "id": "9999912",
                          "type": "device_type",
                          "attributes": {
                            "name": "Labeler",
                            "vendor": "HTI",
                            "device_class": "1000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9999912"
                          }
                        },
                        {
                          "id": "6000",
                          "type": "device_type",
                          "attributes": {
                            "name": "Hei-VAP",
                            "vendor": "Heidolph",
                            "device_class": "24"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/6000"
                          }
                        },
                        {
                          "id": "9979",
                          "type": "device_type",
                          "attributes": {
                            "name": "Hyperion 1300g",
                            "vendor": "Honeywell",
                            "device_class": "1000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9979"
                          }
                        },
                        {
                          "id": "9000",
                          "type": "device_type",
                          "attributes": {
                            "name": "RET control",
                            "vendor": "IKA",
                            "device_class": "20"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/9000"
                          }
                        },
                        {
                          "id": "6200",
                          "type": "device_type",
                          "attributes": {
                            "name": "ROdist digital",
                            "vendor": "IKA",
                            "device_class": "24"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/6200"
                          }
                        },
                        {
                          "id": "3100",
                          "type": "device_type",
                          "attributes": {
                            "name": "Vision",
                            "vendor": "ITA Instruments",
                            "device_class": "3100"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/3100"
                          }
                        },
                        {
                          "id": "8100",
                          "type": "device_type",
                          "attributes": {
                            "name": "Quantrol",
                            "vendor": "JUMO",
                            "device_class": "5000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/8100"
                          }
                        },
                        {
                          "id": "6100",
                          "type": "device_type",
                          "attributes": {
                            "name": "RC 900",
                            "vendor": "KNF",
                            "device_class": "24"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/6100"
                          }
                        },
                        {
                          "id": "2200",
                          "type": "device_type",
                          "attributes": {
                            "name": "SC 920",
                            "vendor": "KNF",
                            "device_class": "27"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/2200"
                          }
                        },
                        {
                          "id": "5000",
                          "type": "device_type",
                          "attributes": {
                            "name": "SIMDOS 02",
                            "vendor": "KNF",
                            "device_class": "26"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/5000"
                          }
                        },
                        {
                          "id": "4000",
                          "type": "device_type",
                          "attributes": {
                            "name": "ABJ-NM 谷歌翻译",
                            "vendor": "Kern",
                            "device_class": "25"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/4000"
                          }
                        },
                        {
                          "id": "8300",
                          "type": "device_type",
                          "attributes": {
                            "name": "MC",
                            "vendor": "Lauda",
                            "device_class": "5000"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/device_types/8300"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 3,
                        "recordsTotal": 49,
                        "recordsOrder": [
                          9050,
                          9051,
                          9980,
                          3200,
                          4300,
                          9700,
                          8000,
                          9999911,
                          9999912,
                          6000,
                          9979,
                          9000,
                          6200,
                          3100,
                          8100,
                          6100,
                          2200,
                          5000,
                          4000,
                          8300
                        ],
                        "recordsSize": 20
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/device_types/{id}": {
      "get": {
        "description": "Get a single Device Type by its id.",
        "operationId": "getDeviceType",
        "summary": "Get Device Type",
        "tags": [
          "device_types"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Device Type to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Type attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypeResponse"
                },
                "examples": {
                  "Device Type": {
                    "summary": "Device Type",
                    "value": {
                      "data": {
                        "id": "9050",
                        "type": "device_type",
                        "attributes": {
                          "name": "MIXdrive",
                          "vendor": "2mag",
                          "device_class": "20"
                        },
                        "relationships": {
                          "devices": {
                            "data": [
                              {
                                "id": "1",
                                "type": "device"
                              },
                              {
                                "id": "2",
                                "type": "device"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/device_types/9050"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "description": "Get a list of existing Devices.",
        "operationId": "getDevices",
        "summary": "Get Devices",
        "tags": [
          "devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Devices attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DevicesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `admin`, `channels`, `connector`, `users`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResponse"
                },
                "examples": {
                  "List of Devices": {
                    "summary": "List of Devices",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "device",
                          "attributes": {
                            "display_name": "Aerodynamic Marble Keyboard",
                            "name": "Aerodynamic Marble Keyboard",
                            "status": "online",
                            "slug": "aerodynamic-marble-keyboard",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "vendor": "Mettler Toledo",
                            "device_class": "25",
                            "created_at": "2023-06-26T09:54:25.343Z",
                            "updated_at": "2023-06-26T09:54:25.343Z",
                            "hidden_at": null,
                            "device_type": {
                              "id": 4401,
                              "device_class": "25",
                              "name": "AX26",
                              "vendor": "Mettler Toledo",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2023-06-26T09:54:18.974Z",
                              "updated_at": "2023-06-26T09:54:18.974Z",
                              "driver_type": {
                                "name": "driver-sicsserial",
                                "version": "2.2.1"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "commands": [
                              {
                                "label": "print",
                                "title": "get_weight"
                              },
                              {
                                "label": "zero",
                                "title": "set_zero"
                              },
                              {
                                "label": "tare",
                                "title": "set_tare"
                              }
                            ],
                            "custom_attributes": [],
                            "slugs": [
                              "aerodynamic-marble-keyboard"
                            ],
                            "status_channel_id": 4,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "4401",
                                "type": "device_type"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "21",
                                "type": "driver"
                              }
                            },
                            "locking_measurement": {
                              "data": null
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "channel"
                                },
                                {
                                  "id": "2",
                                  "type": "channel"
                                },
                                {
                                  "id": "3",
                                  "type": "channel"
                                },
                                {
                                  "id": "4",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/devices/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "device",
                          "attributes": {
                            "display_name": "Gorgeous Aluminum Chair",
                            "name": "Gorgeous Aluminum Chair",
                            "status": "offline",
                            "slug": "gorgeous-aluminum-chair",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "vendor": "Mettler Toledo",
                            "device_class": "25",
                            "created_at": "2023-06-26T09:54:25.858Z",
                            "updated_at": "2023-06-26T09:54:25.858Z",
                            "hidden_at": null,
                            "device_type": {
                              "id": 4401,
                              "device_class": "25",
                              "name": "AX26",
                              "vendor": "Mettler Toledo",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2023-06-26T09:54:18.974Z",
                              "updated_at": "2023-06-26T09:54:18.974Z",
                              "driver_type": {
                                "name": "driver-sicsserial",
                                "version": "2.2.1"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "commands": [
                              {
                                "label": "print",
                                "title": "get_weight"
                              },
                              {
                                "label": "zero",
                                "title": "set_zero"
                              },
                              {
                                "label": "tare",
                                "title": "set_tare"
                              }
                            ],
                            "custom_attributes": [],
                            "slugs": [
                              "gorgeous-aluminum-chair"
                            ],
                            "status_channel_id": 8,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "2",
                                "type": "connector"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "4401",
                                "type": "device_type"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "21",
                                "type": "driver"
                              }
                            },
                            "locking_measurement": {
                              "data": null
                            },
                            "view": {
                              "data": {
                                "id": "2",
                                "type": "view"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "5",
                                  "type": "channel"
                                },
                                {
                                  "id": "6",
                                  "type": "channel"
                                },
                                {
                                  "id": "7",
                                  "type": "channel"
                                },
                                {
                                  "id": "8",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/devices/2"
                          }
                        },
                        {
                          "id": "4",
                          "type": "device",
                          "attributes": {
                            "display_name": "Gorgeous Copper Bench",
                            "name": "Gorgeous Copper Bench",
                            "status": "offline",
                            "slug": "gorgeous-copper-bench",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "vendor": "KNF",
                            "device_class": "26",
                            "created_at": "2023-06-26T09:54:26.009Z",
                            "updated_at": "2023-06-26T09:54:26.009Z",
                            "hidden_at": null,
                            "device_type": {
                              "id": 5000,
                              "device_class": "26",
                              "name": "SIMDOS 02",
                              "vendor": "KNF",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2023-06-26T09:54:18.981Z",
                              "updated_at": "2023-06-26T09:54:18.981Z",
                              "driver_type": {
                                "name": "driver-knf-simdos02",
                                "version": "0.0.2"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "commands": [
                              {
                                "type": "number",
                                "title": "set_flowrate_setpoint"
                              },
                              {
                                "enum": [
                                  0,
                                  1
                                ],
                                "title": "set_pump_engine",
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "custom_attributes": [],
                            "slugs": [
                              "gorgeous-copper-bench"
                            ],
                            "status_channel_id": 16,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "3",
                                "type": "connector"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "5000",
                                "type": "device_type"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "17",
                                "type": "driver"
                              }
                            },
                            "locking_measurement": {
                              "data": null
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "13",
                                  "type": "channel"
                                },
                                {
                                  "id": "14",
                                  "type": "channel"
                                },
                                {
                                  "id": "15",
                                  "type": "channel"
                                },
                                {
                                  "id": "16",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/devices/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          2,
                          4
                        ],
                        "recordsSize": 3
                      }
                    }
                  },
                  "List of found Devices": {
                    "summary": "List of found Devices",
                    "value": {
                      "data": [
                        {
                          "id": "4",
                          "type": "device",
                          "attributes": {
                            "display_name": "Gorgeous Copper Bench",
                            "name": "Gorgeous Copper Bench",
                            "status": "offline",
                            "slug": "gorgeous-copper-bench",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "vendor": "KNF",
                            "device_class": "26",
                            "created_at": "2023-06-26T09:54:27.652Z",
                            "updated_at": "2023-06-26T09:54:27.652Z",
                            "hidden_at": null,
                            "device_type": {
                              "id": 5000,
                              "device_class": "26",
                              "name": "SIMDOS 02",
                              "vendor": "KNF",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2023-06-26T09:54:18.981Z",
                              "updated_at": "2023-06-26T09:54:18.981Z",
                              "driver_type": {
                                "name": "driver-knf-simdos02",
                                "version": "0.0.2"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "commands": [
                              {
                                "type": "number",
                                "title": "set_flowrate_setpoint"
                              },
                              {
                                "enum": [
                                  0,
                                  1
                                ],
                                "title": "set_pump_engine",
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "custom_attributes": [],
                            "slugs": [
                              "gorgeous-copper-bench"
                            ],
                            "status_channel_id": 16,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "3",
                                "type": "connector"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "5000",
                                "type": "device_type"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "17",
                                "type": "driver"
                              }
                            },
                            "locking_measurement": {
                              "data": null
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "13",
                                  "type": "channel"
                                },
                                {
                                  "id": "14",
                                  "type": "channel"
                                },
                                {
                                  "id": "15",
                                  "type": "channel"
                                },
                                {
                                  "id": "16",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/devices/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          4
                        ],
                        "recordsSize": 1
                      }
                    }
                  },
                  "Empty response": {
                    "summary": "Empty response",
                    "value": {
                      "data": [],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 0,
                        "recordsTotal": 0,
                        "recordsOrder": [],
                        "recordsSize": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "description": "Get a single Device by its id.",
        "operationId": "getDevice",
        "summary": "Get Device",
        "tags": [
          "devices"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Device to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resources to include. Allowed values are: `channels`, `users`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                },
                "examples": {
                  "Device": {
                    "summary": "Device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "device",
                        "attributes": {
                          "display_name": "Aerodynamic Marble Keyboard",
                          "name": "Aerodynamic Marble Keyboard",
                          "status": "online",
                          "slug": "aerodynamic-marble-keyboard",
                          "driver_parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "vendor": "Mettler Toledo",
                          "device_class": "25",
                          "created_at": "2023-06-26T09:54:31.239Z",
                          "updated_at": "2023-06-26T09:54:31.239Z",
                          "device_type": {
                            "id": 4401,
                            "device_class": "25",
                            "name": "AX26",
                            "vendor": "Mettler Toledo",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "created_at": "2023-06-26T09:54:18.974Z",
                            "updated_at": "2023-06-26T09:54:18.974Z",
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "2.2.1"
                            },
                            "capabilities": []
                          },
                          "commands": [
                            {
                              "label": "print",
                              "title": "get_weight"
                            },
                            {
                              "label": "zero",
                              "title": "set_zero"
                            },
                            {
                              "label": "tare",
                              "title": "set_tare"
                            }
                          ],
                          "custom_attributes": [],
                          "slugs": [
                            "aerodynamic-marble-keyboard"
                          ],
                          "status_channel_id": 4,
                          "is_driver_compatible": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          },
                          "device_type": {
                            "data": {
                              "id": "4401",
                              "type": "device_type"
                            }
                          },
                          "driver": {
                            "data": {
                              "id": "21",
                              "type": "driver"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "1",
                                "type": "channel"
                              },
                              {
                                "id": "2",
                                "type": "channel"
                              },
                              {
                                "id": "3",
                                "type": "channel"
                              },
                              {
                                "id": "4",
                                "type": "channel"
                              }
                            ]
                          },
                          "locking_measurement": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/devices/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Device.",
        "operationId": "updateDevice",
        "summary": "Update Device",
        "tags": [
          "devices"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Device.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDevice"
              },
              "example": {
                "data": {
                  "type": "device",
                  "attributes": {
                    "name": "Device's name"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                },
                "examples": {
                  "Device": {
                    "summary": "Device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "device",
                        "attributes": {
                          "display_name": "Device's name",
                          "name": "Device's name",
                          "status": "online",
                          "slug": "device-s-name",
                          "driver_parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "vendor": "Mettler Toledo",
                          "device_class": "25",
                          "created_at": "2023-06-26T09:54:35.997Z",
                          "updated_at": "2023-06-26T09:54:36.667Z",
                          "device_type": {
                            "id": 4401,
                            "device_class": "25",
                            "name": "AX26",
                            "vendor": "Mettler Toledo",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "created_at": "2023-06-26T09:54:18.974Z",
                            "updated_at": "2023-06-26T09:54:18.974Z",
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "2.2.1"
                            },
                            "capabilities": []
                          },
                          "commands": [
                            {
                              "label": "print",
                              "title": "get_weight"
                            },
                            {
                              "label": "zero",
                              "title": "set_zero"
                            },
                            {
                              "label": "tare",
                              "title": "set_tare"
                            }
                          ],
                          "custom_attributes": [],
                          "slugs": [
                            "device-s-name",
                            "aerodynamic-marble-keyboard"
                          ],
                          "status_channel_id": 4,
                          "is_driver_compatible": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          },
                          "device_type": {
                            "data": {
                              "id": "4401",
                              "type": "device_type"
                            }
                          },
                          "driver": {
                            "data": {
                              "id": "21",
                              "type": "driver"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "1",
                                "type": "channel"
                              },
                              {
                                "id": "2",
                                "type": "channel"
                              },
                              {
                                "id": "3",
                                "type": "channel"
                              },
                              {
                                "id": "4",
                                "type": "channel"
                              }
                            ]
                          },
                          "locking_measurement": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/devices/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Device.",
        "operationId": "deleteDevice",
        "summary": "Delete Device",
        "tags": [
          "devices"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{id}/command": {
      "put": {
        "description": "Send a command to a device.",
        "operationId": "commandDevice",
        "summary": "Command Device",
        "tags": [
          "devices"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the Device that should execute the command."
          },
          {
            "name": "context_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the Context from which the command is executed."
          },
          {
            "name": "context_type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The Type of the Context from which the command is executed."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Command a Device.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandDevice"
              },
              "example": {
                "data": {
                  "command": "get_weight"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                },
                "examples": {
                  "Command Execution": {
                    "summary": "Command Execution",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "command_execution",
                        "attributes": {
                          "id": 1,
                          "uuid": "947ed00a-60e5-4873-a283-a24940b33615",
                          "parameters": {
                            "command": "get_weight"
                          },
                          "device_id": 1,
                          "user_id": 1,
                          "status": "sent",
                          "created_at": "2023-06-26T09:54:42.711Z",
                          "updated_at": "2023-06-26T09:54:42.711Z"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "context": {
                            "data": null
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/command_executions/1"
                        }
                      }
                    }
                  },
                  "executes with correct context": {
                    "summary": "executes with correct context",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "command_execution",
                        "attributes": {
                          "id": 1,
                          "uuid": "a0e4b707-bd6c-46e1-9e93-13ae88fa653f",
                          "parameters": {
                            "command": "get_weight"
                          },
                          "device_id": 1,
                          "user_id": 1,
                          "status": "sent",
                          "created_at": "2023-06-26T09:54:43.736Z",
                          "updated_at": "2023-06-26T09:54:43.736Z"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "context": {
                            "data": null
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/command_executions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Invalid Command Error": {
                    "summary": "Invalid Command Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Device 1 does not have a command 'invalid_command'",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Command Execution": {
                    "summary": "Command Execution",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Device Not Ready Error": {
                    "summary": "Device Not Ready Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Device is not ready. Current status: offline.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Locked Device Error": {
                    "summary": "Locked Device Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Device is currently locked by Measurement",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "description": "Get a list of existing Events.",
        "operationId": "getEvents",
        "summary": "Get Events",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Event attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `versions`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                },
                "examples": {
                  "List of Events": {
                    "summary": "List of Events",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "event",
                          "attributes": {
                            "key": "collection.create",
                            "description": "Collection Durable Marble Bag was added.",
                            "context": {
                              "user": {
                                "id": 1,
                                "name": "Terry-762-87404",
                                "type": "User"
                              },
                              "resource": {
                                "id": 3,
                                "name": "Durable Marble Bag",
                                "type": "Collection"
                              }
                            },
                            "logs": [],
                            "tags": [
                              "Collection-3"
                            ],
                            "created_at": "2023-04-21T13:09:57.488Z",
                            "updated_at": "2023-04-21T13:09:57.554Z",
                            "versions": {
                              "data": [
                                {
                                  "id": "186",
                                  "type": "version",
                                  "attributes": {
                                    "key": "collection_resource.create",
                                    "description": "Durable Marble Bag added to Collections.",
                                    "context": {
                                      "resource": {
                                        "id": 2,
                                        "name": "Durable Marble Bag",
                                        "type": "CollectionResource"
                                      },
                                      "collection": {
                                        "id": 1,
                                        "name": "Collections",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {
                                      "id": [
                                        {
                                          "description": [
                                            "`id` changed"
                                          ],
                                          "from": null,
                                          "to": 2
                                        }
                                      ],
                                      "resource_id": [
                                        {
                                          "description": [
                                            "`resource_id` changed"
                                          ],
                                          "from": null,
                                          "to": 3
                                        }
                                      ],
                                      "collection_id": [
                                        {
                                          "description": [
                                            "`collection_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ],
                                      "resource_type": [
                                        {
                                          "description": [
                                            "`resource_type` changed"
                                          ],
                                          "from": null,
                                          "to": "Collection"
                                        }
                                      ],
                                      "organisation_id": [
                                        {
                                          "description": [
                                            "`organisation_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ],
                                      "resource_search_doc_id": [
                                        {
                                          "description": [
                                            "`resource_search_doc_id` changed"
                                          ],
                                          "from": null,
                                          "to": 4
                                        }
                                      ]
                                    },
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.502Z",
                                    "item_type": "CollectionResource",
                                    "item_id": 2,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/186"
                                  }
                                },
                                {
                                  "id": "187",
                                  "type": "version",
                                  "attributes": {
                                    "key": "collection.create",
                                    "description": "Collection Durable Marble Bag added.",
                                    "context": {
                                      "resource": {
                                        "id": 3,
                                        "name": "Durable Marble Bag",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {
                                      "id": [
                                        {
                                          "description": [
                                            "`id` changed"
                                          ],
                                          "from": null,
                                          "to": 3
                                        }
                                      ],
                                      "name": [
                                        {
                                          "description": [
                                            "`name` changed"
                                          ],
                                          "from": null,
                                          "to": "Durable Marble Bag"
                                        }
                                      ],
                                      "organisation_id": [
                                        {
                                          "description": [
                                            "`organisation_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ]
                                    },
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.495Z",
                                    "item_type": "Collection",
                                    "item_id": 3,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/187"
                                  }
                                },
                                {
                                  "id": "188",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Durable Marble Bag was assigned to Group Resource Administrator.",
                                    "context": {
                                      "resource": {
                                        "id": 3,
                                        "name": "Resource Administrator",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 3,
                                        "name": "Durable Marble Bag",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.518Z",
                                    "item_type": "Group",
                                    "item_id": 3,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/188"
                                  }
                                },
                                {
                                  "id": "189",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Durable Marble Bag was assigned to Group Resource Observer.",
                                    "context": {
                                      "resource": {
                                        "id": 4,
                                        "name": "Resource Observer",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 3,
                                        "name": "Durable Marble Bag",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.526Z",
                                    "item_type": "Group",
                                    "item_id": 4,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/189"
                                  }
                                },
                                {
                                  "id": "190",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Durable Marble Bag was assigned to Group Resource Manager.",
                                    "context": {
                                      "resource": {
                                        "id": 5,
                                        "name": "Resource Manager",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 3,
                                        "name": "Durable Marble Bag",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.543Z",
                                    "item_type": "Group",
                                    "item_id": 5,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/190"
                                  }
                                },
                                {
                                  "id": "191",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Durable Marble Bag was assigned to Group Resource Collaborator.",
                                    "context": {
                                      "resource": {
                                        "id": 6,
                                        "name": "Resource Collaborator",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 3,
                                        "name": "Durable Marble Bag",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.551Z",
                                    "item_type": "Group",
                                    "item_id": 6,
                                    "event_id": 1
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/191"
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "event": {
                              "data": null
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "versions": {
                              "data": [
                                {
                                  "id": "186",
                                  "type": "version"
                                },
                                {
                                  "id": "187",
                                  "type": "version"
                                },
                                {
                                  "id": "188",
                                  "type": "version"
                                },
                                {
                                  "id": "189",
                                  "type": "version"
                                },
                                {
                                  "id": "190",
                                  "type": "version"
                                },
                                {
                                  "id": "191",
                                  "type": "version"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "2",
                          "type": "event",
                          "attributes": {
                            "key": "collection.create",
                            "description": "Collection Mediocre Copper Plate was added.",
                            "context": {
                              "user": {
                                "id": 1,
                                "name": "Terry-762-87404",
                                "type": "User"
                              },
                              "resource": {
                                "id": 4,
                                "name": "Mediocre Copper Plate",
                                "type": "Collection"
                              }
                            },
                            "logs": [],
                            "tags": [
                              "Collection-4"
                            ],
                            "created_at": "2023-04-21T13:09:57.560Z",
                            "updated_at": "2023-04-21T13:09:57.617Z",
                            "versions": {
                              "data": [
                                {
                                  "id": "192",
                                  "type": "version",
                                  "attributes": {
                                    "key": "collection_resource.create",
                                    "description": "Mediocre Copper Plate added to Collections.",
                                    "context": {
                                      "resource": {
                                        "id": 3,
                                        "name": "Mediocre Copper Plate",
                                        "type": "CollectionResource"
                                      },
                                      "collection": {
                                        "id": 1,
                                        "name": "Collections",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {
                                      "id": [
                                        {
                                          "description": [
                                            "`id` changed"
                                          ],
                                          "from": null,
                                          "to": 3
                                        }
                                      ],
                                      "resource_id": [
                                        {
                                          "description": [
                                            "`resource_id` changed"
                                          ],
                                          "from": null,
                                          "to": 4
                                        }
                                      ],
                                      "collection_id": [
                                        {
                                          "description": [
                                            "`collection_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ],
                                      "resource_type": [
                                        {
                                          "description": [
                                            "`resource_type` changed"
                                          ],
                                          "from": null,
                                          "to": "Collection"
                                        }
                                      ],
                                      "organisation_id": [
                                        {
                                          "description": [
                                            "`organisation_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ],
                                      "resource_search_doc_id": [
                                        {
                                          "description": [
                                            "`resource_search_doc_id` changed"
                                          ],
                                          "from": null,
                                          "to": 5
                                        }
                                      ]
                                    },
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.574Z",
                                    "item_type": "CollectionResource",
                                    "item_id": 3,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/192"
                                  }
                                },
                                {
                                  "id": "193",
                                  "type": "version",
                                  "attributes": {
                                    "key": "collection.create",
                                    "description": "Collection Mediocre Copper Plate added.",
                                    "context": {
                                      "resource": {
                                        "id": 4,
                                        "name": "Mediocre Copper Plate",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {
                                      "id": [
                                        {
                                          "description": [
                                            "`id` changed"
                                          ],
                                          "from": null,
                                          "to": 4
                                        }
                                      ],
                                      "name": [
                                        {
                                          "description": [
                                            "`name` changed"
                                          ],
                                          "from": null,
                                          "to": "Mediocre Copper Plate"
                                        }
                                      ],
                                      "organisation_id": [
                                        {
                                          "description": [
                                            "`organisation_id` changed"
                                          ],
                                          "from": null,
                                          "to": 1
                                        }
                                      ]
                                    },
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.567Z",
                                    "item_type": "Collection",
                                    "item_id": 4,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/193"
                                  }
                                },
                                {
                                  "id": "194",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Mediocre Copper Plate was assigned to Group Resource Administrator.",
                                    "context": {
                                      "resource": {
                                        "id": 3,
                                        "name": "Resource Administrator",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 4,
                                        "name": "Mediocre Copper Plate",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.589Z",
                                    "item_type": "Group",
                                    "item_id": 3,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/194"
                                  }
                                },
                                {
                                  "id": "195",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Mediocre Copper Plate was assigned to Group Resource Observer.",
                                    "context": {
                                      "resource": {
                                        "id": 4,
                                        "name": "Resource Observer",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 4,
                                        "name": "Mediocre Copper Plate",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.598Z",
                                    "item_type": "Group",
                                    "item_id": 4,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/195"
                                  }
                                },
                                {
                                  "id": "196",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Mediocre Copper Plate was assigned to Group Resource Manager.",
                                    "context": {
                                      "resource": {
                                        "id": 5,
                                        "name": "Resource Manager",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 4,
                                        "name": "Mediocre Copper Plate",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.606Z",
                                    "item_type": "Group",
                                    "item_id": 5,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/196"
                                  }
                                },
                                {
                                  "id": "197",
                                  "type": "version",
                                  "attributes": {
                                    "key": "group.assign_collection",
                                    "description": "Collection Mediocre Copper Plate was assigned to Group Resource Collaborator.",
                                    "context": {
                                      "resource": {
                                        "id": 6,
                                        "name": "Resource Collaborator",
                                        "type": "Group"
                                      },
                                      "group_collection": {
                                        "id": 4,
                                        "name": "Mediocre Copper Plate",
                                        "type": "Collection"
                                      }
                                    },
                                    "changes": {},
                                    "change_reason": null,
                                    "created_at": "2023-04-21T13:09:57.614Z",
                                    "item_type": "Group",
                                    "item_id": 6,
                                    "event_id": 2
                                  },
                                  "links": {
                                    "self": "https://{host}/api/v2/laboperator/versions/197"
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "event": {
                              "data": null
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "versions": {
                              "data": [
                                {
                                  "id": "192",
                                  "type": "version"
                                },
                                {
                                  "id": "193",
                                  "type": "version"
                                },
                                {
                                  "id": "194",
                                  "type": "version"
                                },
                                {
                                  "id": "195",
                                  "type": "version"
                                },
                                {
                                  "id": "196",
                                  "type": "version"
                                },
                                {
                                  "id": "197",
                                  "type": "version"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong events attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for events given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for events given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/export": {
      "post": {
        "responses": {
          "200": {
            "description": "Export created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                },
                "examples": {
                  "Export list of Events": {
                    "summary": "Export list of Events",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "export",
                        "attributes": {
                          "secure_token": "ee74df42-9f66-4bf6-9676-d8c2a5aaa11c",
                          "status": "processing",
                          "created_at": "2023-04-21T13:10:01.345Z",
                          "updated_at": "2023-04-21T13:10:01.345Z",
                          "custom_attributes": [],
                          "display_name": "ee74df42"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/exports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong events attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get an export with a list of existing Events.",
        "operationId": "exportEvent",
        "summary": "Export Event",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Event attributes to be included in the response."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventsFilter"
            }
          },
          {
            "name": "formatted_filter",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Formatted filter to be displayed in the export"
          },
          {
            "name": "collection_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Target Collection where the Export will be added to"
          },
          {
            "name": "export_extension",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Export extension"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Export a Event.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportEvent"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/exports": {
      "get": {
        "description": "Get a list of existing Exports.",
        "operationId": "getExports",
        "summary": "Get Exports",
        "tags": [
          "exports"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Export attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ExportsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsResponse"
                },
                "examples": {
                  "List of Exports": {
                    "summary": "List of Exports",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "export",
                          "attributes": {
                            "display_name": "a230e1e4",
                            "secure_token": "a230e1e4-ddc3-48e5-bc26-2084368288b3",
                            "original_filename": "export.xlsx",
                            "status": "processing",
                            "created_at": "2023-04-21T13:10:03.258Z",
                            "updated_at": "2023-04-21T13:10:03.258Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "file": {
                              "extension": "xlsx",
                              "content_type": "invalid/invalid",
                              "filename": "export.xlsx"
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/exports/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "export",
                          "attributes": {
                            "display_name": "3083fef5",
                            "secure_token": "3083fef5-4e5a-40dd-9acd-a8e8f23568f9",
                            "original_filename": "export.xlsx",
                            "status": "processing",
                            "created_at": "2023-04-21T13:10:03.308Z",
                            "updated_at": "2023-04-21T13:10:03.308Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "file": {
                              "extension": "xlsx",
                              "content_type": "invalid/invalid",
                              "filename": "export.xlsx"
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/exports/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for exports given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exports/{id}": {
      "get": {
        "description": "Get a single Export by its id.",
        "operationId": "getExport",
        "summary": "Get Export",
        "tags": [
          "exports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Export to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Export attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                },
                "examples": {
                  "Export": {
                    "summary": "Export",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "export",
                        "attributes": {
                          "display_name": "a324ab66",
                          "secure_token": "a324ab66-bd5b-497d-847c-7a7a9c75e1a3",
                          "original_filename": "export.xlsx",
                          "status": "processing",
                          "created_at": "2023-04-21T13:10:05.615Z",
                          "updated_at": "2023-04-21T13:10:05.615Z",
                          "custom_attributes": [],
                          "file": {
                            "extension": "xlsx",
                            "content_type": "invalid/invalid",
                            "filename": "export.xlsx"
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/exports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for exports given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Export.",
        "operationId": "updateExport",
        "summary": "Update Export",
        "tags": [
          "exports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Export to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Export.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExport"
              },
              "example": {
                "data": {
                  "type": "export",
                  "attributes": {
                    "custom_attributes": [
                      {
                        "name": "location",
                        "type": "text",
                        "value": "46.586317,30.746197"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                },
                "examples": {
                  "Export": {
                    "summary": "Export",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "export",
                        "attributes": {
                          "display_name": "fb1d2d23",
                          "secure_token": "fb1d2d23-aad9-4f2f-8e55-423582521fc5",
                          "original_filename": "export.xlsx",
                          "status": "processing",
                          "created_at": "2023-04-21T13:10:09.141Z",
                          "updated_at": "2023-04-21T13:10:09.141Z",
                          "custom_attributes": [
                            {
                              "name": "location",
                              "type": "text",
                              "value": "46.586317,30.746197"
                            }
                          ],
                          "file": {
                            "extension": "xlsx",
                            "content_type": "invalid/invalid",
                            "filename": "export.xlsx"
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/exports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Export.",
        "operationId": "deleteExport",
        "summary": "Delete Export",
        "tags": [
          "exports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Export to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden Error because of a missed scope": {
                    "summary": "Forbidden Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/{resource_type}/{resource_id}/assignment": {
      "post": {
        "description": "Assign a Resource to a Group.",
        "operationId": "createGroupResource",
        "summary": "Create Group Resource",
        "tags": [
          "group_resources"
        ],
        "parameters": [
          {
            "name": "group_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Group to which the Resource is to be added."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of the Resource which is to be assigned."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Resource which is to be assigned."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a GroupResource.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupResource"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResourceResponse"
                },
                "examples": {
                  "Assigning Collection to a Group": {
                    "summary": "Assigning Collection to a Group",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "group_resource",
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "7",
                              "type": "group"
                            }
                          },
                          "resource": {
                            "data": {
                              "id": "2",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  },
                  "Assigning SmartView to a Group": {
                    "summary": "Assigning SmartView to a Group",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "group_resource",
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "7",
                              "type": "group"
                            }
                          },
                          "resource": {
                            "data": {
                              "id": "1",
                              "type": "smart_view"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Unassign a Collection from a Group.",
        "operationId": "deleteGroupResource",
        "summary": "Delete Group Resource",
        "tags": [
          "group_resources"
        ],
        "parameters": [
          {
            "name": "group_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Group from which the Resource is to be removed."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of the Resource which is to be removed."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Resource which is to be removed."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/users/{user_id}/assignment": {
      "post": {
        "description": "Assign a User to a Group.",
        "operationId": "createGroupUser",
        "summary": "Create Group User",
        "tags": [
          "group_users"
        ],
        "parameters": [
          {
            "name": "group_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Group to which the User is to be added."
          },
          {
            "name": "user_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the User which is to be assigned."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a GroupUser.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupUser"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                },
                "examples": {
                  "Assigning User to a Group": {
                    "summary": "Assigning User to a Group",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "group_user",
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "7",
                              "type": "group"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "2",
                              "type": "user"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Unassign a User from a Group.",
        "operationId": "deleteGroupUser",
        "summary": "Delete Group User",
        "tags": [
          "group_users"
        ],
        "parameters": [
          {
            "name": "group_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the Group from which the User is to be removed."
          },
          {
            "name": "user_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of the User which is to be removed."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "description": "Get a list of existing Groups.",
        "operationId": "getGroups",
        "summary": "Get Groups",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Role attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `roles`, `users`, `collections`, `smart_views`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GroupsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsResponse"
                },
                "examples": {
                  "List of Groups": {
                    "summary": "List of Groups",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "group",
                          "attributes": {
                            "display_name": "Organization Administrator",
                            "name": "Organization Administrator",
                            "description": "Permissions to manage the organization (default setting)",
                            "created_at": "2023-04-21T12:45:58.272Z",
                            "updated_at": "2023-04-21T12:45:58.272Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": []
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "group",
                          "attributes": {
                            "display_name": "Members Administrator",
                            "name": "Members Administrator",
                            "description": "Permissions to manage the organization memberships (default setting)",
                            "created_at": "2023-04-21T12:45:58.549Z",
                            "updated_at": "2023-04-21T12:45:58.549Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": []
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "group",
                          "attributes": {
                            "display_name": "Resource Administrator",
                            "name": "Resource Administrator",
                            "description": "Permissions to administrate resources (default setting)",
                            "created_at": "2023-04-21T12:45:58.588Z",
                            "updated_at": "2023-04-21T12:45:58.588Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "group",
                          "attributes": {
                            "display_name": "Resource Observer",
                            "name": "Resource Observer",
                            "description": "Permissions to observe resources (default setting)",
                            "created_at": "2023-04-21T12:45:58.603Z",
                            "updated_at": "2023-04-21T12:45:58.603Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/4"
                          }
                        },
                        {
                          "id": "5",
                          "type": "group",
                          "attributes": {
                            "display_name": "Resource Manager",
                            "name": "Resource Manager",
                            "description": "Permissions to manage resources (default setting)",
                            "created_at": "2023-04-21T12:45:58.618Z",
                            "updated_at": "2023-04-21T12:45:58.618Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "5",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/5"
                          }
                        },
                        {
                          "id": "6",
                          "type": "group",
                          "attributes": {
                            "display_name": "Resource Collaborator",
                            "name": "Resource Collaborator",
                            "description": "Permissions to collaborate in resources execution (default setting)",
                            "created_at": "2023-04-21T12:45:58.633Z",
                            "updated_at": "2023-04-21T12:45:58.633Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "6",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": []
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "group",
                          "attributes": {
                            "display_name": "Manager",
                            "name": "Manager",
                            "description": "Laudantium vero sunt. Rem provident dolorum. Atque temporibus dolores.",
                            "created_at": "2023-04-21T13:10:29.504Z",
                            "updated_at": "2023-04-21T13:10:29.504Z",
                            "active": true
                          },
                          "relationships": {
                            "roles": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "role"
                                }
                              ]
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            },
                            "smart_views": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/groups/7"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 7,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7
                        ],
                        "recordsSize": 7
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong groups attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for groups given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for groups given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Group.",
        "operationId": "createGroup",
        "summary": "Create Group",
        "tags": [
          "groups"
        ],
        "requestBody": {
          "description": "Create a Group.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroup"
              },
              "example": {
                "data": {
                  "type": "group",
                  "attributes": {
                    "name": "Designer",
                    "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                },
                "examples": {
                  "Group": {
                    "summary": "Group",
                    "value": {
                      "data": {
                        "id": "8",
                        "type": "group",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "created_at": "2023-04-21T13:10:39.023Z",
                          "updated_at": "2023-04-21T13:10:39.023Z",
                          "active": true
                        },
                        "relationships": {
                          "roles": {
                            "data": []
                          },
                          "users": {
                            "data": []
                          },
                          "collections": {
                            "data": []
                          },
                          "smart_views": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/groups/8"
                        }
                      }
                    }
                  },
                  "Group without roles": {
                    "summary": "Group without roles",
                    "value": {
                      "data": {
                        "id": "8",
                        "type": "group",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "created_at": "2023-04-21T13:10:39.644Z",
                          "updated_at": "2023-04-21T13:10:39.644Z",
                          "active": true
                        },
                        "relationships": {
                          "roles": {
                            "data": []
                          },
                          "users": {
                            "data": []
                          },
                          "collections": {
                            "data": []
                          },
                          "smart_views": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/groups/8"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Name can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "description": "Get a single group by its id.",
        "operationId": "getGroup",
        "summary": "Get Group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of group to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of group attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `roles`, `users`, `collections`, `smart_views`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                },
                "examples": {
                  "group": {
                    "summary": "group",
                    "value": {
                      "data": {
                        "id": "7",
                        "type": "group",
                        "attributes": {
                          "display_name": "Manager",
                          "name": "Manager",
                          "description": "Laudantium vero sunt. Rem provident dolorum. Atque temporibus dolores.",
                          "created_at": "2023-04-21T13:10:33.823Z",
                          "updated_at": "2023-04-21T13:10:33.823Z",
                          "active": true
                        },
                        "relationships": {
                          "roles": {
                            "data": [
                              {
                                "id": "7",
                                "type": "role"
                              }
                            ]
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "1",
                                "type": "collection"
                              }
                            ]
                          },
                          "smart_views": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/groups/7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for groups given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for groups given: `priviliges`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Group.",
        "operationId": "updateGroup",
        "summary": "Update Group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Group to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Group.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroup"
              },
              "example": {
                "data": {
                  "type": "group",
                  "attributes": {
                    "name": "Designer",
                    "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                },
                "examples": {
                  "Group": {
                    "summary": "Group",
                    "value": {
                      "data": {
                        "id": "7",
                        "type": "group",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "created_at": "2023-04-21T13:10:43.978Z",
                          "updated_at": "2023-04-21T13:10:44.415Z",
                          "active": true
                        },
                        "relationships": {
                          "roles": {
                            "data": [
                              {
                                "id": "7",
                                "type": "role"
                              }
                            ]
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "1",
                                "type": "collection"
                              }
                            ]
                          },
                          "smart_views": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/groups/7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Group.",
        "operationId": "deleteGroup",
        "summary": "Delete Group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Group to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/measurements": {
      "get": {
        "description": "Get a list of existing Measurements.",
        "operationId": "getMeasurements",
        "summary": "Get Measurements",
        "tags": [
          "measurements"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Measurement attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MeasurementsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `channels`, `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "data_points",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the data points related to this measurement will be included as the `data_points` attribute."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementsResponse"
                },
                "examples": {
                  "List of Measurements": {
                    "summary": "List of Measurements",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "measurement",
                          "attributes": {
                            "uuid": "23a02528-a1be-4642-919d-80360cf0b03b",
                            "description": "Synergistic Wooden Table",
                            "status": "finished",
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2023-04-21T12:10:52.912Z",
                                "2023-04-21T13:05:52.912Z"
                              ]
                            },
                            "container_id": null,
                            "container_type": null,
                            "start_at": "2023-04-21T12:10:52.912Z",
                            "end_at": "2023-04-21T13:05:52.912Z",
                            "created_at": "2023-04-21T13:10:52.994Z",
                            "updated_at": "2023-04-21T13:10:52.994Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "scope": {
                              "id": 2,
                              "start_at": "2023-04-21T12:10:52.912Z",
                              "end_at": "2023-04-21T13:05:52.912Z",
                              "channel_ids": [
                                12
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "12",
                                  "type": "channel"
                                }
                              ]
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/measurements/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "measurement",
                          "attributes": {
                            "uuid": "dca46705-4e86-4412-a435-2159ad605aa7",
                            "description": "Lightweight Paper Hat",
                            "status": "finished",
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2023-04-21T12:10:53.107Z",
                                "2023-04-21T13:05:53.107Z"
                              ]
                            },
                            "container_id": null,
                            "container_type": null,
                            "start_at": "2023-04-21T12:10:53.107Z",
                            "end_at": "2023-04-21T13:05:53.107Z",
                            "created_at": "2023-04-21T13:10:53.171Z",
                            "updated_at": "2023-04-21T13:10:53.171Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "scope": {
                              "id": 3,
                              "start_at": "2023-04-21T12:10:53.107Z",
                              "end_at": "2023-04-21T13:05:53.107Z",
                              "channel_ids": [
                                18
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "6",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "18",
                                  "type": "channel"
                                }
                              ]
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/measurements/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of found Measurements": {
                    "summary": "List of found Measurements",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "measurement",
                          "attributes": {
                            "uuid": "6dd8f4db-f41f-49e4-ae36-58dace6fdba1",
                            "description": "Lightweight Paper Hat",
                            "status": "finished",
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2023-04-21T12:10:54.484Z",
                                "2023-04-21T13:05:54.484Z"
                              ]
                            },
                            "container_id": null,
                            "container_type": null,
                            "start_at": "2023-04-21T12:10:54.484Z",
                            "end_at": "2023-04-21T13:05:54.484Z",
                            "created_at": "2023-04-21T13:10:54.550Z",
                            "updated_at": "2023-04-21T13:10:54.550Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "scope": {
                              "id": 3,
                              "start_at": "2023-04-21T12:10:54.484Z",
                              "end_at": "2023-04-21T13:05:54.484Z",
                              "channel_ids": [
                                18
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "6",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "18",
                                  "type": "channel"
                                }
                              ]
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/measurements/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          3
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Measurement.",
        "operationId": "createMeasurement",
        "summary": "Create Measurement",
        "tags": [
          "measurements"
        ],
        "requestBody": {
          "description": "Create a Measurement.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMeasurement"
              },
              "example": {
                "data": {
                  "type": "measurement",
                  "attributes": {
                    "description": "Desc",
                    "scope_attributes": {
                      "start_at": "2023-04-21 13:11:03 UTC"
                    }
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "id": "2",
                        "type": "collection"
                      }
                    },
                    "container": {
                      "data": {
                        "id": "3",
                        "type": "View"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "measurement",
                        "attributes": {
                          "uuid": "31e74acb-fdad-412a-9a1e-b3bf87577393",
                          "description": "Desc",
                          "status": "running",
                          "scope_params": {
                            "type": "open_range",
                            "params": [
                              "2023-04-21T13:11:03.000Z"
                            ]
                          },
                          "custom_attributes": [],
                          "container_id": 3,
                          "container_type": "View",
                          "start_at": "2023-04-21T13:11:03.000Z",
                          "created_at": "2023-04-21T13:11:04.506Z",
                          "updated_at": "2023-04-21T13:11:04.506Z",
                          "scope": {
                            "id": 2,
                            "start_at": "2023-04-21T13:11:03.000Z",
                            "channel_ids": [
                              9,
                              8,
                              7
                            ]
                          },
                          "context_type": "Device",
                          "context_id": 2,
                          "context_name": "Synergistic Wooden Table"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "4",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "7",
                                "type": "channel"
                              },
                              {
                                "id": "8",
                                "type": "channel"
                              },
                              {
                                "id": "9",
                                "type": "channel"
                              }
                            ]
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/measurements/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/measurements/{id}": {
      "get": {
        "description": "Get a single Measurement by its id.",
        "operationId": "getMeasurement",
        "summary": "Get Measurement",
        "tags": [
          "measurements"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Measurement to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Measurement attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "data_points",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the data_points will be included as an attribute."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "measurement",
                        "attributes": {
                          "uuid": "551f117e-bf6d-414c-8d6f-77ae5a25cadd",
                          "description": "Synergistic Wooden Table",
                          "status": "finished",
                          "scope_params": {
                            "type": "range",
                            "params": [
                              "2023-04-21T12:10:57.691Z",
                              "2023-04-21T13:05:57.691Z"
                            ]
                          },
                          "custom_attributes": [],
                          "start_at": "2023-04-21T12:10:57.691Z",
                          "end_at": "2023-04-21T13:05:57.691Z",
                          "created_at": "2023-04-21T13:10:57.760Z",
                          "updated_at": "2023-04-21T13:10:57.760Z",
                          "scope": {
                            "id": 2,
                            "start_at": "2023-04-21T12:10:57.691Z",
                            "end_at": "2023-04-21T13:05:57.691Z",
                            "channel_ids": [
                              12
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "4",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "12",
                                "type": "channel"
                              }
                            ]
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/measurements/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Measurement.",
        "operationId": "updateMeasurement",
        "summary": "Update Measurement",
        "tags": [
          "measurements"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Measurement to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Measurement.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeasurement"
              },
              "example": {
                "data": {
                  "type": "measurement",
                  "attributes": {
                    "description": "New Desc"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "measurement",
                        "attributes": {
                          "uuid": "3e476a77-cbcb-4831-b381-4d1f2d64dd90",
                          "description": "New Desc",
                          "status": "finished",
                          "scope_params": {
                            "type": "range",
                            "params": [
                              "2023-04-21T12:11:11.674Z",
                              "2023-04-21T13:06:11.675Z"
                            ]
                          },
                          "custom_attributes": [],
                          "start_at": "2023-04-21T12:11:11.674Z",
                          "end_at": "2023-04-21T13:06:11.675Z",
                          "created_at": "2023-04-21T13:11:11.740Z",
                          "updated_at": "2023-04-21T13:11:12.370Z",
                          "scope": {
                            "id": 2,
                            "start_at": "2023-04-21T12:11:11.674Z",
                            "end_at": "2023-04-21T13:06:11.675Z",
                            "channel_ids": [
                              12
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "4",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "12",
                                "type": "channel"
                              }
                            ]
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/measurements/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Measurement.",
        "operationId": "deleteMeasurement",
        "summary": "Delete Measurement",
        "tags": [
          "measurements"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Measurement to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification_settings": {
      "get": {
        "description": "Get a list of existing NotificationSettings.",
        "operationId": "getNotificationSettings",
        "summary": "Get Notification Settings",
        "tags": [
          "notification_settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationSetting attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationSettingsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `protonotification`, `user`, `notifications`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsResponse"
                },
                "examples": {
                  "List of NotificationSettings": {
                    "summary": "List of NotificationSettings",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "notification_setting",
                          "attributes": {
                            "delivery_methods": [
                              "ui"
                            ],
                            "active": true,
                            "rate_limit": 600000,
                            "created_at": "2023-04-21T13:11:26.340Z",
                            "updated_at": "2023-04-21T13:11:26.340Z"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "2",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "notifications": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notification_settings/3"
                          }
                        },
                        {
                          "id": "2",
                          "type": "notification_setting",
                          "attributes": {
                            "delivery_methods": [
                              "ui"
                            ],
                            "active": true,
                            "rate_limit": 600000,
                            "created_at": "2023-04-21T13:11:26.337Z",
                            "updated_at": "2023-04-21T13:11:26.337Z"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "2",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "notifications": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notification_settings/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "notification_setting",
                          "attributes": {
                            "delivery_methods": [
                              "ui"
                            ],
                            "active": true,
                            "rate_limit": 600000,
                            "created_at": "2023-04-21T13:11:26.307Z",
                            "updated_at": "2023-04-21T13:11:26.307Z"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "notifications": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notification_settings/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          3,
                          2,
                          1
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notification_settings attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a NotificationSetting.",
        "operationId": "createNotificationSetting",
        "summary": "Create Notification Setting",
        "tags": [
          "notification_settings"
        ],
        "requestBody": {
          "description": "Create a NotificationSetting.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationSetting"
              },
              "example": {
                "data": {
                  "type": "notification_setting",
                  "attributes": {
                    "active": "true"
                  },
                  "relationships": {
                    "protonotification": {
                      "data": {
                        "type": "protonotifications",
                        "id": "1"
                      }
                    },
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": true,
                          "rate_limit": 600000,
                          "created_at": "2023-04-21T13:11:32.629Z",
                          "updated_at": "2023-04-21T13:11:32.629Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "2",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notification_settings/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: User must exist",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "user": [
                                "must exist"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/notification_settings/{id}": {
      "get": {
        "description": "Get a single NotificationSetting by its id.",
        "operationId": "getNotificationSetting",
        "summary": "Get Notification Setting",
        "tags": [
          "notification_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of NotificationSetting to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationSetting attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": true,
                          "rate_limit": 600000,
                          "created_at": "2023-04-21T13:11:29.161Z",
                          "updated_at": "2023-04-21T13:11:29.161Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notification_settings/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update user's NotificationSetting.",
        "operationId": "updateNotificationSetting",
        "summary": "Update Notification Setting",
        "tags": [
          "notification_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationSetting to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a NotificationSetting.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationSetting"
              },
              "example": {
                "data": {
                  "type": "notification_setting",
                  "attributes": {
                    "active": "false"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": false,
                          "rate_limit": 600000,
                          "created_at": "2023-04-21T13:11:36.115Z",
                          "updated_at": "2023-04-21T13:11:36.458Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notification_settings/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a NotificationSetting.",
        "operationId": "deleteNotificationSetting",
        "summary": "Delete Notification Setting",
        "tags": [
          "notification_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationSetting to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification_triggers": {
      "get": {
        "description": "Get a list of existing NotificationTriggers.",
        "operationId": "getNotificationTriggers",
        "summary": "Get Notification Triggers",
        "tags": [
          "notification_triggers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationTrigger attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationTriggersFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `protonotification`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggersResponse"
                },
                "examples": {
                  "List of NotificationTriggers": {
                    "summary": "List of NotificationTriggers",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "notification_trigger",
                          "attributes": {
                            "key": "high_temperature",
                            "conditions": "{}"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notification_triggers/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "notification_trigger",
                          "attributes": {
                            "key": "high_temperature",
                            "conditions": "{}"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notification_triggers/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notification_triggers attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a NotificationTrigger.",
        "operationId": "createNotificationTrigger",
        "summary": "Create Notification Trigger",
        "tags": [
          "notification_triggers"
        ],
        "requestBody": {
          "description": "Create a NotificationTrigger.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTrigger"
              },
              "example": {
                "data": {
                  "type": "notification_trigger",
                  "attributes": {
                    "key": "High Temperature"
                  },
                  "relationships": {
                    "protonotification": {
                      "data": {
                        "type": "protonotifications",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggerResponse"
                },
                "examples": {
                  "NotificationTrigger": {
                    "summary": "NotificationTrigger",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "notification_trigger",
                        "attributes": {
                          "key": "High Temperature",
                          "conditions": "{}"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notification_triggers/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/notification_triggers/{id}": {
      "patch": {
        "description": "Update NotificationTrigger.",
        "operationId": "updateNotificationTrigger",
        "summary": "Update Notification Trigger",
        "tags": [
          "notification_triggers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationTrigger to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a NotificationTrigger.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationTrigger"
              },
              "example": {
                "data": {
                  "type": "notification_trigger",
                  "attributes": {
                    "key": "New Key"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggerResponse"
                },
                "examples": {
                  "NotificationTrigger": {
                    "summary": "NotificationTrigger",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification_trigger",
                        "attributes": {
                          "key": "New Key",
                          "conditions": "{}"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notification_triggers/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a NotificationTrigger.",
        "operationId": "deleteNotificationTrigger",
        "summary": "Delete Notification Trigger",
        "tags": [
          "notification_triggers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationTrigger to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "Get a list of existing Notifications.",
        "operationId": "getNotifications",
        "summary": "Get Notifications",
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Notification attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `notification_settings`, `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsResponse"
                },
                "examples": {
                  "List of Notifications": {
                    "summary": "List of Notifications",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "notification",
                          "attributes": {
                            "details": "{}",
                            "read": false,
                            "title": "Esse reprehenderit rerum.",
                            "message": "Eos veritatis est et.",
                            "created_at": "2023-04-21T13:11:57.182Z",
                            "updated_at": "2023-04-21T13:11:57.182Z"
                          },
                          "relationships": {
                            "notification_setting": {
                              "data": {
                                "id": "2",
                                "type": "notification_setting"
                              }
                            },
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notifications/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "notification",
                          "attributes": {
                            "details": "{}",
                            "read": false,
                            "title": "Eaque vitae in.",
                            "message": "Quia et et et.",
                            "created_at": "2023-04-21T13:11:57.179Z",
                            "updated_at": "2023-04-21T13:11:57.179Z"
                          },
                          "relationships": {
                            "notification_setting": {
                              "data": {
                                "id": "2",
                                "type": "notification_setting"
                              }
                            },
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/notifications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notifications attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "patch": {
        "description": "Update a Notification.",
        "operationId": "updateNotification",
        "summary": "Update Notification",
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Notification to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Notification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotification"
              },
              "example": {
                "data": {
                  "type": "notification",
                  "attributes": {
                    "read": "true"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponse"
                },
                "examples": {
                  "Notification": {
                    "summary": "Notification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification",
                        "attributes": {
                          "details": "{}",
                          "read": true,
                          "title": "Eaque vitae in.",
                          "message": "Quia et et et.",
                          "created_at": "2023-04-21T13:11:59.430Z",
                          "updated_at": "2023-04-21T13:11:59.833Z"
                        },
                        "relationships": {
                          "notification_setting": {
                            "data": {
                              "id": "2",
                              "type": "notification_setting"
                            }
                          },
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/notifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Notification.",
        "operationId": "deleteNotification",
        "summary": "Delete Notification",
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Notification to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisation_memberships": {
      "get": {
        "description": "Get a list of existing OrganisationMemberships.",
        "operationId": "getOrganisationMemberships",
        "summary": "Get Organisation Memberships",
        "tags": [
          "organisation_memberships"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of OrganisationMembership attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrganisationMembershipsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembershipsResponse"
                },
                "examples": {
                  "List of OrganisationMemberships": {
                    "summary": "List of OrganisationMemberships",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2023-04-21T13:12:09.345Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/organisation_memberships/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2023-04-21T13:12:09.457Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/organisation_memberships/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2023-04-21T13:12:09.543Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/organisation_memberships/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          2,
                          3
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisation_memberships/{id}": {
      "get": {
        "description": "Get a single OrganisationMembership by its id.",
        "operationId": "getOrganisationMembership",
        "summary": "Get Organisation Membership",
        "tags": [
          "organisation_memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of OrganisationMembership to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of OrganisationMembership attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `users`"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembershipResponse"
                },
                "examples": {
                  "OrganisationMembership": {
                    "summary": "OrganisationMembership",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "organisation_membership",
                        "attributes": {
                          "created_at": "2023-04-21T13:12:11.764Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/organisation_memberships/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a OrganisationMemberships.",
        "operationId": "deleteOrganisationMembership",
        "summary": "Delete Organisation Membership",
        "tags": [
          "organisation_memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a OrganisationMembership to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "is the last user with critical permissions": {
                    "summary": "is the last user with critical permissions",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Action not permitted, the resource you are trying to change has exclusive access to some Access Control functions.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "description": "Get a list of existing Organisations.",
        "operationId": "getOrganisations",
        "summary": "Get Organisations",
        "tags": [
          "organisations"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Organisation attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrganisationsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationsResponse"
                },
                "examples": {
                  "List of Organisations": {
                    "summary": "List of Organisations",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "organisation",
                          "attributes": {
                            "name": "Laboperator",
                            "description": null,
                            "location": null,
                            "website": null,
                            "domain": "laboperator",
                            "settings": {
                              "features": [
                                "webhooks",
                                "secrets",
                                "permanent_deletion"
                              ],
                              "security": {
                                "approvedWebhooks": [
                                  "webhook.laboperator.com"
                                ]
                              }
                            },
                            "logo": {
                              "url": {
                                "medium": null,
                                "thumb": null
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/organisations/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "organisation",
                          "attributes": {
                            "name": "Beier-Welch #1",
                            "description": "Accusamus sed itaque et.",
                            "location": null,
                            "website": null,
                            "domain": "pacocha-1",
                            "settings": {
                              "theme": {},
                              "features": [],
                              "security": {
                                "approvedWebhooks": []
                              },
                              "dateFormat": null,
                              "timeFormat": null
                            },
                            "logo": {
                              "url": {
                                "medium": null,
                                "thumb": null
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/organisations/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisation"
              }
            }
          }
        },
        "description": "Create a Organisation.",
        "operationId": "createOrganisation",
        "summary": "Create Organisation",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "organisation",
                        "attributes": {
                          "name": "labpolt",
                          "domain": "labpoltava",
                          "settings": {
                            "features": [
                              "permanent_deletion"
                            ]
                          },
                          "logo": {
                            "url": {}
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/organisations/2"
                        }
                      }
                    }
                  },
                  "Organisation when license key is not required": {
                    "summary": "Organisation when license key is not required",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "organisation",
                        "attributes": {
                          "name": "labpolt",
                          "domain": "labpoltava",
                          "settings": {
                            "features": []
                          },
                          "logo": {
                            "url": {}
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/organisations/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for organisation: `domain`, `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ],
                              "domain": [
                                "can't be blank",
                                "is too short (minimum is 3 characters)"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "Missing license key": {
                    "summary": "Missing license key",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "License key is missing.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Invalid license key": {
                    "summary": "Invalid license key",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/organisations/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisation"
              }
            }
          }
        },
        "description": "Update a Organisation.",
        "operationId": "updateOrganisation",
        "summary": "Update Organisation",
        "tags": [
          "organisations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Organisation to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "organisation",
                        "attributes": {
                          "name": "Test",
                          "domain": "laboperator",
                          "settings": {
                            "features": [
                              "webhooks",
                              "secrets",
                              "permanent_deletion"
                            ],
                            "security": {
                              "approvedWebhooks": [
                                "webhook.laboperator.com"
                              ]
                            },
                            "theme": {
                              "primary": {
                                "main": "#ffad00"
                              },
                              "secondary": {
                                "main": "#ff2210"
                              }
                            }
                          },
                          "logo": {
                            "url": {}
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/organisations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Get a single Organisation by its id.",
        "operationId": "getOrganisation",
        "summary": "Get Organisation",
        "tags": [
          "organisations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Organisation to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Organisation attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "organisation",
                        "attributes": {
                          "name": "Laboperator",
                          "domain": "laboperator",
                          "settings": {
                            "features": [
                              "webhooks",
                              "secrets",
                              "permanent_deletion"
                            ],
                            "security": {
                              "approvedWebhooks": [
                                "webhook.laboperator.com"
                              ]
                            }
                          },
                          "logo": {
                            "url": {}
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/organisations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ports/{id}/binding": {
      "post": {
        "description": "Bind device to the given Port.",
        "operationId": "createPortBinding",
        "summary": "Create Port Binding",
        "tags": [
          "port_bindings"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create binding of a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/BindDevice"
              },
              "example": {
                "data": {
                  "type": "port",
                  "relationships": {
                    "device": {
                      "data": {
                        "id": "3"
                      }
                    },
                    "device_type": {
                      "data": {
                        "id": "2000",
                        "name": "New Device Name"
                      }
                    },
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Binding an existing device": {
                    "summary": "Binding an existing device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "2.2.1"
                          },
                          "connector_key_nice": "8153-5759-0265"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "3",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/1"
                        }
                      }
                    }
                  },
                  "Binding a new device": {
                    "summary": "Binding a new device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "baudrate": 19200,
                              "databits": 8,
                              "parity": "none",
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-vacuubrand",
                            "version": "0.0.1"
                          },
                          "connector_key_nice": "0534-5911-2624"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "3",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Unbind device from the given Port.",
        "operationId": "deletePortBinding",
        "summary": "Delete Port Binding",
        "tags": [
          "port_bindings"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error: port has no bounde device": {
                    "summary": "Bad Request Error: port has no bounde device",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "No device is bound to the port.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ports": {
      "get": {
        "description": "Get a list of existing Ports.",
        "operationId": "getPorts",
        "summary": "Get Ports",
        "tags": [
          "ports"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Ports attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PortsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `connector`, `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortsResponse"
                },
                "examples": {
                  "List of Ports": {
                    "summary": "List of Ports",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-top-left",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                            },
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "2.2.1"
                            },
                            "connector_key_nice": "2418-1259-1737"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/ports/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-top-right",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_4_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2418-1259-1737"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/ports/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-bottom-left",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_3_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2418-1259-1737"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/ports/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-bottom-right",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_5_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2418-1259-1737"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/ports/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 4,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "recordsSize": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Port.",
        "operationId": "createPort",
        "summary": "Create Port",
        "tags": [
          "ports"
        ],
        "requestBody": {
          "description": "Create a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePort"
              },
              "example": {
                "data": {
                  "type": "port",
                  "attributes": {
                    "position": "virtual"
                  },
                  "relationships": {
                    "device_type": {
                      "data": {
                        "id": "9000",
                        "type": "device_types"
                      }
                    },
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    },
                    "connector": {
                      "data": {
                        "id": "1",
                        "type": "connectors"
                      }
                    },
                    "device": {
                      "data": {
                        "id": "1",
                        "type": "devices"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Binding new Device to Port": {
                    "summary": "Binding new Device to Port",
                    "value": {
                      "data": {
                        "id": "9",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_87108a79ac7929cca0ccf21de8a670fa"
                          },
                          "parameters": {
                            "usb_serial": {
                              "baudrate": 9600,
                              "databits": 7,
                              "parity": "even",
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-ika-retcontrol",
                            "version": "0.0.5"
                          },
                          "connector_key_nice": "3904-9606-7793"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "3",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "3",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/9"
                        }
                      }
                    }
                  },
                  "Binding exiting Device to Port": {
                    "summary": "Binding exiting Device to Port",
                    "value": {
                      "data": {
                        "id": "9",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_8c5fcf0fa8bb9810492f1239a4ded47a"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "2.2.1"
                          },
                          "connector_key_nice": "1693-1209-6707"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "3",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/9"
                        }
                      }
                    }
                  },
                  "Physical connector": {
                    "summary": "Physical connector",
                    "value": {
                      "data": {
                        "id": "9",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_f3d08f78302a2bd8f8fc6736404e8a89"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "2.2.1"
                          },
                          "connector_key_nice": "2747-7880-8961"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/9"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Device is forbidden": {
                    "summary": "Device is forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Connector box v1 does not support virtual ports": {
                    "summary": "Connector box v1 does not support virtual ports",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/ports/{id}": {
      "get": {
        "description": "Get a single Port by its id.",
        "operationId": "getPort",
        "summary": "Get Port",
        "tags": [
          "ports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Port to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Port attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `connector`, `device`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "2.2.1"
                          },
                          "connector_key_nice": "5507-7176-3119"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Port.",
        "operationId": "updatePort",
        "summary": "Update Port",
        "tags": [
          "ports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePort"
              },
              "example": {
                "data": {
                  "type": "port",
                  "attributes": {
                    "position": "usb-port-top-right"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-right",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "2.2.1"
                          },
                          "connector_key_nice": "4306-1567-9944"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "1",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/ports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Destroy a virtual Port.",
        "operationId": "deletePort",
        "summary": "Delete Port",
        "tags": [
          "ports"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden Error because of a missed scope": {
                    "summary": "Forbidden Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"delete\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/protonotifications": {
      "get": {
        "description": "Get a list of existing Protonotifications.",
        "operationId": "getProtonotifications",
        "summary": "Get Protonotifications",
        "tags": [
          "protonotifications"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of protonotification attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProtonotificationsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationsResponse"
                },
                "examples": {
                  "List of Protonotifications": {
                    "summary": "List of Protonotifications",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "protonotification",
                          "attributes": {
                            "display_name": "High temperature",
                            "title": "High temperature",
                            "message": "Test message",
                            "created_at": "2023-04-21T13:13:17.420Z",
                            "updated_at": "2023-04-21T13:13:17.420Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "owner"
                              }
                            },
                            "notification_triggers": {
                              "data": []
                            },
                            "notification_settings": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "notification_setting"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/protonotifications/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "protonotification",
                          "attributes": {
                            "display_name": "First",
                            "title": "First",
                            "message": "Test message",
                            "created_at": "2023-04-21T13:13:17.417Z",
                            "updated_at": "2023-04-21T13:13:17.417Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "owner"
                              }
                            },
                            "notification_triggers": {
                              "data": []
                            },
                            "notification_settings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "notification_setting"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/protonotifications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong protonotifications attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Protonotification.",
        "operationId": "createProtonotification",
        "summary": "Create Protonotification",
        "tags": [
          "protonotifications"
        ],
        "requestBody": {
          "description": "Create a Protonotification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProtonotification"
              },
              "example": {
                "data": {
                  "type": "protonotification",
                  "attributes": {
                    "title": "High Temperature",
                    "delivery_methods": [
                      "email"
                    ],
                    "notification_triggers": [
                      {
                        "key": "high_temperature"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "Protonotification": {
                    "summary": "Protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "display_name": "High Temperature",
                          "title": "High Temperature",
                          "created_at": "2023-04-21T13:13:27.232Z",
                          "updated_at": "2023-04-21T13:13:27.232Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_trigger"
                              }
                            ]
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for protonotification: `title`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "title": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/protonotifications/{id}": {
      "get": {
        "description": "Get a single protonotification by its id.",
        "operationId": "getProtonotification",
        "summary": "Get Protonotification",
        "tags": [
          "protonotifications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of protonotification to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of protonotification attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `notification_settings`, `notification_triggers`, `owner`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "protonotification": {
                    "summary": "protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "display_name": "First",
                          "title": "First",
                          "message": "Test message",
                          "created_at": "2023-04-21T13:13:21.658Z",
                          "updated_at": "2023-04-21T13:13:21.658Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": []
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Protonotification.",
        "operationId": "updateProtonotification",
        "summary": "Update Protonotification",
        "tags": [
          "protonotifications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Protonotification to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Protonotification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProtonotification"
              },
              "example": {
                "data": {
                  "type": "protonotification",
                  "attributes": {
                    "title": "New Title",
                    "message": "New Message"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "Protonotification": {
                    "summary": "Protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "display_name": "New Title",
                          "title": "New Title",
                          "message": "New Message",
                          "created_at": "2023-04-21T13:13:32.189Z",
                          "updated_at": "2023-04-21T13:13:32.588Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": []
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Protonotification.",
        "operationId": "deleteProtonotification",
        "summary": "Delete Protonotification",
        "tags": [
          "protonotifications"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Protonotification to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "description": "Get a list of existing Reviews.",
        "operationId": "getReviews",
        "summary": "Get Reviews",
        "tags": [
          "reviews"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Review attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ReviewsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsResponse"
                },
                "examples": {
                  "List of Reviews": {
                    "summary": "List of Reviews",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "review",
                          "attributes": {
                            "id": 1,
                            "display_name": "Test Workflow | Signature 0.0.1 run #1",
                            "parent_id": null,
                            "reviewable_type": "WorkflowRun",
                            "reviewable_id": 1,
                            "reviewer_id": 3,
                            "reviewer_display_name": "Volkman-1381-55546",
                            "status": "in_progress",
                            "current_iteration": 1,
                            "created_at": "2023-04-21T13:14:20.441Z",
                            "updated_at": "2023-04-21T13:14:20.441Z"
                          },
                          "relationships": {
                            "signature": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "2",
                          "type": "review",
                          "attributes": {
                            "id": 2,
                            "display_name": "1. Do the thing",
                            "parent_id": 1,
                            "reviewable_type": "WorkflowStep",
                            "reviewable_id": 1,
                            "reviewer_id": 2,
                            "reviewer_display_name": "Rowe-1380-82452",
                            "status": "pending",
                            "current_iteration": 1,
                            "created_at": "2023-04-21T13:14:20.460Z",
                            "updated_at": "2023-04-21T13:14:20.460Z"
                          },
                          "relationships": {},
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong reviews attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for reviews given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for reviews given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reviews/{id}": {
      "get": {
        "description": "Get a single Review by its id.",
        "operationId": "getReview",
        "summary": "Get Review",
        "tags": [
          "reviews"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Review to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Review attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                },
                "examples": {
                  "Review": {
                    "summary": "Review",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "review",
                        "attributes": {
                          "id": 1,
                          "display_name": "Test Workflow | Signature 0.0.1 run #1",
                          "reviewable_type": "WorkflowRun",
                          "reviewable_id": 1,
                          "reviewer_id": 3,
                          "reviewer_display_name": "Volkman-1411-5690",
                          "status": "in_progress",
                          "current_iteration": 1,
                          "created_at": "2023-04-21T13:14:25.378Z",
                          "updated_at": "2023-04-21T13:14:25.378Z"
                        },
                        "relationships": {
                          "signature": {}
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for reviews given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for reviews given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Review.",
        "operationId": "updateReview",
        "summary": "Update Review",
        "tags": [
          "reviews"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Review to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Review.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReview"
              },
              "example": {
                "data": {
                  "type": "review",
                  "attributes": {
                    "status": "reviewed"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                },
                "examples": {
                  "Review": {
                    "summary": "Review",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "review",
                        "attributes": {
                          "id": 2,
                          "display_name": "1. Do the thing",
                          "parent_id": 1,
                          "reviewable_type": "WorkflowStep",
                          "reviewable_id": 1,
                          "reviewer_id": 1,
                          "reviewer_display_name": "Terry-1439-58528",
                          "status": "reviewed",
                          "current_iteration": 1,
                          "created_at": "2023-04-21T13:14:30.437Z",
                          "updated_at": "2023-04-21T13:14:30.804Z"
                        },
                        "relationships": {},
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for review: `status`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "reviewable": [
                                "must exist"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "description": "Get a list of existing Roles.",
        "operationId": "getRoles",
        "summary": "Get Roles",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Role attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RolesFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                },
                "examples": {
                  "List of Roles": {
                    "summary": "List of Roles",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "role",
                          "attributes": {
                            "display_name": "Organization Administrator",
                            "name": "Organization Administrator",
                            "description": "Permissions to manage the organization (default setting)",
                            "permissions": [
                              "automation.create",
                              "automation.destroy",
                              "automation.show",
                              "automation.update",
                              "custom_attribute.create",
                              "custom_attribute.destroy",
                              "custom_attribute.show",
                              "custom_attribute.update",
                              "event.show",
                              "notification.setting.create",
                              "notification.template.create",
                              "notification.template.destroy",
                              "notification.template.show",
                              "notification.template.update",
                              "notification.trigger.update",
                              "oauth.application.create",
                              "oauth.application.destroy",
                              "oauth.application.show",
                              "oauth.application.update",
                              "organisation.membership.destroy",
                              "organisation.membership.invite",
                              "organisation.update",
                              "secret.access.approve",
                              "secret.access.reject",
                              "secret.create",
                              "secret.destroy",
                              "secret.show",
                              "secret.update",
                              "webhook_subscription.create",
                              "webhook_subscription.destroy",
                              "webhook_subscription.show",
                              "webhook_subscription.update"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.192Z",
                            "updated_at": "2023-04-21T12:45:58.192Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "role",
                          "attributes": {
                            "display_name": "Members Administrator",
                            "name": "Members Administrator",
                            "description": "Permissions to manage the organization memberships (default setting)",
                            "permissions": [
                              "group.create",
                              "group.destroy",
                              "group.show",
                              "group.update",
                              "organisation.membership.destroy",
                              "organisation.membership.invite",
                              "role.create",
                              "role.destroy",
                              "role.show",
                              "role.update",
                              "user.update"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.228Z",
                            "updated_at": "2023-04-21T12:45:58.228Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "role",
                          "attributes": {
                            "display_name": "Resource Administrator",
                            "name": "Resource Administrator",
                            "description": "Permissions to administrate resources (default setting)",
                            "permissions": [
                              "collection.create",
                              "collection.destroy",
                              "collection.resource.create",
                              "collection.resource.destroy",
                              "collection.resource.hide",
                              "collection.resource.unhide",
                              "collection.update",
                              "connector.create",
                              "connector.destroy",
                              "connector.drivers.reset",
                              "connector.show",
                              "connector.update",
                              "dashboard.create",
                              "dashboard.destroy",
                              "dashboard.show",
                              "dashboard.update",
                              "dashboard.view.reset",
                              "dashboard.view.update",
                              "device.command.create",
                              "device.data.export",
                              "device.destroy",
                              "device.show",
                              "device.update",
                              "device.view.reset",
                              "device.view.update",
                              "event.export",
                              "export.destroy",
                              "export.show",
                              "export.update",
                              "measurement.create",
                              "measurement.destroy",
                              "measurement.show",
                              "measurement.update",
                              "measurement.view.reset",
                              "measurement.view.update",
                              "port.binding.create",
                              "port.binding.destroy",
                              "port.update",
                              "resource_destination.create",
                              "resource_destination.destroy",
                              "resource_destination.update",
                              "sample.create",
                              "sample.destroy",
                              "sample.show",
                              "sample.update",
                              "smart_view.create",
                              "smart_view.destroy",
                              "smart_view.show",
                              "smart_view.update",
                              "workflow_run.comment.create",
                              "workflow_run.comment.destroy",
                              "workflow_run.comment.show",
                              "workflow_run.comment.update",
                              "workflow_run.create.blank",
                              "workflow_run.create",
                              "workflow_run.destroy",
                              "workflow_run.event.add_step",
                              "workflow_run.event.move_step",
                              "workflow_run.event.remove_step",
                              "workflow_run.field.approve_update",
                              "workflow_run.field.cancel_update",
                              "workflow_run.field.update",
                              "workflow_run.show",
                              "workflow_run.signature.create",
                              "workflow_run.signature.show",
                              "workflow_run.status.active",
                              "workflow_run.status.completed",
                              "workflow_run.status.locked",
                              "workflow_run.status.paused",
                              "workflow_run.step.complete_substep",
                              "workflow_run.step.repeat_substep",
                              "workflow_run.step.trigger",
                              "workflow_run.update",
                              "workflow_step_template.create",
                              "workflow_step_template.destroy",
                              "workflow_step_template.show",
                              "workflow_template.create",
                              "workflow_template.destroy",
                              "workflow_template.show"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.565Z",
                            "updated_at": "2023-04-21T12:45:58.565Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "role",
                          "attributes": {
                            "display_name": "Resource Observer",
                            "name": "Resource Observer",
                            "description": "Permissions to observe resources (default setting)",
                            "permissions": [
                              "connector.show",
                              "dashboard.show",
                              "device.show",
                              "export.show",
                              "measurement.show",
                              "sample.show",
                              "smart_view.show",
                              "workflow_run.comment.show",
                              "workflow_run.show",
                              "workflow_run.signature.show",
                              "workflow_step_template.show",
                              "workflow_template.show"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.571Z",
                            "updated_at": "2023-04-21T12:45:58.571Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/4"
                          }
                        },
                        {
                          "id": "5",
                          "type": "role",
                          "attributes": {
                            "display_name": "Resource Manager",
                            "name": "Resource Manager",
                            "description": "Permissions to manage resources (default setting)",
                            "permissions": [
                              "collection.create",
                              "collection.destroy",
                              "collection.resource.create",
                              "collection.resource.destroy",
                              "collection.resource.hide",
                              "collection.resource.unhide",
                              "collection.update",
                              "connector.create",
                              "connector.destroy",
                              "connector.drivers.reset",
                              "connector.show",
                              "connector.update",
                              "dashboard.create",
                              "dashboard.destroy",
                              "dashboard.show",
                              "dashboard.update",
                              "dashboard.view.reset",
                              "dashboard.view.update",
                              "device.data.export",
                              "device.destroy",
                              "device.show",
                              "device.update",
                              "device.view.reset",
                              "device.view.update",
                              "event.export",
                              "export.destroy",
                              "export.show",
                              "export.update",
                              "measurement.create",
                              "measurement.destroy",
                              "measurement.show",
                              "measurement.update",
                              "measurement.view.reset",
                              "measurement.view.update",
                              "port.binding.create",
                              "port.binding.destroy",
                              "port.update",
                              "resource_destination.create",
                              "resource_destination.destroy",
                              "resource_destination.update",
                              "sample.create",
                              "sample.destroy",
                              "sample.show",
                              "sample.update",
                              "smart_view.create",
                              "smart_view.destroy",
                              "smart_view.show",
                              "smart_view.update",
                              "workflow_run.comment.create",
                              "workflow_run.comment.destroy",
                              "workflow_run.comment.show",
                              "workflow_run.comment.update",
                              "workflow_run.create.blank",
                              "workflow_run.create",
                              "workflow_run.destroy",
                              "workflow_run.event.add_step",
                              "workflow_run.event.move_step",
                              "workflow_run.event.remove_step",
                              "workflow_run.field.approve_update",
                              "workflow_run.field.cancel_update",
                              "workflow_run.field.update",
                              "workflow_run.show",
                              "workflow_run.signature.create",
                              "workflow_run.signature.show",
                              "workflow_run.status.active",
                              "workflow_run.status.completed",
                              "workflow_run.status.locked",
                              "workflow_run.status.paused",
                              "workflow_run.step.complete_substep",
                              "workflow_run.step.repeat_substep",
                              "workflow_run.step.trigger",
                              "workflow_run.update",
                              "workflow_step_template.create",
                              "workflow_step_template.destroy",
                              "workflow_step_template.show",
                              "workflow_template.create",
                              "workflow_template.destroy",
                              "workflow_template.show"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.575Z",
                            "updated_at": "2023-04-21T12:45:58.575Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "5",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/5"
                          }
                        },
                        {
                          "id": "6",
                          "type": "role",
                          "attributes": {
                            "display_name": "Resource Collaborator",
                            "name": "Resource Collaborator",
                            "description": "Permissions to collaborate in resources execution (default setting)",
                            "permissions": [
                              "collection.create",
                              "collection.update",
                              "connector.create",
                              "connector.drivers.reset",
                              "connector.show",
                              "connector.update",
                              "dashboard.create",
                              "dashboard.show",
                              "dashboard.update",
                              "dashboard.view.reset",
                              "dashboard.view.update",
                              "device.command.create",
                              "device.data.export",
                              "device.show",
                              "device.update",
                              "device.view.reset",
                              "device.view.update",
                              "event.export",
                              "export.show",
                              "export.update",
                              "measurement.create",
                              "measurement.show",
                              "measurement.update",
                              "measurement.view.reset",
                              "measurement.view.update",
                              "port.binding.create",
                              "port.binding.destroy",
                              "port.update",
                              "resource_destination.create",
                              "resource_destination.update",
                              "sample.create",
                              "sample.show",
                              "sample.update",
                              "smart_view.create",
                              "smart_view.show",
                              "smart_view.update",
                              "workflow_run.comment.create",
                              "workflow_run.comment.destroy",
                              "workflow_run.comment.show",
                              "workflow_run.comment.update",
                              "workflow_run.create.blank",
                              "workflow_run.create",
                              "workflow_run.event.add_step",
                              "workflow_run.event.move_step",
                              "workflow_run.event.remove_step",
                              "workflow_run.field.approve_update",
                              "workflow_run.field.cancel_update",
                              "workflow_run.field.update",
                              "workflow_run.show",
                              "workflow_run.signature.create",
                              "workflow_run.signature.show",
                              "workflow_run.status.active",
                              "workflow_run.status.completed",
                              "workflow_run.status.locked",
                              "workflow_run.status.paused",
                              "workflow_run.step.complete_substep",
                              "workflow_run.step.repeat_substep",
                              "workflow_run.step.trigger",
                              "workflow_run.update",
                              "workflow_step_template.create",
                              "workflow_step_template.show",
                              "workflow_template.create",
                              "workflow_template.show"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T12:45:58.581Z",
                            "updated_at": "2023-04-21T12:45:58.581Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "6",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "role",
                          "attributes": {
                            "display_name": "Facilitator",
                            "name": "Facilitator",
                            "description": "Veritatis qui deserunt. Et in dolores. Quia suscipit et.",
                            "permissions": [
                              "group.create",
                              "group.destroy",
                              "group.show",
                              "group.update",
                              "role.create",
                              "role.destroy",
                              "role.show",
                              "role.update"
                            ],
                            "active": true,
                            "created_at": "2023-04-21T13:14:36.886Z",
                            "updated_at": "2023-04-21T13:14:36.886Z"
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "group"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/roles/7"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 7,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7
                        ],
                        "recordsSize": 7
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong roles attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for roles given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for roles given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Role.",
        "operationId": "createRole",
        "summary": "Create Role",
        "tags": [
          "roles"
        ],
        "requestBody": {
          "description": "Create a Role.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRole"
              },
              "example": {
                "data": {
                  "type": "role",
                  "attributes": {
                    "name": "Designer",
                    "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "examples": {
                  "Role": {
                    "summary": "Role",
                    "value": {
                      "data": {
                        "id": "8",
                        "type": "role",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "permissions": [],
                          "active": true,
                          "created_at": "2023-04-21T13:14:44.143Z",
                          "updated_at": "2023-04-21T13:14:44.143Z"
                        },
                        "relationships": {
                          "groups": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/roles/8"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for role: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "description": "Get a single role by its id.",
        "operationId": "getRole",
        "summary": "Get Role",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Role to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Role attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "examples": {
                  "role": {
                    "summary": "role",
                    "value": {
                      "data": {
                        "id": "7",
                        "type": "role",
                        "attributes": {
                          "display_name": "Facilitator",
                          "name": "Facilitator",
                          "description": "Veritatis qui deserunt. Et in dolores. Quia suscipit et.",
                          "permissions": [
                            "group.create",
                            "group.destroy",
                            "group.show",
                            "group.update",
                            "role.create",
                            "role.destroy",
                            "role.show",
                            "role.update"
                          ],
                          "active": true,
                          "created_at": "2023-04-21T13:14:39.826Z",
                          "updated_at": "2023-04-21T13:14:39.826Z"
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/roles/7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for roles given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for roles given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Role.",
        "operationId": "updateRole",
        "summary": "Update Role",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Role to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Role.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRole"
              },
              "example": {
                "data": {
                  "type": "role",
                  "attributes": {
                    "name": "Designer",
                    "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                    "permissions": [
                      "group.create",
                      "group.destroy",
                      "group.show",
                      "group.update",
                      "role.create",
                      "role.destroy",
                      "role.show",
                      "role.update",
                      "automation.create"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "examples": {
                  "Role": {
                    "summary": "Role",
                    "value": {
                      "data": {
                        "id": "7",
                        "type": "role",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "permissions": [
                            "group.create",
                            "group.destroy",
                            "group.show",
                            "group.update",
                            "role.create",
                            "role.destroy",
                            "role.show",
                            "role.update"
                          ],
                          "active": true,
                          "created_at": "2023-04-21T13:14:48.425Z",
                          "updated_at": "2023-04-21T13:14:48.830Z"
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/roles/7"
                        }
                      }
                    }
                  },
                  "adding permissions to existing role": {
                    "summary": "adding permissions to existing role",
                    "value": {
                      "data": {
                        "id": "7",
                        "type": "role",
                        "attributes": {
                          "display_name": "Designer",
                          "name": "Designer",
                          "description": "Eveniet laudantium perspiciatis. Id eaque omnis. Nesciunt est est.",
                          "permissions": [
                            "group.create",
                            "group.destroy",
                            "group.show",
                            "group.update",
                            "role.create",
                            "role.destroy",
                            "role.show",
                            "role.update",
                            "automation.create"
                          ],
                          "active": true,
                          "created_at": "2023-04-21T13:14:49.151Z",
                          "updated_at": "2023-04-21T13:14:49.523Z"
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/roles/7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Name can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Role.",
        "operationId": "deleteRole",
        "summary": "Delete Role",
        "tags": [
          "roles"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Role to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/samples": {
      "get": {
        "description": "Get a list of existing Samples.",
        "operationId": "getSamples",
        "summary": "Get Samples",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Sample attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SamplesFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SamplesResponse"
                },
                "examples": {
                  "List of Samples": {
                    "summary": "List of Samples",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "sample",
                          "attributes": {
                            "name": "Unobtainium",
                            "identifier": "27a6a586-16c7-4c96-8122-a9079f113eb2",
                            "created_at": "2023-04-21T13:14:56.397Z",
                            "updated_at": "2023-04-21T13:14:56.397Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/samples/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "sample",
                          "attributes": {
                            "name": "Nihonium",
                            "identifier": "da03f8dd-7758-4e9c-bc4a-8a078f3e46ed",
                            "created_at": "2023-04-21T13:14:56.457Z",
                            "updated_at": "2023-04-21T13:14:56.457Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/samples/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of found Samples": {
                    "summary": "List of found Samples",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "sample",
                          "attributes": {
                            "name": "Unobtainium",
                            "identifier": "d4cdb6b6-9fce-4bea-b415-fae6121073db",
                            "created_at": "2023-04-21T13:14:57.257Z",
                            "updated_at": "2023-04-21T13:14:57.257Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/samples/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Sample.",
        "operationId": "createSample",
        "summary": "Create Sample",
        "tags": [
          "samples"
        ],
        "requestBody": {
          "description": "Create a Sample.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSample"
              },
              "example": {
                "data": {
                  "type": "sample",
                  "attributes": {
                    "identifier": "Test"
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "type": "collections",
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "sample",
                        "attributes": {
                          "identifier": "Test",
                          "custom_attributes": [],
                          "created_at": "2023-04-21T13:15:04.874Z",
                          "updated_at": "2023-04-21T13:15:04.874Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/samples/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for sample: `identifier`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "target_collection": [
                                "can't be blank"
                              ],
                              "identifier": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/samples/{id}": {
      "get": {
        "description": "Get a single Sample by its id.",
        "operationId": "getSample",
        "summary": "Get Sample",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Sample to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Sample attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "sample",
                        "attributes": {
                          "name": "Unobtainium",
                          "identifier": "75d5e3d8-fca6-4d20-9a9d-8afe9cfdfa61",
                          "custom_attributes": [],
                          "created_at": "2023-04-21T13:14:59.802Z",
                          "updated_at": "2023-04-21T13:14:59.802Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/samples/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Sample.",
        "operationId": "updateSample",
        "summary": "Update Sample",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Sample to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Sample.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSample"
              },
              "example": {
                "data": {
                  "type": "sample",
                  "attributes": {
                    "name": "Test"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "sample",
                        "attributes": {
                          "name": "Test",
                          "identifier": "7fae4181-ca45-4aaf-8108-0c0f7ab79a66",
                          "custom_attributes": [],
                          "created_at": "2023-04-21T13:15:12.137Z",
                          "updated_at": "2023-04-21T13:15:12.590Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/samples/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Sample.",
        "operationId": "deleteSample",
        "summary": "Delete Sample",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Sample to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schemas/attribute_types": {
      "get": {
        "description": "Fetch schema for list of valid attribute type.",
        "operationId": "getAttributeTypesSchema",
        "summary": "Get Attribute Types Schema",
        "tags": [
          "schemas"
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for list of valid AttributeType": {
                    "summary": "Schema for list of valid AttributeType",
                    "value": {
                      "definitions": {
                        "boolean": {
                          "type": "boolean",
                          "default": false
                        },
                        "date": {
                          "type": "string",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "datetime": {
                          "type": "string",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "file": {
                          "properties": {
                            "file": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "file": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        },
                        "number": {
                          "type": "number"
                        },
                        "physicalQuantity": {
                          "properties": {
                            "number": {
                              "type": "number"
                            },
                            "unit": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "plot": {
                          "properties": {
                            "data": {
                              "items": {
                                "properties": {
                                  "x": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "y": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "default": [
                                {
                                  "x": [
                                    0,
                                    60000
                                  ],
                                  "y": [
                                    0,
                                    0
                                  ],
                                  "fill": "tozeroy",
                                  "line": {
                                    "shape": "hv"
                                  }
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "relation": {
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "oneOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "integer"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ]
                                }
                              ]
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "string": {
                          "maxLength": 100,
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        },
                        "duration": {
                          "type": "number"
                        },
                        "temperatureCurve": {
                          "items": {
                            "properties": {
                              "mode": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "ui_definitions": {
                        "string": {
                          "ui:field": "CustomStringField"
                        },
                        "number": {
                          "ui:field": "CustomNumberField"
                        },
                        "boolean": {
                          "ui:field": "CheckboxField"
                        },
                        "datetime": {
                          "ui:field": "DateTimePickerField"
                        },
                        "date": {
                          "ui:field": "DatePickerField"
                        },
                        "text": {
                          "ui:field": "CustomTextField",
                          "ui:options": {
                            "rows": 6
                          }
                        },
                        "relation": {
                          "ui:field": "RelationField"
                        },
                        "physicalQuantity": {
                          "ui:field": "PhysicalQuantityField"
                        },
                        "plot": {
                          "ui:field": "PlotField"
                        },
                        "image": {
                          "ui:field": "FileAttributeField",
                          "ui:options": {
                            "accepted": "image/*"
                          }
                        },
                        "file": {
                          "ui:field": "FileAttributeField"
                        },
                        "duration": {
                          "ui:field": "DurationField"
                        },
                        "temperatureCurve": {
                          "ui:field": "TemperatureCurveField"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/schemas/device_drivers/{id}": {
      "get": {
        "description": "Fetch schema for device driver with certain id.",
        "operationId": "getDeviceDriverSchema",
        "summary": "Get Device Driver Schema",
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device Driver."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for Device Driver": {
                    "summary": "Schema for Device Driver",
                    "value": {
                      "schema": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "title": "Parameters for driver-webcam",
                        "type": "object",
                        "required": [
                          "resolution"
                        ],
                        "properties": {
                          "resolution": {
                            "type": "string",
                            "enum": [
                              "640x480",
                              "800x600",
                              "1280x720",
                              "1920x1080"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schemas/types/{type}": {
      "get": {
        "description": "Fetch schema for element type :type.",
        "operationId": "getTypesSchema",
        "summary": "Get Types Schema",
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type name."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for Element Type": {
                    "summary": "Schema for Element Type",
                    "value": {
                      "schema": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "title": "Button",
                        "description": "Button to send a command to a device with or without parameters.",
                        "category": "controls",
                        "type": "object",
                        "required": [
                          "type",
                          "parameterizedCommand"
                        ],
                        "properties": {
                          "type": {
                            "enum": [
                              "Button"
                            ],
                            "type": "string"
                          },
                          "parameterizedCommand": {
                            "type": "object",
                            "required": [
                              "device",
                              "title"
                            ],
                            "properties": {
                              "device": {
                                "type": "number"
                              },
                              "title": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "defaults": {
                          "w": {
                            "default": 1
                          },
                          "h": {
                            "default": 1
                          },
                          "minW": {
                            "enum": [
                              1
                            ],
                            "default": 1
                          },
                          "minH": {
                            "enum": [
                              1
                            ],
                            "default": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secret_accesses": {
      "get": {
        "description": "Get a list of existing Secret Accesses.",
        "operationId": "getSecretAccesses",
        "summary": "Get Secret Accesses",
        "tags": [
          "secret_accesses"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Secret Access attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SecretAccessesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `secret`, `resource`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessesResponse"
                },
                "examples": {
                  "List of Secret Accesses": {
                    "summary": "List of Secret Accesses",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "secret_access",
                          "attributes": {
                            "id": 1,
                            "secret_id": 1,
                            "resource_type": "WorkflowTemplate",
                            "resource_id": 1,
                            "status": "pending",
                            "key": "secret-1"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secret_accesses/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "secret_access",
                          "attributes": {
                            "id": 2,
                            "secret_id": 1,
                            "resource_type": "WorkflowTemplate",
                            "resource_id": 2,
                            "status": "pending",
                            "key": "secret-1"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secret_accesses/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "secret_access",
                          "attributes": {
                            "id": 3,
                            "secret_id": 2,
                            "resource_type": "WorkflowTemplate",
                            "resource_id": 1,
                            "status": "pending",
                            "key": "secret-2"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secret_accesses/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          2,
                          3
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong secret_accesses attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secret_accesses given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secret_accesses given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a SecretAccess.",
        "operationId": "createSecretAccess",
        "summary": "Create Secret Access",
        "tags": [
          "secret_accesses"
        ],
        "requestBody": {
          "description": "Create a SecretAccess.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecretAccess"
              },
              "example": {
                "data": {
                  "type": "secret_access",
                  "attributes": {
                    "secret_id": "1",
                    "resource_id": "1",
                    "resource_type": "WorkflowTemplate",
                    "status": "rejected"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessResponse"
                },
                "examples": {
                  "SecretAccess": {
                    "summary": "SecretAccess",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "secret_access",
                        "attributes": {
                          "id": 1,
                          "secret_id": 1,
                          "resource_type": "WorkflowTemplate",
                          "resource_id": 1,
                          "status": "rejected",
                          "key": "secret-13"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secret_accesses/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/secret_accesses/{id}": {
      "patch": {
        "description": "Update a SecretAccess.",
        "operationId": "updateSecretAccess",
        "summary": "Update Secret Access",
        "tags": [
          "secret_accesses"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a SecretAccess to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a SecretAccess.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecretAccess"
              },
              "example": {
                "data": {
                  "type": "secret_access",
                  "attributes": {
                    "status": "approved"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessResponse"
                },
                "examples": {
                  "SecretAccess": {
                    "summary": "SecretAccess",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "secret_access",
                        "attributes": {
                          "id": 1,
                          "secret_id": 1,
                          "resource_type": "WorkflowTemplate",
                          "resource_id": 1,
                          "status": "approved",
                          "key": "secret-20"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secret_accesses/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "description": "Get a list of existing Secrets.",
        "operationId": "getSecrets",
        "summary": "Get Secrets",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Secret attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SecretsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretsResponse"
                },
                "examples": {
                  "List of Secrets [CUB-3790]": {
                    "summary": "List of Secrets [CUB-3790]",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "secret",
                          "attributes": {
                            "id": 1,
                            "description": "Nothing to see here",
                            "owner_id": 1,
                            "key": "secret-28",
                            "created_at": "2023-04-21T13:15:47.474Z",
                            "updated_at": "2023-04-21T13:15:47.474Z",
                            "value": "***rse",
                            "scope": "personal"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secrets/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "secret",
                          "attributes": {
                            "id": 2,
                            "description": "Nothing to see here",
                            "owner_id": null,
                            "key": "secret-29",
                            "created_at": "2023-04-21T13:15:47.477Z",
                            "updated_at": "2023-04-21T13:15:47.477Z",
                            "value": "***rse",
                            "scope": "organisation"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secrets/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of Secrets [CUB-3789]": {
                    "summary": "List of Secrets [CUB-3789]",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "secret",
                          "attributes": {
                            "id": 2,
                            "description": "Nothing to see here",
                            "owner_id": null,
                            "key": "secret-31",
                            "created_at": "2023-04-21T13:15:48.079Z",
                            "updated_at": "2023-04-21T13:15:48.079Z",
                            "value": "***rse",
                            "scope": "organisation"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secrets/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "secret",
                          "attributes": {
                            "id": 3,
                            "description": "Nothing to see here",
                            "owner_id": 2,
                            "key": "secret-32",
                            "created_at": "2023-04-21T13:15:48.080Z",
                            "updated_at": "2023-04-21T13:15:48.080Z",
                            "value": "***rse",
                            "scope": "personal"
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/secrets/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong secrets attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secrets given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secrets given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Secret.",
        "operationId": "createSecret",
        "summary": "Create Secret",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "description": "Create a Secret.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecret"
              },
              "example": {
                "data": {
                  "type": "secret",
                  "attributes": {
                    "description": "Organisation Secret",
                    "value": "Secret Value",
                    "key": "org-secret",
                    "scope": "organisation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                },
                "examples": {
                  "Personal Secret": {
                    "summary": "Personal Secret",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "secret",
                        "attributes": {
                          "id": 3,
                          "description": "My Secret",
                          "owner_id": 1,
                          "key": "my-key",
                          "created_at": "2023-04-21T13:15:57.657Z",
                          "updated_at": "2023-04-21T13:15:57.657Z",
                          "value": "***lue",
                          "scope": "personal"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secrets/3"
                        }
                      }
                    }
                  },
                  "Organisation Secret": {
                    "summary": "Organisation Secret",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "secret",
                        "attributes": {
                          "id": 3,
                          "description": "Organisation Secret",
                          "key": "org-secret",
                          "created_at": "2023-04-21T13:15:58.590Z",
                          "updated_at": "2023-04-21T13:15:58.590Z",
                          "value": "***lue",
                          "scope": "organisation"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secrets/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for secret: `key`, `value`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "value": [
                                "can't be blank"
                              ],
                              "key": [
                                "can't be blank",
                                "may only consist of alphanumeric characters, hyphens, or underscores"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error because of a missed scope": {
                    "summary": "Forbidden Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/secrets/{id}": {
      "get": {
        "description": "Get a single Secret by its id.",
        "operationId": "getSecret",
        "summary": "Get Secret",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Secret to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Secret attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                },
                "examples": {
                  "Secret": {
                    "summary": "Secret",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "secret",
                        "attributes": {
                          "id": 2,
                          "description": "Nothing to see here",
                          "key": "secret-44",
                          "created_at": "2023-04-21T13:15:51.769Z",
                          "updated_at": "2023-04-21T13:15:51.769Z",
                          "value": "***rse",
                          "scope": "organisation"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secrets/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secrets given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for secrets given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Secret.",
        "operationId": "updateSecret",
        "summary": "Update Secret",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Secret to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Secret.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecret"
              },
              "example": {
                "data": {
                  "type": "secret",
                  "attributes": {
                    "description": "New secret description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponse"
                },
                "examples": {
                  "Secret": {
                    "summary": "Secret",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "secret",
                        "attributes": {
                          "id": 1,
                          "description": "New secret description",
                          "owner_id": 1,
                          "key": "secret-75",
                          "created_at": "2023-04-21T13:16:04.810Z",
                          "updated_at": "2023-04-21T13:16:05.205Z",
                          "value": "***rse",
                          "scope": "personal"
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/secrets/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Secret.",
        "operationId": "deleteSecret",
        "summary": "Delete Secret",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Secret to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signatures": {
      "get": {
        "description": "Get a list of existing Signatures.",
        "operationId": "getSignatures",
        "summary": "Get Signatures",
        "tags": [
          "signatures"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Signature attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SignaturesFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignaturesResponse"
                },
                "examples": {
                  "List of Signatures": {
                    "summary": "List of Signatures",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "signature",
                          "attributes": {
                            "id": 1,
                            "user_id": 1,
                            "resource_type": "WorkflowRun",
                            "resource_id": 1,
                            "signature": {
                              "signatures": [],
                              "user_id": 1,
                              "user_full_name": "Reed McGlynn",
                              "resource": [
                                {}
                              ]
                            },
                            "digest": "99dd9487d9f7238ce2837cc6a255dcd51c65b26107dc087c5294361511ccc177",
                            "created_at": "2023-04-21T13:16:14.263Z",
                            "updated_at": "2023-04-21T13:16:14.263Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/signatures/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong signatures attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Signature.",
        "operationId": "createSignature",
        "summary": "Create Signature",
        "tags": [
          "signatures"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a Signature.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignature"
              },
              "example": {
                "data": {
                  "type": "signature",
                  "attributes": {
                    "signature": {
                      "comment": "alles gut",
                      "timestamp": "2023-04-21T13:16:24Z"
                    }
                  },
                  "relationships": {
                    "resource": {
                      "data": {
                        "id": "1",
                        "type": "WorkflowRun"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResponse"
                },
                "examples": {
                  "Signature": {
                    "summary": "Signature",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "signature",
                        "attributes": {
                          "id": 1,
                          "user_id": 1,
                          "resource_type": "WorkflowRun",
                          "resource_id": 1,
                          "signature": {
                            "comment": "alles gut",
                            "timestamp": "2023-04-21T13:16:24Z",
                            "signatures": [],
                            "user_id": 1,
                            "user_full_name": "Reed McGlynn",
                            "resource": [
                              {}
                            ]
                          },
                          "digest": "bf9ba9a7ccc7ec809cc34feb66b18d99ea9d9c8e00dcc2f4a9130edd0ba998dd",
                          "created_at": "2023-04-21T13:16:24.679Z",
                          "updated_at": "2023-04-21T13:16:24.679Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/signatures/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for signature: `signature`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "resource": [
                                "must exist"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Signature Authentication Missing": {
                    "summary": "Signature Authentication Missing",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signatures/{id}": {
      "get": {
        "description": "Get a single Signature by its id.",
        "operationId": "getSignature",
        "summary": "Get Signature",
        "tags": [
          "signatures"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Signature to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Signature attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResponse"
                },
                "examples": {
                  "Signature": {
                    "summary": "Signature",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "signature",
                        "attributes": {
                          "id": 1,
                          "user_id": 1,
                          "resource_type": "WorkflowRun",
                          "resource_id": 1,
                          "signature": {
                            "signatures": [],
                            "user_id": 1,
                            "user_full_name": "Reed McGlynn",
                            "resource": [
                              {}
                            ]
                          },
                          "digest": "99dd9487d9f7238ce2837cc6a255dcd51c65b26107dc087c5294361511ccc177",
                          "created_at": "2023-04-21T13:16:18.967Z",
                          "updated_at": "2023-04-21T13:16:18.967Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/signatures/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Query parameter(s) `include` is not allowed for this resource.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smart_views": {
      "get": {
        "description": "Get a list of existing SmartViews.",
        "operationId": "getSmartViews",
        "summary": "Get Smart Views",
        "tags": [
          "smart_views"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of SmartView attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SmartViewsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewsResponse"
                },
                "examples": {
                  "List of SmartViews": {
                    "summary": "List of SmartViews",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "smart_view",
                          "attributes": {
                            "id": 1,
                            "display_name": "Smart View",
                            "name": "Smart View",
                            "settings": {
                              "filters": {
                                "types": [],
                                "contains": "Sample",
                                "statuses": [],
                                "show_hidden": false,
                                "collection_id": 2
                              },
                              "sorting": {
                                "page": 0,
                                "order": "desc",
                                "order_by": "search_docs.name",
                                "rows_per_page": "auto"
                              }
                            },
                            "category": "resource",
                            "created_at": "2023-04-21T13:16:30.691Z",
                            "updated_at": "2023-04-21T13:16:30.691Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/smart_views/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "smart_view",
                          "attributes": {
                            "id": 2,
                            "display_name": "Smart View 2",
                            "name": "Smart View 2",
                            "settings": {
                              "filters": {
                                "types": [],
                                "contains": "Sample",
                                "statuses": [],
                                "show_hidden": false,
                                "collection_id": 2
                              },
                              "sorting": {
                                "page": 0,
                                "order": "desc",
                                "order_by": "search_docs.name",
                                "rows_per_page": "auto"
                              }
                            },
                            "category": "audit_trail",
                            "created_at": "2023-04-21T13:16:30.692Z",
                            "updated_at": "2023-04-21T13:16:30.692Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/smart_views/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong smart_views attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a SmartView.",
        "operationId": "createSmartView",
        "summary": "Create Smart View",
        "tags": [
          "smart_views"
        ],
        "requestBody": {
          "description": "Create a SmartView.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartView"
              },
              "example": {
                "data": {
                  "type": "smart_view",
                  "attributes": {
                    "name": "My Smart View",
                    "settings": {
                      "filters": {
                        "statuses": [
                          ""
                        ],
                        "contains": "My Sample",
                        "types": [
                          "sample"
                        ]
                      }
                    },
                    "category": "resource"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "smart_view",
                        "attributes": {
                          "id": 3,
                          "display_name": "My Smart View",
                          "name": "My Smart View",
                          "settings": {
                            "filters": {
                              "statuses": [
                                ""
                              ],
                              "contains": "My Sample",
                              "types": [
                                "sample"
                              ]
                            }
                          },
                          "category": "resource",
                          "created_at": "2023-04-21T13:16:37.741Z",
                          "updated_at": "2023-04-21T13:16:37.741Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/smart_views/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for smart_view: `settings`, `category`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ],
                              "settings": [
                                "can't be blank"
                              ],
                              "category": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/smart_views/{id}": {
      "get": {
        "description": "Get a single SmartView by its id.",
        "operationId": "getSmartView",
        "summary": "Get Smart View",
        "tags": [
          "smart_views"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of SmartView to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of SmartView attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "smart_view",
                        "attributes": {
                          "id": 1,
                          "display_name": "Smart View",
                          "name": "Smart View",
                          "settings": {
                            "filters": {
                              "types": [],
                              "contains": "Sample",
                              "statuses": [],
                              "show_hidden": false,
                              "collection_id": 2
                            },
                            "sorting": {
                              "page": 0,
                              "order": "desc",
                              "order_by": "search_docs.name",
                              "rows_per_page": "auto"
                            }
                          },
                          "category": "resource",
                          "created_at": "2023-04-21T13:16:33.677Z",
                          "updated_at": "2023-04-21T13:16:33.677Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/smart_views/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a SmartView.",
        "operationId": "updateSmartView",
        "summary": "Update Smart View",
        "tags": [
          "smart_views"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a SmartView to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a SmartView.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmartView"
              },
              "example": {
                "data": {
                  "type": "smart_view",
                  "attributes": {
                    "name": "My new name"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "smart_view",
                        "attributes": {
                          "id": 1,
                          "display_name": "My new name",
                          "name": "My new name",
                          "settings": {
                            "filters": {
                              "types": [],
                              "contains": "Sample",
                              "statuses": [],
                              "show_hidden": false,
                              "collection_id": 2
                            },
                            "sorting": {
                              "page": 0,
                              "order": "desc",
                              "order_by": "search_docs.name",
                              "rows_per_page": "auto"
                            }
                          },
                          "category": "resource",
                          "created_at": "2023-04-21T13:16:41.422Z",
                          "updated_at": "2023-04-21T13:16:41.747Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/smart_views/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a SmartView.",
        "operationId": "deleteSmartView",
        "summary": "Delete Smart View",
        "tags": [
          "smart_views"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a SmartView to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update_requests": {
      "get": {
        "description": "Get a list of existing UpdateRequests.",
        "operationId": "getUpdateRequests",
        "summary": "Get Update Requests",
        "tags": [
          "update_requests"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of UpdateRequest attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UpdateRequestsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestsResponse"
                },
                "examples": {
                  "List of UpdateRequests filtered by updatable": {
                    "summary": "List of UpdateRequests filtered by updatable",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "update_request",
                          "attributes": {
                            "id": 1,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2023-04-21T13:16:48.281Z",
                            "updated_at": "2023-04-21T13:16:48.281Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/update_requests/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "update_request",
                          "attributes": {
                            "id": 3,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2023-04-21T13:16:48.287Z",
                            "updated_at": "2023-04-21T13:16:48.287Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/update_requests/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of UpdateRequests filtered by context": {
                    "summary": "List of UpdateRequests filtered by context",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "update_request",
                          "attributes": {
                            "id": 1,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2023-04-21T13:16:49.200Z",
                            "updated_at": "2023-04-21T13:16:49.200Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/update_requests/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "update_request",
                          "attributes": {
                            "id": 3,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2023-04-21T13:16:49.205Z",
                            "updated_at": "2023-04-21T13:16:49.205Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/update_requests/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "update_request",
                          "attributes": {
                            "id": 4,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 12,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2023-04-21T13:16:49.206Z",
                            "updated_at": "2023-04-21T13:16:49.206Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/update_requests/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 3,
                        "recordsOrder": [
                          1,
                          3,
                          4
                        ],
                        "recordsSize": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong update_requests attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Missing parent attribute": {
                    "summary": "Missing parent attribute",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for update_requests: filter[update_requests][context_id] || filter[update_requests][updatable_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Not a single parent attribute": {
                    "summary": "Not a single parent attribute",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong update_requests attributes given for filtering: context_id, updatable_id.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update_requests/{id}": {
      "get": {
        "description": "Get a single UpdateRequest by its id.",
        "operationId": "getUpdateRequest",
        "summary": "Get Update Request",
        "tags": [
          "update_requests"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of UpdateRequest to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of UpdateRequest attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestResponse"
                },
                "examples": {
                  "UpdateRequest": {
                    "summary": "UpdateRequest",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "update_request",
                        "attributes": {
                          "id": 1,
                          "updatable_type": "WorkflowField",
                          "updatable_id": 11,
                          "context_type": "WorkflowRun",
                          "context_id": 1,
                          "object_changes": {
                            "value": "10mg"
                          },
                          "created_at": "2023-04-21T13:16:56.048Z",
                          "updated_at": "2023-04-21T13:16:56.048Z",
                          "patch_changes": []
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/update_requests/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Confirm an UpdateRequest.",
        "operationId": "updateUpdateRequest",
        "summary": "Update Update Request",
        "tags": [
          "update_requests"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of an UpdateRequest to confirm."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a UpdateRequest.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUpdateRequest"
              },
              "example": {
                "data": {
                  "type": "update_request"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "UpdateRequest": {
                    "summary": "UpdateRequest",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Change reason does not match the required pattern: ^(?!^(\\S)(?:\\s*\\1)+$)(?:[ \\t]*\\S[ \\t]*){5,}$",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an UpdateRequest.",
        "operationId": "deleteUpdateRequest",
        "summary": "Delete Update Request",
        "tags": [
          "update_requests"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a UpdateRequest to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get a list of existing Users.",
        "operationId": "getUsers",
        "summary": "Get Users",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of User attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UsersFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                },
                "examples": {
                  "List of Users": {
                    "summary": "List of Users",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "user",
                          "attributes": {
                            "uid": null,
                            "display_name": "Arturio Bode",
                            "username": "Terry-1800-31156",
                            "email": "ruby_ebert-1800@hamill.test",
                            "created_at": "2023-04-21T13:17:09.961Z",
                            "full_name": "Arturio Bode",
                            "slugs": [
                              "arturio-bode",
                              "terry-1800-31156"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:ruby_ebert-1800@hamill.test\">ruby_ebert-1800@hamill.test</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "initials": "AB",
                            "first_name": "Arturio",
                            "last_name": "Bode",
                            "title": null,
                            "contact_details": null,
                            "organisation_membership_id": 1
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "group"
                                }
                              ]
                            },
                            "roles": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "role"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/users/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "user",
                          "attributes": {
                            "uid": null,
                            "display_name": "Rowe-1801-47992",
                            "username": "Rowe-1801-47992",
                            "email": "kristofer_mayer-1801@schmeler.example",
                            "created_at": "2023-04-21T13:17:10.009Z",
                            "full_name": "Rowe-1801-47992",
                            "slugs": [
                              "rowe-1801-47992"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:kristofer_mayer-1801@schmeler.example\">kristofer_mayer-1801@schmeler.example</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "initials": null,
                            "first_name": null,
                            "last_name": null,
                            "title": null,
                            "contact_details": null,
                            "organisation_membership_id": 2
                          },
                          "relationships": {
                            "groups": {
                              "data": []
                            },
                            "roles": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/users/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "List of Users by id": {
                    "summary": "List of Users by id",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "user",
                          "attributes": {
                            "uid": null,
                            "display_name": "Rowe-1803-26067",
                            "username": "Rowe-1803-26067",
                            "email": "kristofer_mayer-1803@schmeler.example",
                            "created_at": "2023-04-21T13:17:10.546Z",
                            "full_name": "Rowe-1803-26067",
                            "slugs": [
                              "rowe-1803-26067"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:kristofer_mayer-1803@schmeler.example\">kristofer_mayer-1803@schmeler.example</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "initials": null,
                            "first_name": null,
                            "last_name": null,
                            "title": null,
                            "contact_details": null,
                            "organisation_membership_id": 2
                          },
                          "relationships": {
                            "groups": {
                              "data": []
                            },
                            "roles": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/users/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          2
                        ],
                        "recordsSize": 1
                      }
                    }
                  },
                  "List of Users by search queries": {
                    "summary": "List of Users by search queries",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "user",
                          "attributes": {
                            "uid": null,
                            "display_name": "Arturio Bode",
                            "username": "Terry-1804-27122",
                            "email": "ruby_ebert-1804@hamill.test",
                            "created_at": "2023-04-21T13:17:11.252Z",
                            "full_name": "Arturio Bode",
                            "slugs": [
                              "arturio-bode",
                              "terry-1804-27122"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:ruby_ebert-1804@hamill.test\">ruby_ebert-1804@hamill.test</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "initials": "AB",
                            "first_name": "Arturio",
                            "last_name": "Bode",
                            "title": null,
                            "contact_details": null,
                            "organisation_membership_id": 1
                          },
                          "relationships": {
                            "groups": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "group"
                                }
                              ]
                            },
                            "roles": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "role"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/users/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a single User by its id.",
        "operationId": "getUser",
        "summary": "Get User",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of User to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of User attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "User": {
                    "summary": "User",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "user",
                        "attributes": {
                          "display_name": "Arturio Bode",
                          "username": "Terry-1809-76408",
                          "email": "ruby_ebert-1809@hamill.test",
                          "created_at": "2023-04-21T13:17:14.179Z",
                          "full_name": "Arturio Bode",
                          "slugs": [
                            "arturio-bode",
                            "terry-1809-76408"
                          ],
                          "email_link": "<a href=\"mailto:ruby_ebert-1809@hamill.test\">ruby_ebert-1809@hamill.test</a>",
                          "initials": "AB",
                          "first_name": "Arturio",
                          "last_name": "Bode",
                          "organisation_membership_id": 1
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          },
                          "roles": {
                            "data": [
                              {
                                "id": "7",
                                "type": "role"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/users/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a User.",
        "operationId": "updateUser",
        "summary": "Update User",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a User to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a User.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "example": {
                "data": {
                  "type": "user",
                  "attributes": {
                    "username": "NewName"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "User": {
                    "summary": "User",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "user",
                        "attributes": {
                          "display_name": "Arturio Bode",
                          "username": "NewName",
                          "email": "ruby_ebert-1812@hamill.test",
                          "created_at": "2023-04-21T13:17:16.330Z",
                          "full_name": "Arturio Bode",
                          "slugs": [
                            "arturio-bode",
                            "terry-1812-84205"
                          ],
                          "email_link": "<a href=\"mailto:ruby_ebert-1812@hamill.test\">ruby_ebert-1812@hamill.test</a>",
                          "initials": "AB",
                          "first_name": "Arturio",
                          "last_name": "Bode",
                          "organisation_membership_id": 1
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          },
                          "roles": {
                            "data": [
                              {
                                "id": "7",
                                "type": "role"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/users/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/info": {
      "get": {
        "description": "Get the authenticated User information.",
        "operationId": "getUserInfo",
        "summary": "Get User Info",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of User attributes to be included in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "User": {
                    "summary": "User",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "user",
                        "attributes": {
                          "display_name": "Arturio Bode",
                          "username": "Terry-1807-94056",
                          "email": "ruby_ebert-1807@hamill.test",
                          "created_at": "2023-04-21T13:17:12.734Z",
                          "full_name": "Arturio Bode",
                          "slugs": [
                            "arturio-bode",
                            "terry-1807-94056"
                          ],
                          "email_link": "<a href=\"mailto:ruby_ebert-1807@hamill.test\">ruby_ebert-1807@hamill.test</a>",
                          "initials": "AB",
                          "first_name": "Arturio",
                          "last_name": "Bode"
                        },
                        "relationships": {
                          "groups": {
                            "data": [
                              {
                                "id": "7",
                                "type": "group"
                              }
                            ]
                          },
                          "roles": {
                            "data": [
                              {
                                "id": "7",
                                "type": "role"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/users/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Get a list of existing Versions.",
        "operationId": "getVersions",
        "summary": "Get Versions",
        "tags": [
          "versions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Version attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/VersionsFilter"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                },
                "examples": {
                  "List of Versions": {
                    "summary": "List of Versions",
                    "value": {
                      "data": [
                        {
                          "id": "187",
                          "type": "version",
                          "attributes": {
                            "key": "sample.create",
                            "description": "Sample Krypton (6a95de47-b413-467c-9cca-6eae288279c4) added.",
                            "context": {
                              "resource": {
                                "id": 1,
                                "name": "Krypton (6a95de47-b413-467c-9cca-6eae288279c4)",
                                "type": "Sample"
                              }
                            },
                            "changes": {
                              "id": [
                                {
                                  "description": [
                                    "`id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "name": [
                                {
                                  "description": [
                                    "`name` changed"
                                  ],
                                  "from": null,
                                  "to": "Krypton"
                                }
                              ],
                              "owner_id": [
                                {
                                  "description": [
                                    "`owner_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "identifier": [
                                {
                                  "description": [
                                    "`identifier` changed"
                                  ],
                                  "from": null,
                                  "to": "6a95de47-b413-467c-9cca-6eae288279c4"
                                }
                              ],
                              "organisation_id": [
                                {
                                  "description": [
                                    "`organisation_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ]
                            },
                            "change_reason": null,
                            "created_at": "2023-04-21T13:17:22.101Z",
                            "item_type": "Sample",
                            "item_id": 1,
                            "event_id": null
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/versions/187"
                          }
                        },
                        {
                          "id": "186",
                          "type": "version",
                          "attributes": {
                            "key": "collection_resource.create",
                            "description": "Krypton (6a95de47-b413-467c-9cca-6eae288279c4) added to Fantastic Bronze Wallet.",
                            "context": {
                              "resource": {
                                "id": 2,
                                "name": "Krypton (6a95de47-b413-467c-9cca-6eae288279c4)",
                                "type": "CollectionResource"
                              },
                              "collection": {
                                "id": 2,
                                "name": "Fantastic Bronze Wallet",
                                "type": "Collection"
                              }
                            },
                            "changes": {
                              "id": [
                                {
                                  "description": [
                                    "`id` changed"
                                  ],
                                  "from": null,
                                  "to": 2
                                }
                              ],
                              "resource_id": [
                                {
                                  "description": [
                                    "`resource_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "collection_id": [
                                {
                                  "description": [
                                    "`collection_id` changed"
                                  ],
                                  "from": null,
                                  "to": 2
                                }
                              ],
                              "resource_type": [
                                {
                                  "description": [
                                    "`resource_type` changed"
                                  ],
                                  "from": null,
                                  "to": "Sample"
                                }
                              ],
                              "organisation_id": [
                                {
                                  "description": [
                                    "`organisation_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "resource_search_doc_id": [
                                {
                                  "description": [
                                    "`resource_search_doc_id` changed"
                                  ],
                                  "from": null,
                                  "to": 4
                                }
                              ]
                            },
                            "change_reason": null,
                            "created_at": "2023-04-21T13:17:22.109Z",
                            "item_type": "CollectionResource",
                            "item_id": 2,
                            "event_id": null
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/versions/186"
                          }
                        },
                        {
                          "id": "189",
                          "type": "version",
                          "attributes": {
                            "key": "sample.create",
                            "description": "Sample Unobtainium (2286decc-7ea3-443f-92e3-d1467d959833) added.",
                            "context": {
                              "resource": {
                                "id": 2,
                                "name": "Unobtainium (2286decc-7ea3-443f-92e3-d1467d959833)",
                                "type": "Sample"
                              }
                            },
                            "changes": {
                              "id": [
                                {
                                  "description": [
                                    "`id` changed"
                                  ],
                                  "from": null,
                                  "to": 2
                                }
                              ],
                              "name": [
                                {
                                  "description": [
                                    "`name` changed"
                                  ],
                                  "from": null,
                                  "to": "Unobtainium"
                                }
                              ],
                              "owner_id": [
                                {
                                  "description": [
                                    "`owner_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "identifier": [
                                {
                                  "description": [
                                    "`identifier` changed"
                                  ],
                                  "from": null,
                                  "to": "2286decc-7ea3-443f-92e3-d1467d959833"
                                }
                              ],
                              "organisation_id": [
                                {
                                  "description": [
                                    "`organisation_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ]
                            },
                            "change_reason": null,
                            "created_at": "2023-04-21T13:17:22.123Z",
                            "item_type": "Sample",
                            "item_id": 2,
                            "event_id": null
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/versions/189"
                          }
                        },
                        {
                          "id": "188",
                          "type": "version",
                          "attributes": {
                            "key": "collection_resource.create",
                            "description": "Unobtainium (2286decc-7ea3-443f-92e3-d1467d959833) added to Fantastic Bronze Wallet.",
                            "context": {
                              "resource": {
                                "id": 3,
                                "name": "Unobtainium (2286decc-7ea3-443f-92e3-d1467d959833)",
                                "type": "CollectionResource"
                              },
                              "collection": {
                                "id": 2,
                                "name": "Fantastic Bronze Wallet",
                                "type": "Collection"
                              }
                            },
                            "changes": {
                              "id": [
                                {
                                  "description": [
                                    "`id` changed"
                                  ],
                                  "from": null,
                                  "to": 3
                                }
                              ],
                              "resource_id": [
                                {
                                  "description": [
                                    "`resource_id` changed"
                                  ],
                                  "from": null,
                                  "to": 2
                                }
                              ],
                              "collection_id": [
                                {
                                  "description": [
                                    "`collection_id` changed"
                                  ],
                                  "from": null,
                                  "to": 2
                                }
                              ],
                              "resource_type": [
                                {
                                  "description": [
                                    "`resource_type` changed"
                                  ],
                                  "from": null,
                                  "to": "Sample"
                                }
                              ],
                              "organisation_id": [
                                {
                                  "description": [
                                    "`organisation_id` changed"
                                  ],
                                  "from": null,
                                  "to": 1
                                }
                              ],
                              "resource_search_doc_id": [
                                {
                                  "description": [
                                    "`resource_search_doc_id` changed"
                                  ],
                                  "from": null,
                                  "to": 5
                                }
                              ]
                            },
                            "change_reason": null,
                            "created_at": "2023-04-21T13:17:22.130Z",
                            "item_type": "CollectionResource",
                            "item_id": 3,
                            "event_id": null
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/versions/188"
                          }
                        },
                        {
                          "id": "190",
                          "type": "version",
                          "attributes": {
                            "key": "sample.update",
                            "description": "Sample Updated (6a95de47-b413-467c-9cca-6eae288279c4) updated.",
                            "context": {
                              "resource": {
                                "id": 1,
                                "name": "Updated (6a95de47-b413-467c-9cca-6eae288279c4)",
                                "type": "Sample"
                              }
                            },
                            "changes": {
                              "name": [
                                {
                                  "description": [
                                    "`name` changed"
                                  ],
                                  "from": "Krypton",
                                  "to": "Updated"
                                }
                              ]
                            },
                            "change_reason": null,
                            "created_at": "2023-04-21T13:17:22.157Z",
                            "item_type": "Sample",
                            "item_id": 1,
                            "event_id": null
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/versions/190"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 5,
                        "recordsOrder": [
                          187,
                          186,
                          189,
                          188,
                          190
                        ],
                        "recordsSize": 5
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong versions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/{id}": {
      "get": {
        "description": "Get a single Version by its id.",
        "operationId": "getVersion",
        "summary": "Get Version",
        "tags": [
          "versions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Version to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Version attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                },
                "examples": {
                  "Version": {
                    "summary": "Version",
                    "value": {
                      "data": {
                        "id": "189",
                        "type": "version",
                        "attributes": {
                          "key": "sample.create",
                          "description": "Sample Unobtainium (358a98fc-e55b-429e-a15a-74dbf3e953d4) added.",
                          "context": {
                            "resource": {
                              "id": 2,
                              "name": "Unobtainium (358a98fc-e55b-429e-a15a-74dbf3e953d4)",
                              "type": "Sample"
                            }
                          },
                          "changes": {
                            "id": [
                              {
                                "description": [
                                  "`id` changed"
                                ],
                                "from": null,
                                "to": 2
                              }
                            ],
                            "name": [
                              {
                                "description": [
                                  "`name` changed"
                                ],
                                "from": null,
                                "to": "Unobtainium"
                              }
                            ],
                            "owner_id": [
                              {
                                "description": [
                                  "`owner_id` changed"
                                ],
                                "from": null,
                                "to": 1
                              }
                            ],
                            "identifier": [
                              {
                                "description": [
                                  "`identifier` changed"
                                ],
                                "from": null,
                                "to": "358a98fc-e55b-429e-a15a-74dbf3e953d4"
                              }
                            ],
                            "organisation_id": [
                              {
                                "description": [
                                  "`organisation_id` changed"
                                ],
                                "from": null,
                                "to": 1
                              }
                            ]
                          },
                          "created_at": "2023-04-21T13:17:26.009Z",
                          "item_type": "Sample",
                          "item_id": 2
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/versions/189"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/views/{id}": {
      "get": {
        "description": "Get a single View by its id.",
        "operationId": "getView",
        "summary": "Get View",
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of View to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of View attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `measurements`, `viewable`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "version": 2,
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 3,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:30.372Z",
                                      "2023-04-21T13:12:30.372Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3
                                  ]
                                },
                                "identifier": "7ed173d0-1657-443b-a07e-9431a6147618"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 3,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 1,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:30.372Z",
                                      "2023-04-21T13:12:30.372Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    2
                                  ]
                                },
                                "identifier": "8c61ba4b-1f9e-441a-8024-48e4ef73bc79"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 8,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 3,
                                    "x": 7,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 2,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:30.372Z",
                                      "2023-04-21T13:12:30.372Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1
                                  ]
                                },
                                "identifier": "b3db3667-2e0d-4bc2-91a8-d55a73e1c3c2"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 6,
                                    "w": 12,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "md": {
                                    "h": 6,
                                    "w": 10,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "sm": {
                                    "h": 6,
                                    "w": 8,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xs": {
                                    "h": 6,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xxs": {
                                    "h": 4,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  }
                                },
                                "settings": {
                                  "type": "LineChart",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:30.372Z",
                                      "2023-04-21T13:12:30.372Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3,
                                    2,
                                    1
                                  ]
                                },
                                "identifier": "9b678365-d4d3-4ca5-abf9-fa210f2a63e9"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {
                              "a78e91a4-924d-4fe8-99ad-b04354bea68d": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:03:51.023Z",
                                  "2022-05-02T07:58:51.023Z"
                                ],
                                "channels": [
                                  3,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "da9b384e-1567-4e9a-8475-fc0137d8d13e": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:03:51.023Z",
                                  "2022-05-02T07:58:51.023Z"
                                ],
                                "channels": [
                                  2,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "b1d12699-71cf-4ee1-9d7b-aa4a35d3f2c5": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:03:51.023Z",
                                  "2022-05-02T07:58:51.023Z"
                                ],
                                "channels": [
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "a65f5022-0e7b-4949-b7a2-68c3d482d6c1": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:03:51.023Z",
                                  "2022-05-02T07:58:51.023Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "cb0d6163-63b0-4412-af15-d97eff11ca8d": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:37.003Z",
                                  "2022-05-02T08:47:37.003Z"
                                ],
                                "channels": [
                                  3,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "87491858-b389-47e0-8575-db1f3a4206ef": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:37.003Z",
                                  "2022-05-02T08:47:37.003Z"
                                ],
                                "channels": [
                                  2,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "d0c289e1-41d0-4254-bf68-ec5fdb7f95d3": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:37.003Z",
                                  "2022-05-02T08:47:37.003Z"
                                ],
                                "channels": [
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "14d3a1af-1a89-47cf-b306-a020cd379c2e": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:37.003Z",
                                  "2022-05-02T08:47:37.003Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "45563c11-c798-4b5c-ac6d-02d32978eaf2": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:41.264Z",
                                  "2022-07-27T13:03:41.264Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "2b000644-994a-4f85-ac24-bd4a9d48232a": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:41.264Z",
                                  "2022-07-27T13:03:41.264Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "5a457eff-7d52-45be-bb1a-f49b9f65a030": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:41.264Z",
                                  "2022-07-27T13:03:41.264Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "f39fa8cf-f228-40d8-8467-f9d5b3e5603b": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:41.264Z",
                                  "2022-07-27T13:03:41.264Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "ce3e8b1b-5982-4569-b3fb-9db655302bf1": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T13:59:58.269Z",
                                  "2022-07-27T14:54:58.269Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "103872b3-4609-488b-96cf-a422c822db10": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T13:59:58.269Z",
                                  "2022-07-27T14:54:58.269Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "3fa38fb0-3ca6-4bbd-880e-6ba6f4a4d90b": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T13:59:58.269Z",
                                  "2022-07-27T14:54:58.269Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8ca6a5ea-218b-4ccd-b6c8-201e95594f38": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T13:59:58.269Z",
                                  "2022-07-27T14:54:58.269Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "5229c4c1-883f-4126-8a11-f32fa02e5676": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:14.602Z",
                                  "2022-07-28T17:23:14.602Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "4433d0db-d193-4778-aebe-50b03304bae3": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:14.602Z",
                                  "2022-07-28T17:23:14.602Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "51b3b403-00ce-4f9a-a0f0-45a77801b37e": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:14.602Z",
                                  "2022-07-28T17:23:14.602Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "834643da-8617-4682-a460-4b712c42f164": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:14.602Z",
                                  "2022-07-28T17:23:14.602Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "cec3d9f2-a4a0-4146-8bc9-e194998f67e7": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:15.997Z",
                                  "2022-08-03T17:02:15.997Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "311d8f48-7b00-497b-b5e4-4ed4990ad1b7": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:15.997Z",
                                  "2022-08-03T17:02:15.997Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "6f369d19-d8c3-4e31-bf71-255775732469": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:15.997Z",
                                  "2022-08-03T17:02:15.997Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "285bacad-d7fe-4f14-a145-c734faefeb34": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:15.997Z",
                                  "2022-08-03T17:02:15.997Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "80d5afec-b342-44d0-a830-c9de69de24f9": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:20.852Z",
                                  "2022-08-04T10:12:20.852Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "dc234846-8d29-44f6-817d-7615ade5ac42": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:20.852Z",
                                  "2022-08-04T10:12:20.852Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "989d8b6d-7cec-487b-9ca0-869b73347799": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:20.852Z",
                                  "2022-08-04T10:12:20.852Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "9bf8650d-24c6-4e50-9d8b-dadd1b972f48": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:20.852Z",
                                  "2022-08-04T10:12:20.852Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "043ad80b-928b-4d44-8b54-942ce2e8b548": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:12.655Z",
                                  "2022-08-08T12:38:12.655Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "e310f8ad-722c-42be-a960-d43812723855": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:12.655Z",
                                  "2022-08-08T12:38:12.655Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "f1e3856f-13f7-4cf7-8cc0-5217d9aa9291": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:12.655Z",
                                  "2022-08-08T12:38:12.655Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "30566e32-57e1-455b-be9f-fb1adf8e91fc": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:12.655Z",
                                  "2022-08-08T12:38:12.655Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "4979d97e-7233-4184-9f69-d1b075bf1676": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:02.297Z",
                                  "2022-09-14T11:41:02.297Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "cdd4f2ce-8851-41a0-91e4-578809adef46": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:02.297Z",
                                  "2022-09-14T11:41:02.297Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "1bcbfbb3-f792-40d8-815e-5bc9ff9e009c": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:02.297Z",
                                  "2022-09-14T11:41:02.297Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "ea0f7ddc-2de6-40bc-a15a-eb5532b9a613": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:02.297Z",
                                  "2022-09-14T11:41:02.297Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "d62639ec-a755-4bb1-b834-a298aee11c68": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:32.768Z",
                                  "2023-04-12T08:05:32.768Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "cbba66f2-9841-4364-90cd-fd855bfc6846": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:32.768Z",
                                  "2023-04-12T08:05:32.768Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "45072450-5637-4663-bde3-0a32976d8028": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:32.768Z",
                                  "2023-04-12T08:05:32.768Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8ba4fd14-65b0-4e00-bf74-573b3e3b6cfc": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:32.768Z",
                                  "2023-04-12T08:05:32.768Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "798d2acc-8e8f-46ba-84a6-71a89c47a089": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:05.852Z",
                                  "2023-04-13T04:21:05.852Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "fe79f939-5ebe-4cbb-8a6d-f672968efdac": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:05.852Z",
                                  "2023-04-13T04:21:05.852Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8d159b5b-aa73-48c6-a594-c3852de884b0": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:05.852Z",
                                  "2023-04-13T04:21:05.852Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "a5362df5-4798-48bc-b380-fd44e001d4a6": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:05.852Z",
                                  "2023-04-13T04:21:05.852Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "7ed173d0-1657-443b-a07e-9431a6147618": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:30.372Z",
                                  "2023-04-21T13:12:30.372Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8c61ba4b-1f9e-441a-8024-48e4ef73bc79": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:30.372Z",
                                  "2023-04-21T13:12:30.372Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "b3db3667-2e0d-4bc2-91a8-d55a73e1c3c2": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:30.372Z",
                                  "2023-04-21T13:12:30.372Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "9b678365-d4d3-4ca5-abf9-fa210f2a63e9": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:30.372Z",
                                  "2023-04-21T13:12:30.372Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              }
                            }
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "measurement"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/views/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a View.",
        "operationId": "updateView",
        "summary": "Update View",
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a View to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a View.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateView"
              },
              "example": {
                "data": {
                  "type": "view",
                  "attributes": {
                    "layout": {
                      "elements": [
                        {
                          "layouts": {
                            "lg": {
                              "i": "f085345a-0e47-4ea4-afcf-b2667505937d",
                              "moved": "false",
                              "static": "false"
                            }
                          },
                          "settings": {
                            "type": "Button",
                            "label": "send",
                            "device": "1",
                            "command": "send"
                          },
                          "identifier": "f085345a-0e47-4ea4-afcf-b2667505937d"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "i": "f085345a-0e47-4ea4-afcf-b2667505937d",
                                    "moved": "false",
                                    "static": "false"
                                  }
                                },
                                "settings": {
                                  "type": "Button",
                                  "label": "send",
                                  "device": "1",
                                  "command": "send"
                                },
                                "identifier": "f085345a-0e47-4ea4-afcf-b2667505937d"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {}
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "measurement"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/views/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/views/{id}/reset": {
      "post": {
        "description": "Reset the view to the original template.",
        "operationId": "createViewReset",
        "summary": "Create View Reset",
        "tags": [
          "view_resets"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of View to reset."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "version": 2,
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 3,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:39.919Z",
                                      "2023-04-21T13:12:39.919Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3
                                  ]
                                },
                                "identifier": "4c7fd812-73b8-4af9-a1e2-9e4a46cb1522"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 3,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 1,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:39.919Z",
                                      "2023-04-21T13:12:39.919Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    2
                                  ]
                                },
                                "identifier": "d09dcc9b-aa0e-4794-b2cd-109493a01b47"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 8,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 3,
                                    "x": 7,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 8,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 2,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:39.919Z",
                                      "2023-04-21T13:12:39.919Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1
                                  ]
                                },
                                "identifier": "3a3236a8-c170-41c2-b1dc-e4b301c2d2ce"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 6,
                                    "w": 12,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "md": {
                                    "h": 6,
                                    "w": 10,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "sm": {
                                    "h": 6,
                                    "w": 8,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xs": {
                                    "h": 6,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xxs": {
                                    "h": 4,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 3,
                                    "minW": 4
                                  }
                                },
                                "settings": {
                                  "type": "LineChart",
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2023-04-21T12:17:39.919Z",
                                      "2023-04-21T13:12:39.919Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3,
                                    2,
                                    1
                                  ]
                                },
                                "identifier": "7168bbc9-a6d1-404f-a6ac-ea4fb89477ba"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {
                              "eabf7c9c-0f15-4e5e-a151-07af80d9eb07": {
                                "type": "range",
                                "params": [
                                  "2022-04-27T17:21:16.996Z",
                                  "2022-04-27T18:16:16.996Z"
                                ],
                                "channels": [
                                  3,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "3bda0e0a-463f-4147-bcda-144a0be3ac96": {
                                "type": "range",
                                "params": [
                                  "2022-04-27T17:21:16.996Z",
                                  "2022-04-27T18:16:16.996Z"
                                ],
                                "channels": [
                                  2,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "ff3bacb2-8215-4f37-b1cf-70efd6fb4d12": {
                                "type": "range",
                                "params": [
                                  "2022-04-27T17:21:16.996Z",
                                  "2022-04-27T18:16:16.996Z"
                                ],
                                "channels": [
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "4ce558fc-8843-4707-8bee-3eb9702bf183": {
                                "type": "range",
                                "params": [
                                  "2022-04-27T17:21:16.996Z",
                                  "2022-04-27T18:16:16.996Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "74d8e199-d1ba-4114-b30b-19ac20a53a41": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:43.419Z",
                                  "2022-05-02T08:47:43.419Z"
                                ],
                                "channels": [
                                  3,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "18f706b2-49cb-47d1-848d-923f5cc88c37": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:43.419Z",
                                  "2022-05-02T08:47:43.419Z"
                                ],
                                "channels": [
                                  2,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "eb5c95ff-44c4-4494-b5c3-d6ec52fa30fe": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:43.419Z",
                                  "2022-05-02T08:47:43.419Z"
                                ],
                                "channels": [
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "1b955778-2d6f-431a-a9ff-8ce8aa4639d3": {
                                "type": "range",
                                "params": [
                                  "2022-05-02T07:52:43.419Z",
                                  "2022-05-02T08:47:43.419Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  4
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  4
                                ]
                              },
                              "87c9ec57-edbf-464d-9e91-4d357d058f2d": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:48.870Z",
                                  "2022-07-27T13:03:48.870Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "7ff2dd6b-d035-4b1f-8aaf-9b8d93d49916": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:48.870Z",
                                  "2022-07-27T13:03:48.870Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "019bf3f3-c38b-4870-95bd-e103b786d044": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:48.870Z",
                                  "2022-07-27T13:03:48.870Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8b7283ac-e171-4630-9a14-39e31aaa7328": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T12:08:48.870Z",
                                  "2022-07-27T13:03:48.870Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "734781fe-6ddd-4233-a9f4-dab9015c2ab9": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T14:00:05.916Z",
                                  "2022-07-27T14:55:05.916Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "39416d9b-23b3-469d-8812-1e7d66fe57fd": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T14:00:05.916Z",
                                  "2022-07-27T14:55:05.916Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "17b551b9-839c-4e22-bc00-f82b5e0c9f28": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T14:00:05.916Z",
                                  "2022-07-27T14:55:05.916Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "f06c4c3e-29fa-40e5-bc5a-94d7c9ff918b": {
                                "type": "range",
                                "params": [
                                  "2022-07-27T14:00:05.916Z",
                                  "2022-07-27T14:55:05.916Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "82f53caf-7405-49f5-86d3-7e77e182144d": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:22.150Z",
                                  "2022-07-28T17:23:22.150Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "e1e54ef0-2cbb-493c-a9ae-93d4015b6c68": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:22.150Z",
                                  "2022-07-28T17:23:22.150Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "21ea3878-6756-418e-b344-b7425a213d24": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:22.150Z",
                                  "2022-07-28T17:23:22.150Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "f5593db7-809a-47b6-bf10-a292c377926e": {
                                "type": "range",
                                "params": [
                                  "2022-07-28T16:28:22.150Z",
                                  "2022-07-28T17:23:22.150Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "21f7252e-64b0-4cd1-a9a4-1f34945ef943": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:24.673Z",
                                  "2022-08-03T17:02:24.673Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "7131015a-1ee5-4b78-9da2-5825a28096cb": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:24.673Z",
                                  "2022-08-03T17:02:24.673Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "3c89bedd-15e5-4089-ad9a-cc34fa35cbe8": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:24.673Z",
                                  "2022-08-03T17:02:24.673Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "9ba5bf46-9c6c-4fbc-95c6-855249a0e19d": {
                                "type": "range",
                                "params": [
                                  "2022-08-03T16:07:24.673Z",
                                  "2022-08-03T17:02:24.673Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "2dccdca5-f534-4773-a5da-508cccc9722b": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:28.249Z",
                                  "2022-08-04T10:12:28.249Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "bc8aeb85-5b18-4bb9-a980-ab9a78085466": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:28.249Z",
                                  "2022-08-04T10:12:28.249Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "35f123be-93e3-42bc-921a-d036c3dbe22e": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:28.249Z",
                                  "2022-08-04T10:12:28.249Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "e3d34d2e-e0cf-4eef-9695-9b4e7608a3d7": {
                                "type": "range",
                                "params": [
                                  "2022-08-04T09:17:28.249Z",
                                  "2022-08-04T10:12:28.249Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "fd6c3740-cb58-48e5-ba39-0d7afe7d4396": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:20.158Z",
                                  "2022-08-08T12:38:20.158Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "a7b92161-4d21-4dbc-a765-a5bcd598d526": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:20.158Z",
                                  "2022-08-08T12:38:20.158Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "86973dc5-ae7e-4e39-a16f-66ba854fec2f": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:20.158Z",
                                  "2022-08-08T12:38:20.158Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "1d79e2ff-3dbb-40a8-955e-dc09b04b6483": {
                                "type": "range",
                                "params": [
                                  "2022-08-08T11:43:20.158Z",
                                  "2022-08-08T12:38:20.158Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "54dd4cb4-012a-4f07-9e4f-fcad0a22fcc7": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:10.547Z",
                                  "2022-09-14T11:41:10.547Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "e7a6bed7-087f-4d62-9cf9-68ad4beb152e": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:10.547Z",
                                  "2022-09-14T11:41:10.547Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "27560b75-0e66-40d4-a502-ec7dd0ffb1dc": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:10.547Z",
                                  "2022-09-14T11:41:10.547Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "d65bfb72-8a8e-46ba-88e5-bc4dfed6b3f7": {
                                "type": "range",
                                "params": [
                                  "2022-09-14T10:46:10.547Z",
                                  "2022-09-14T11:41:10.547Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "97562924-b505-4c90-ac1c-4e255f7e3a38": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:44.163Z",
                                  "2023-04-12T08:05:44.163Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "985e0044-5207-4fda-a42b-92e199cd54fb": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:44.163Z",
                                  "2023-04-12T08:05:44.163Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "eceb97e8-fe32-43de-8e9a-4d214f2a9e78": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:44.163Z",
                                  "2023-04-12T08:05:44.163Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "9094e9ef-3c41-49c2-a541-5ae711a67dbd": {
                                "type": "range",
                                "params": [
                                  "2023-04-12T07:10:44.163Z",
                                  "2023-04-12T08:05:44.163Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "8a33fde2-89dc-4b78-8727-02d965e582e0": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:15.903Z",
                                  "2023-04-13T04:21:15.903Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "2191c6f1-3305-4539-b566-4624d4d2618f": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:15.903Z",
                                  "2023-04-13T04:21:15.903Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "0a130593-257c-427a-96fb-4dd5747b064f": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:15.903Z",
                                  "2023-04-13T04:21:15.903Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "b79a0680-5d39-42e0-a467-8e0c1f39de90": {
                                "type": "range",
                                "params": [
                                  "2023-04-13T03:26:15.903Z",
                                  "2023-04-13T04:21:15.903Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "4c7fd812-73b8-4af9-a1e2-9e4a46cb1522": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:39.919Z",
                                  "2023-04-21T13:12:39.919Z"
                                ],
                                "channels": [
                                  3,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "d09dcc9b-aa0e-4794-b2cd-109493a01b47": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:39.919Z",
                                  "2023-04-21T13:12:39.919Z"
                                ],
                                "channels": [
                                  2,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "3a3236a8-c170-41c2-b1dc-e4b301c2d2ce": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:39.919Z",
                                  "2023-04-21T13:12:39.919Z"
                                ],
                                "channels": [
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              },
                              "7168bbc9-a6d1-404f-a6ac-ea4fb89477ba": {
                                "type": "range",
                                "params": [
                                  "2023-04-21T12:17:39.919Z",
                                  "2023-04-21T13:12:39.919Z"
                                ],
                                "channels": [
                                  3,
                                  2,
                                  1,
                                  5
                                ],
                                "container": {
                                  "id": 2,
                                  "type": "View"
                                },
                                "status_channels": [
                                  5
                                ]
                              }
                            }
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "measurement"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/views/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{resource_type}/{resource_id}/visibility": {
      "patch": {
        "description": "Unhide Resource.",
        "operationId": "unhideResource",
        "summary": "Unhide Resource",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Hide Resource.",
        "operationId": "hideResource",
        "summary": "Hide Resource",
        "tags": [
          "collections"
        ],
        "parameters": [
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook_logs": {
      "get": {
        "description": "Get a list of existing WebhookLogs.",
        "operationId": "getWebhookLogs",
        "summary": "Get Webhook Logs",
        "tags": [
          "webhook_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookLog attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookLogsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookLogsResponse"
                },
                "examples": {
                  "List of WebhookLogs": {
                    "summary": "List of WebhookLogs",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "webhook_log",
                          "attributes": {
                            "id": 2,
                            "status": "200",
                            "response_message": null,
                            "response_body": null,
                            "trigger": null,
                            "payload": null,
                            "created_at": "2023-04-21T13:17:47.986Z",
                            "updated_at": "2023-04-21T13:17:47.986Z",
                            "container_type": "WorkflowRun",
                            "container_id": 1
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/webhook_logs/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "webhook_log",
                          "attributes": {
                            "id": 3,
                            "status": "200",
                            "response_message": null,
                            "response_body": null,
                            "trigger": null,
                            "payload": null,
                            "created_at": "2023-04-21T13:17:48.037Z",
                            "updated_at": "2023-04-21T13:17:48.037Z",
                            "container_type": "WebhookSubscription",
                            "container_id": 1
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/webhook_logs/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong webhook_logs attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook_logs/{id}": {
      "get": {
        "description": "Get a single WebhookLog by its id.",
        "operationId": "getWebhookLog",
        "summary": "Get Webhook Log",
        "tags": [
          "webhook_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WebhookLog to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookLog attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookLogResponse"
                },
                "examples": {
                  "WebhookLog": {
                    "summary": "WebhookLog",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "webhook_log",
                        "attributes": {
                          "id": 3,
                          "status": "200",
                          "created_at": "2023-04-21T13:17:52.033Z",
                          "updated_at": "2023-04-21T13:17:52.033Z",
                          "container_type": "WebhookSubscription",
                          "container_id": 1
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/webhook_logs/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook_subscriptions": {
      "get": {
        "description": "Get a list of existing WebhookSubscriptions.",
        "operationId": "getWebhookSubscriptions",
        "summary": "Get Webhook Subscriptions",
        "tags": [
          "webhook_subscriptions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookSubscription attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookSubscriptionsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionsResponse"
                },
                "examples": {
                  "List of WebhookSubscriptions": {
                    "summary": "List of WebhookSubscriptions",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "webhook_subscription",
                          "attributes": {
                            "display_name": "http://localhost:5000",
                            "active": true,
                            "url": "http://localhost:5000",
                            "triggers": [
                              "some.random.trigger"
                            ],
                            "created_at": "2023-04-21T13:17:56.704Z",
                            "updated_at": "2023-04-21T13:17:56.704Z",
                            "headers": {}
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/webhook_subscriptions/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "webhook_subscription",
                          "attributes": {
                            "display_name": "http://localhost:5000",
                            "active": true,
                            "url": "http://localhost:5000",
                            "triggers": [
                              "some.random.trigger"
                            ],
                            "created_at": "2023-04-21T13:17:56.718Z",
                            "updated_at": "2023-04-21T13:17:56.718Z",
                            "headers": {}
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/webhook_subscriptions/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong webhook_subscriptions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_subscriptions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a WebhookSubscription.",
        "operationId": "createWebhookSubscription",
        "summary": "Create Webhook Subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "requestBody": {
          "description": "Create a WebhookSubscription.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscription"
              },
              "example": {
                "data": {
                  "type": "webhook_subscription",
                  "attributes": {
                    "headers": {
                      "a": "b"
                    },
                    "url": "https://webhook.laboperator.com",
                    "triggers": [
                      "6"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "webhook_subscription",
                        "attributes": {
                          "display_name": "https://webhook.laboperator.com",
                          "active": true,
                          "url": "https://webhook.laboperator.com",
                          "triggers": [
                            "6"
                          ],
                          "created_at": "2023-04-21T13:18:02.690Z",
                          "updated_at": "2023-04-21T13:18:02.690Z",
                          "headers": {
                            "a": "b"
                          }
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/webhook_subscriptions/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for webhook_subscription: `url`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "url": [
                                "can't be blank"
                              ],
                              "triggers": [
                                "is too short (minimum is 1 character)"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/webhook_subscriptions/{id}": {
      "get": {
        "description": "Get a single WebhookSubscription by its id.",
        "operationId": "getWebhookSubscription",
        "summary": "Get Webhook Subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WebhookSubscription to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookSubscription attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "webhook_subscription",
                        "attributes": {
                          "display_name": "http://localhost:5000",
                          "active": true,
                          "url": "http://localhost:5000",
                          "triggers": [
                            "some.random.trigger"
                          ],
                          "created_at": "2023-04-21T13:17:59.339Z",
                          "updated_at": "2023-04-21T13:17:59.339Z",
                          "headers": {}
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "2",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/webhook_subscriptions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_subscriptions given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a WebhookSubscription.",
        "operationId": "updateWebhookSubscription",
        "summary": "Update Webhook Subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WebhookSubscription to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a WebhookSubscription.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscription"
              },
              "example": {
                "data": {
                  "type": "webhook_subscription",
                  "attributes": {
                    "headers": {
                      "a": "b"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "webhook_subscription",
                        "attributes": {
                          "display_name": "http://localhost:5000",
                          "active": true,
                          "url": "http://localhost:5000",
                          "triggers": [
                            "some.random.trigger"
                          ],
                          "created_at": "2023-04-21T13:18:06.697Z",
                          "updated_at": "2023-04-21T13:18:07.046Z",
                          "headers": {
                            "a": "b"
                          }
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "2",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/webhook_subscriptions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WebhookSubscription.",
        "operationId": "deleteWebhookSubscription",
        "summary": "Delete Webhook Subscription",
        "tags": [
          "webhook_subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WebhookSubscription to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_events": {
      "get": {
        "description": "Get a list of existing WorkflowEvents.",
        "operationId": "getWorkflowEvents",
        "summary": "Get Workflow Events",
        "tags": [
          "workflow_events"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowEvent attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowEventsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowEventsResponse"
                },
                "examples": {
                  "List of WorkflowEvents": {
                    "summary": "List of WorkflowEvents",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_event",
                          "attributes": {
                            "definition": {
                              "type": "add_step",
                              "payload": {
                                "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                                "fields": null,
                                "version": "1.0.0",
                                "fieldMapping": null
                              }
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_events attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Record a dynamic workflow modification event.",
        "operationId": "createWorkflowEvent",
        "summary": "Create Workflow Event",
        "tags": [
          "workflow_events"
        ],
        "requestBody": {
          "description": "Create a WorkflowEvent.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowEvent"
              },
              "example": {
                "data": {
                  "type": "workflow_event",
                  "attributes": {
                    "definition": {
                      "type": "add_step",
                      "payload": {
                        "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                        "version": "1.0.0"
                      }
                    }
                  },
                  "relationships": {
                    "workflow_run": {
                      "data": {
                        "type": "workflow_runs",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowEventResponse"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_event",
                        "attributes": {
                          "definition": {
                            "type": "add_step",
                            "payload": {
                              "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                              "version": "1.0.0"
                            }
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request": {
                    "summary": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Definition [{\"data\"=>{\"type\"=>\"add_step\"}, \"data_pointer\"=>\"\", \"schema\"=>{\"$schema\"=>\"http://json-schema.org/draft-07/schema#\", \"title\"=>\"Workflow Event Schema\", \"description\"=>\"A modification event done during a workflow execution.\", \"type\"=>\"object\", \"required\"=>[\"type\", \"payload\"], \"oneOf\"=>[{\"$ref\"=>\"#/definitions/workflow-event/add-step\"}, {\"$ref\"=>\"#/definitions/workflow-event/move-step\"}, {\"$ref\"=>\"#/definitions/workflow-event/remove-step\"}, {\"$ref\"=>\"#/definitions/workflow-event/resolve-if\"}, {\"$ref\"=>\"#/definitions/workflow-event/resolve-until\"}, {\"$ref\"=>\"#/definitions/workflow-event/resolve-while\"}, {\"$ref\"=>\"#/definitions/workflow-event/resolve-for-each\"}], \"definitions\"=>{\"schemaArray\"=>{\"type\"=>\"array\", \"minItems\"=>1, \"items\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}}, \"nonNegativeInteger\"=>{\"type\"=>\"integer\", \"minimum\"=>0}, \"nonNegativeIntegerDefault0\"=>{\"allOf\"=>[{\"$ref\"=>\"#/definitions/nonNegativeInteger\"}, {\"default\"=>0}]}, \"simpleTypes\"=>{\"enum\"=>[\"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\"]}, \"stringArray\"=>{\"type\"=>\"array\", \"items\"=>{\"type\"=>\"string\"}, \"uniqueItems\"=>true, \"default\"=>[]}, \"jsonSchemaDraft7\"=>{\"$schema\"=>\"http://json-schema.org/draft-07/schema#\", \"title\"=>\"Core schema meta-schema\", \"type\"=>[\"object\", \"boolean\"], \"properties\"=>{\"$id\"=>{\"type\"=>\"string\", \"format\"=>\"uri-reference\"}, \"$schema\"=>{\"type\"=>\"string\", \"format\"=>\"uri\"}, \"$ref\"=>{\"type\"=>\"string\", \"format\"=>\"uri-reference\"}, \"$comment\"=>{\"type\"=>\"string\"}, \"title\"=>{\"type\"=>\"string\"}, \"description\"=>{\"type\"=>\"string\"}, \"default\"=>true, \"readOnly\"=>{\"type\"=>\"boolean\", \"default\"=>false}, \"examples\"=>{\"type\"=>\"array\", \"items\"=>true}, \"multipleOf\"=>{\"type\"=>\"number\", \"exclusiveMinimum\"=>0}, \"maximum\"=>{\"type\"=>\"number\"}, \"exclusiveMaximum\"=>{\"type\"=>\"number\"}, \"minimum\"=>{\"type\"=>\"number\"}, \"exclusiveMinimum\"=>{\"type\"=>\"number\"}, \"maxLength\"=>{\"$ref\"=>\"#/definitions/nonNegativeInteger\"}, \"minLength\"=>{\"$ref\"=>\"#/definitions/nonNegativeIntegerDefault0\"}, \"pattern\"=>{\"type\"=>\"string\", \"format\"=>\"regex\"}, \"additionalItems\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"items\"=>{\"anyOf\"=>[{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, {\"$ref\"=>\"#/definitions/schemaArray\"}], \"default\"=>true}, \"maxItems\"=>{\"$ref\"=>\"#/definitions/nonNegativeInteger\"}, \"minItems\"=>{\"$ref\"=>\"#/definitions/nonNegativeIntegerDefault0\"}, \"uniqueItems\"=>{\"type\"=>\"boolean\", \"default\"=>false}, \"contains\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"maxProperties\"=>{\"$ref\"=>\"#/definitions/nonNegativeInteger\"}, \"minProperties\"=>{\"$ref\"=>\"#/definitions/nonNegativeIntegerDefault0\"}, \"required\"=>{\"$ref\"=>\"#/definitions/stringArray\"}, \"additionalProperties\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"definitions\"=>{\"type\"=>\"object\", \"additionalProperties\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"default\"=>{}}, \"properties\"=>{\"type\"=>\"object\", \"additionalProperties\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"default\"=>{}}, \"patternProperties\"=>{\"type\"=>\"object\", \"additionalProperties\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"propertyNames\"=>{\"format\"=>\"regex\"}, \"default\"=>{}}, \"dependencies\"=>{\"type\"=>\"object\", \"additionalProperties\"=>{\"anyOf\"=>[{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, {\"$ref\"=>\"#/definitions/stringArray\"}]}}, \"propertyNames\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"const\"=>true, \"enum\"=>{\"type\"=>\"array\", \"items\"=>true, \"minItems\"=>1, \"uniqueItems\"=>true}, \"type\"=>{\"anyOf\"=>[{\"$ref\"=>\"#/definitions/simpleTypes\"}, {\"type\"=>\"array\", \"items\"=>{\"$ref\"=>\"#/definitions/simpleTypes\"}, \"minItems\"=>1, \"uniqueItems\"=>true}]}, \"format\"=>{\"type\"=>\"string\"}, \"contentMediaType\"=>{\"type\"=>\"string\"}, \"contentEncoding\"=>{\"type\"=>\"string\"}, \"if\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"then\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"else\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}, \"allOf\"=>{\"$ref\"=>\"#/definitions/schemaArray\"}, \"anyOf\"=>{\"$ref\"=>\"#/definitions/schemaArray\"}, \"oneOf\"=>{\"$ref\"=>\"#/definitions/schemaArray\"}, \"not\"=>{\"$ref\"=>\"#/definitions/jsonSchemaDraft7\"}}, \"default\"=>true}, \"workflow-event\"=>{\"add-step\"=>{\"type\"=>\"object\", \"title\"=>\"AddStep Event\", \"description\"=>\"The event of adding a step to a running dynamic template.\\nThe added step will be appended as the last step of the run.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"add_step\"]}, \"payload\"=>{\"oneOf\"=>[{\"type\"=>\"object\", \"description\"=>\"Payload for externally defined step template\", \"required\"=>[\"uuid\", \"version\"], \"properties\"=>{\"uuid\"=>{\"$ref\"=>\"#/definitions/uuid\"}, \"version\"=>{\"$ref\"=>\"#/definitions/version\"}}}, {\"type\"=>\"object\", \"description\"=>\"Payload of locally defined step template\", \"required\"=>[\"step\"], \"properties\"=>{\"step\"=>{\"$ref\"=>\"#/definitions/member-name\"}}}]}}}, \"move-step\"=>{\"type\"=>\"object\", \"title\"=>\"MoveStep Event\", \"description\"=>\"The event of moving a step in a running dynamic template.\\nOnly steps which are not yet started can be moved.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"move_step\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"from\", \"to\"], \"properties\"=>{\"from\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"to\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}}}}}, \"remove-step\"=>{\"type\"=>\"object\", \"title\"=>\"RemoveStep Event\", \"description\"=>\"The event of removing a step from a running dynamic template.\\nOnly steps which are not yet started can be removed\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"remove_step\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}}}}}, \"resolve-if\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveIf Event\", \"description\"=>\"The event of resolving the condition in an `if` flow of steps.\\n\\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\\nOtherwise, the steps included in `else` will be unfolded.\\n\\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\\nno steps will be unfolded.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_if\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"resolve-until\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveUntil Event\", \"description\"=>\"The event of resolving the condition in a `loop-until` flow of steps.\\n\\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_until\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"resolve-while\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveWhile Event\", \"description\"=>\"The event of resolving the condition in a `while` flow of steps.\\n\\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_while\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"resolve-for-each\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveForEach Event\", \"description\"=>\"The event of resolving a single iteration of `for-each` flow of steps.\\n\\nThe iteration will continue up to and including the last item in the source array.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_for_each\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"iterator\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"iterator\"=>{\"type\"=>\"integer\"}}}}}}, \"uuid\"=>{\"type\"=>\"string\", \"title\"=>\"UUID\", \"description\"=>\"An RFC4122 compliant UUID.\\n\", \"pattern\"=>\"([a-f0-9]{8}-?[a-f0-9]{4}-?[1-5][a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}){1}\", \"examples\"=>[\"645afc8c-a553-4657-a0da-d93cb98d158b\"]}, \"version\"=>{\"type\"=>\"string\", \"title\"=>\"Version\", \"description\"=>\"A version that is a valid version tag according to the\\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\\nencourage you to follow the SemVer guidelines:\\n\\nGiven a version number MAJOR.MINOR.PATCH, increment the:\\n\\n1. MAJOR version when you make incompatible API changes,\\n2. MINOR version when you add functionality in a backwards-compatible\\n   manner, and\\n3. PATCH version when you make backwards-compatible bug fixes.\\n\", \"default\"=>\"1.0.0\", \"examples\"=>[\"1.0.0\"], \"pattern\"=>\"^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(-(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\\\.(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\\\+[0-9a-zA-Z-]+(\\\\.[0-9a-zA-Z-]+)*)?$\"}, \"member-name\"=>{\"type\"=>\"string\", \"title\"=>\"Member Name\", \"description\"=>\"A member name that is used as a reference elsewhere.\\nAllowed characters are lower \\\"a\\\" to \\\"z\\\", capital \\\"A\\\" to \\\"Z\\\", \\\"0\\\" to \\\"9\\\" and\\n\\\"-\\\" , \\\"_\\\". We recommend to consistently use either lowerCamelCase or\\nkebab-case. While snake_case is allowed, it has a chance of name collisions\\nwith internal values.\\n\", \"minLength\"=>3, \"maxLength\"=>60, \"pattern\"=>\"(?=^.{3,60}$)(^[a-zA-Z0-9]+(?:[-_]?[a-zA-Z0-9]+)*$)\", \"not\"=>{\"enum\"=>[\"command_response\", \"data_point\", \"do\", \"else\", \"flow\", \"if\", \"INTERNAL_STATE\", \"loop\", \"parallel\", \"step\", \"substep\", \"type\", \"until\", \"when\", \"while\", \"workflow\"]}, \"examples\"=>[\"myField\", \"my-field\", \"transportSampleToShaker\", \"transport_sample_to_shaker\"]}}}, \"schema_pointer\"=>\"\", \"type\"=>\"required\", \"details\"=>{\"missing_keys\"=>[\"payload\"]}}]",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "definition": [
                                [
                                  {
                                    "data": {
                                      "type": "add_step"
                                    },
                                    "data_pointer": "",
                                    "schema": {
                                      "$schema": "http://json-schema.org/draft-07/schema#",
                                      "title": "Workflow Event Schema",
                                      "description": "A modification event done during a workflow execution.",
                                      "type": "object",
                                      "required": [
                                        "type",
                                        "payload"
                                      ],
                                      "oneOf": [
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {}
                                      ],
                                      "definitions": {
                                        "schemaArray": {
                                          "type": "array",
                                          "minItems": 1,
                                          "items": {}
                                        },
                                        "nonNegativeInteger": {
                                          "type": "integer",
                                          "minimum": 0
                                        },
                                        "nonNegativeIntegerDefault0": {
                                          "allOf": [
                                            {},
                                            {
                                              "default": 0
                                            }
                                          ]
                                        },
                                        "simpleTypes": {
                                          "enum": [
                                            "array",
                                            "boolean",
                                            "integer",
                                            "null",
                                            "number",
                                            "object",
                                            "string"
                                          ]
                                        },
                                        "stringArray": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "uniqueItems": true,
                                          "default": []
                                        },
                                        "jsonSchemaDraft7": {
                                          "$schema": "http://json-schema.org/draft-07/schema#",
                                          "title": "Core schema meta-schema",
                                          "type": [
                                            "object",
                                            "boolean"
                                          ],
                                          "properties": {
                                            "$id": {
                                              "type": "string",
                                              "format": "uri-reference"
                                            },
                                            "$schema": {
                                              "type": "string",
                                              "format": "uri"
                                            },
                                            "$ref": {
                                              "type": "string",
                                              "format": "uri-reference"
                                            },
                                            "$comment": {
                                              "type": "string"
                                            },
                                            "title": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "default": true,
                                            "readOnly": {
                                              "type": "boolean",
                                              "default": false
                                            },
                                            "examples": {
                                              "type": "array",
                                              "items": true
                                            },
                                            "multipleOf": {
                                              "type": "number",
                                              "exclusiveMinimum": 0
                                            },
                                            "maximum": {
                                              "type": "number"
                                            },
                                            "exclusiveMaximum": {
                                              "type": "number"
                                            },
                                            "minimum": {
                                              "type": "number"
                                            },
                                            "exclusiveMinimum": {
                                              "type": "number"
                                            },
                                            "maxLength": {},
                                            "minLength": {},
                                            "pattern": {
                                              "type": "string",
                                              "format": "regex"
                                            },
                                            "additionalItems": {},
                                            "items": {
                                              "anyOf": [
                                                {},
                                                {}
                                              ],
                                              "default": true
                                            },
                                            "maxItems": {},
                                            "minItems": {},
                                            "uniqueItems": {
                                              "type": "boolean",
                                              "default": false
                                            },
                                            "contains": {},
                                            "maxProperties": {},
                                            "minProperties": {},
                                            "required": {},
                                            "additionalProperties": {},
                                            "definitions": {
                                              "type": "object",
                                              "additionalProperties": {},
                                              "default": {}
                                            },
                                            "properties": {
                                              "type": "object",
                                              "additionalProperties": {},
                                              "default": {}
                                            },
                                            "patternProperties": {
                                              "type": "object",
                                              "additionalProperties": {},
                                              "propertyNames": {
                                                "format": "regex"
                                              },
                                              "default": {}
                                            },
                                            "dependencies": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "anyOf": [
                                                  {},
                                                  {}
                                                ]
                                              }
                                            },
                                            "propertyNames": {},
                                            "const": true,
                                            "enum": {
                                              "type": "array",
                                              "items": true,
                                              "minItems": 1,
                                              "uniqueItems": true
                                            },
                                            "type": {
                                              "anyOf": [
                                                {},
                                                {
                                                  "type": "array",
                                                  "items": {},
                                                  "minItems": 1,
                                                  "uniqueItems": true
                                                }
                                              ]
                                            },
                                            "format": {
                                              "type": "string"
                                            },
                                            "contentMediaType": {
                                              "type": "string"
                                            },
                                            "contentEncoding": {
                                              "type": "string"
                                            },
                                            "if": {},
                                            "then": {},
                                            "else": {},
                                            "allOf": {},
                                            "anyOf": {},
                                            "oneOf": {},
                                            "not": {}
                                          },
                                          "default": true
                                        },
                                        "workflow-event": {
                                          "add-step": {
                                            "type": "object",
                                            "title": "AddStep Event",
                                            "description": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "add_step"
                                                ]
                                              },
                                              "payload": {
                                                "oneOf": [
                                                  {
                                                    "type": "object",
                                                    "description": "Payload for externally defined step template",
                                                    "required": [
                                                      "uuid",
                                                      "version"
                                                    ],
                                                    "properties": {
                                                      "uuid": {},
                                                      "version": {}
                                                    }
                                                  },
                                                  {
                                                    "type": "object",
                                                    "description": "Payload of locally defined step template",
                                                    "required": [
                                                      "step"
                                                    ],
                                                    "properties": {
                                                      "step": {}
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          "move-step": {
                                            "type": "object",
                                            "title": "MoveStep Event",
                                            "description": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "move_step"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "from",
                                                  "to"
                                                ],
                                                "properties": {
                                                  "from": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  },
                                                  "to": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "remove-step": {
                                            "type": "object",
                                            "title": "RemoveStep Event",
                                            "description": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "remove_step"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "pointer"
                                                ],
                                                "properties": {
                                                  "pointer": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "resolve-if": {
                                            "type": "object",
                                            "title": "ResolveIf Event",
                                            "description": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "resolve_if"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "pointer",
                                                  "resolved"
                                                ],
                                                "properties": {
                                                  "pointer": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  },
                                                  "resolved": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "resolve-until": {
                                            "type": "object",
                                            "title": "ResolveUntil Event",
                                            "description": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "resolve_until"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "pointer",
                                                  "resolved"
                                                ],
                                                "properties": {
                                                  "pointer": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  },
                                                  "resolved": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "resolve-while": {
                                            "type": "object",
                                            "title": "ResolveWhile Event",
                                            "description": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "resolve_while"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "pointer",
                                                  "resolved"
                                                ],
                                                "properties": {
                                                  "pointer": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  },
                                                  "resolved": {
                                                    "type": "boolean"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "resolve-for-each": {
                                            "type": "object",
                                            "title": "ResolveForEach Event",
                                            "description": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n",
                                            "properties": {
                                              "type": {
                                                "enum": [
                                                  "resolve_for_each"
                                                ]
                                              },
                                              "payload": {
                                                "type": "object",
                                                "required": [
                                                  "pointer",
                                                  "iterator"
                                                ],
                                                "properties": {
                                                  "pointer": {
                                                    "type": "string",
                                                    "pattern": "^/flow/"
                                                  },
                                                  "iterator": {
                                                    "type": "integer"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "uuid": {
                                          "type": "string",
                                          "title": "UUID",
                                          "description": "An RFC4122 compliant UUID.\n",
                                          "pattern": "([a-f0-9]{8}-?[a-f0-9]{4}-?[1-5][a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}){1}",
                                          "examples": [
                                            "645afc8c-a553-4657-a0da-d93cb98d158b"
                                          ]
                                        },
                                        "version": {
                                          "type": "string",
                                          "title": "Version",
                                          "description": "A version that is a valid version tag according to the\n[Semantic Versioning 2.0.0](https://semver.org) Specification. We\nencourage you to follow the SemVer guidelines:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\n1. MAJOR version when you make incompatible API changes,\n2. MINOR version when you add functionality in a backwards-compatible\n   manner, and\n3. PATCH version when you make backwards-compatible bug fixes.\n",
                                          "default": "1.0.0",
                                          "examples": [
                                            "1.0.0"
                                          ],
                                          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"
                                        },
                                        "member-name": {
                                          "type": "string",
                                          "title": "Member Name",
                                          "description": "A member name that is used as a reference elsewhere.\nAllowed characters are lower \"a\" to \"z\", capital \"A\" to \"Z\", \"0\" to \"9\" and\n\"-\" , \"_\". We recommend to consistently use either lowerCamelCase or\nkebab-case. While snake_case is allowed, it has a chance of name collisions\nwith internal values.\n",
                                          "minLength": 3,
                                          "maxLength": 60,
                                          "pattern": "(?=^.{3,60}$)(^[a-zA-Z0-9]+(?:[-_]?[a-zA-Z0-9]+)*$)",
                                          "not": {
                                            "enum": [
                                              "command_response",
                                              "data_point",
                                              "do",
                                              "else",
                                              "flow",
                                              "if",
                                              "INTERNAL_STATE",
                                              "loop",
                                              "parallel",
                                              "step",
                                              "substep",
                                              "type",
                                              "until",
                                              "when",
                                              "while",
                                              "workflow"
                                            ]
                                          },
                                          "examples": [
                                            "myField",
                                            "my-field",
                                            "transportSampleToShaker",
                                            "transport_sample_to_shaker"
                                          ]
                                        }
                                      }
                                    },
                                    "schema_pointer": "",
                                    "type": "required",
                                    "details": {
                                      "missing_keys": [
                                        "payload"
                                      ]
                                    }
                                  }
                                ]
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/workflow_fields": {
      "get": {
        "description": "Get a list of existing WorkflowFields.",
        "operationId": "getWorkflowFields",
        "summary": "Get Workflow Fields",
        "tags": [
          "workflow_fields"
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowFieldsFilter"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowField attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldsResponse"
                },
                "examples": {
                  "List of WorkflowFields": {
                    "summary": "List of WorkflowFields",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "someString",
                            "pointer": "/fields/someString",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "string",
                              "maxLength": 100,
                              "defaultValue": "Test"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.933Z",
                            "created_at": "2023-06-26T12:00:47.933Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": "Test"
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "balance",
                            "pointer": "/fields/balance",
                            "read_only": false,
                            "prepare": true,
                            "output": true,
                            "schema": {
                              "type": "relationship",
                              "prepare": true,
                              "resourceType": "devices"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.937Z",
                            "created_at": "2023-06-26T12:00:47.937Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "relationship",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "3",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "instrumentInstructions",
                            "pointer": "/fields/instrumentInstructions",
                            "read_only": true,
                            "prepare": true,
                            "output": true,
                            "schema": {
                              "type": "file",
                              "output": false,
                              "prepare": true,
                              "readOnly": true,
                              "mediaType": "application/my-instruments-config-file-type"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.941Z",
                            "created_at": "2023-06-26T12:00:47.941Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "file",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "4",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "actualWeight",
                            "pointer": "/fields/actualWeight",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "quantity",
                              "unit": "mg"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.944Z",
                            "created_at": "2023-06-26T12:00:47.944Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "quantity",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "5",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "actualVolume",
                            "pointer": "/fields/actualVolume",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "quantity",
                              "unit": "ml"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.947Z",
                            "created_at": "2023-06-26T12:00:47.947Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "quantity",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "6",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "density",
                            "pointer": "/fields/density",
                            "read_only": true,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "script",
                              "result": {
                                "type": "quantity",
                                "unit": "mg"
                              },
                              "script": "actualWeight / actualVolume",
                              "readOnly": true,
                              "scriptDependencies": [
                                "actualWeight",
                                "actualVolume"
                              ]
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.950Z",
                            "created_at": "2023-06-26T12:00:47.950Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "script",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "7",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "selectorResult",
                            "pointer": "/fields/selectorResult",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "string",
                              "hidden": true,
                              "maxLength": 100
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.962Z",
                            "created_at": "2023-06-26T12:00:47.962Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "8",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "iterator",
                            "pointer": "/fields/iterator",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "integer",
                              "hidden": true
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.975Z",
                            "created_at": "2023-06-26T12:00:47.975Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "9",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "collection",
                            "pointer": "/fields/collection",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [
                                "one",
                                "two",
                                "three"
                              ]
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:47.992Z",
                            "created_at": "2023-06-26T12:00:47.992Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": [
                              "one",
                              "two",
                              "three"
                            ]
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "10",
                          "type": "workflow_field",
                          "attributes": {
                            "title": "Internal State",
                            "identifier": "INTERNAL_STATE",
                            "pointer": "/fields/INTERNAL_STATE",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "object",
                              "title": "Internal State",
                              "hidden": true,
                              "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update.",
                              "defaultValue": {}
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:48.006Z",
                            "created_at": "2023-06-26T12:00:48.006Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": {}
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        },
                        {
                          "id": "11",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "MyField",
                            "pointer": "/fields/MyField",
                            "read_only": true,
                            "prepare": false,
                            "output": true,
                            "schema": {},
                            "hidden": null,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2023-06-26T12:00:48.135Z",
                            "created_at": "2023-06-26T12:00:48.135Z",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "value_type": "basic",
                            "value": ""
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": null
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 11,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11
                        ],
                        "recordsSize": 11
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_fields attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_fields given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_fields/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowField"
              }
            }
          }
        },
        "description": "Update a WorkflowField.",
        "operationId": "updateWorkflowField",
        "summary": "Update Workflow Field",
        "tags": [
          "workflow_fields"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowField to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldResponse"
                },
                "examples": {
                  "WorkflowField": {
                    "summary": "WorkflowField",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2023-06-26T12:00:57.648Z",
                          "created_at": "2023-06-26T12:00:57.351Z",
                          "change_reasons": {
                            "versionIds": {}
                          },
                          "value_type": "basic",
                          "value": "25"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  },
                  "Simple WorkflowField is updated with a provided reason": {
                    "summary": "Simple WorkflowField is updated with a provided reason",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2023-06-26T12:00:58.663Z",
                          "created_at": "2023-06-26T12:00:58.369Z",
                          "change_reasons": {
                            "versionIds": {
                              "/": 134
                            }
                          },
                          "value_type": "basic",
                          "value": "10mg"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  },
                  "Complex WorkflowField is updated with a provided reason": {
                    "summary": "Complex WorkflowField is updated with a provided reason",
                    "value": {
                      "data": {
                        "id": "12",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/myTableData",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2023-06-26T12:00:59.664Z",
                          "created_at": "2023-06-26T12:00:59.401Z",
                          "change_reasons": {
                            "versionIds": {
                              "/data/1/device/0/name": 135
                            }
                          },
                          "value_type": "basic",
                          "value": {
                            "data": [
                              {
                                "id": "1",
                                "device": [
                                  {
                                    "name": "R7100",
                                    "count": "2",
                                    "vendor": "Yijie Tech"
                                  }
                                ]
                              },
                              {
                                "id": "2",
                                "device": [
                                  {
                                    "name": "New Name",
                                    "count": "23",
                                    "vendor": "Kern"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Get a single WorkflowField by its id.",
        "operationId": "getWorkflowField",
        "summary": "Get Workflow Field",
        "tags": [
          "workflow_fields"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowField to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowField attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `field_scope`, `workflow_run`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldResponse"
                },
                "examples": {
                  "WorkflowField": {
                    "summary": "WorkflowField",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2023-06-26T12:00:52.341Z",
                          "created_at": "2023-06-26T12:00:52.341Z",
                          "change_reasons": {
                            "versionIds": {}
                          },
                          "value_type": "basic",
                          "value": ""
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_fields given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_runs": {
      "get": {
        "description": "Get a list of existing WorkflowRuns.",
        "operationId": "getWorkflowRuns",
        "summary": "Get Workflow Runs",
        "tags": [
          "workflow_runs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowRun attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowRunsFilter"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunsResponse"
                },
                "examples": {
                  "List of WorkflowRuns": {
                    "summary": "List of WorkflowRuns",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_run",
                          "attributes": {
                            "title": "My Premium Workflow 1.0.0 run #1",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "state": "pending",
                            "run_number": 1,
                            "collaborator_ids": [],
                            "created_at": "2023-06-26T12:01:05.484Z",
                            "updated_at": "2023-06-26T12:01:05.534Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "locked": false,
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                                "title": "My Premium Workflow",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "config": {
                                "contextInfoSettings": {
                                  "toggleButton": {
                                    "label": "Overflowing Context Toggle Button"
                                  },
                                  "contentPanel": {
                                    "color": "#002b56",
                                    "height": 140
                                  }
                                },
                                "reportHeader": "Experiment {{run.data.attributes.title}}"
                              },
                              "contextInfo": {
                                "pages": [
                                  {
                                    "title": "Global Info",
                                    "content": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "em",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "Once, if my memory serves me well, my life was a banquet where every heart revealed itself, where every wine flowed."
                                                }
                                              ]
                                            },
                                            {
                                              "type": "text",
                                              "value": " — Arthur Rimbaud"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              },
                              "behaviors": [
                                {
                                  "when": "run_start",
                                  "do": {
                                    "alert": {
                                      "title": "Starting!",
                                      "text": "Here we go!"
                                    }
                                  }
                                }
                              ],
                              "fields": {
                                "someString": {
                                  "type": "string",
                                  "maxLength": 100,
                                  "defaultValue": "Test"
                                },
                                "balance": {
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "prepare": true
                                },
                                "instrumentInstructions": {
                                  "type": "file",
                                  "mediaType": "application/my-instruments-config-file-type",
                                  "prepare": true,
                                  "readOnly": true,
                                  "output": false
                                },
                                "actualWeight": {
                                  "type": "quantity",
                                  "unit": "mg"
                                },
                                "actualVolume": {
                                  "type": "quantity",
                                  "unit": "ml"
                                },
                                "density": {
                                  "type": "script",
                                  "script": "actualWeight / actualVolume",
                                  "readOnly": true,
                                  "result": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  }
                                },
                                "selectorResult": {
                                  "type": "string",
                                  "hidden": true,
                                  "maxLength": 100
                                },
                                "iterator": {
                                  "type": "integer",
                                  "hidden": true
                                },
                                "collection": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "defaultValue": [
                                    "one",
                                    "two",
                                    "three"
                                  ]
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                },
                                "sample": {
                                  "type": "relationship",
                                  "resourceType": "samples"
                                }
                              },
                              "steps": {
                                "weighing": {
                                  "info": {
                                    "title": "Weighing"
                                  },
                                  "contextInfo": {
                                    "pages": [
                                      {
                                        "title": "Really Long Weighing Info Page Title",
                                        "content": {
                                          "type": "root",
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "tagName": "em",
                                                  "properties": {},
                                                  "children": [
                                                    {
                                                      "type": "text",
                                                      "value": "One chord is fine. Two chords is pushing it. Three chords and you're into jazz."
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " — Lou Reed"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "text",
                                              "value": "\n"
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "tagName": "img",
                                                  "properties": {
                                                    "src": "https://source.unsplash.com/600x400/?music",
                                                    "alt": "music"
                                                  },
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ],
                                          "data": {
                                            "quirksMode": false
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "fields": {
                                    "sample": {
                                      "type": "relationship",
                                      "resourceType": "samples"
                                    },
                                    "target": {
                                      "type": "quantity",
                                      "unit": "mg"
                                    },
                                    "actual": {
                                      "type": "quantity",
                                      "unit": "mg"
                                    },
                                    "SUBSTEP_0_TIMER": {
                                      "type": "timer",
                                      "defaultDuration": "5s",
                                      "hidden": true
                                    }
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Place the "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "sample"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " on the balance."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Your fancy markdown body with formatting, images and what not else!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "timer": "SUBSTEP_0_TIMER"
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Selector"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "selector": {
                                        "layout": "list",
                                        "result": "selectorResult",
                                        "title": "Treats",
                                        "description": {
                                          "type": "root",
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "You nailed that first substep. You deserve to treat yourself. Choose "
                                                },
                                                {
                                                  "type": "element",
                                                  "tagName": "del",
                                                  "properties": {},
                                                  "children": [
                                                    {
                                                      "type": "text",
                                                      "value": "one"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " "
                                                },
                                                {
                                                  "type": "element",
                                                  "tagName": "strong",
                                                  "properties": {},
                                                  "children": [
                                                    {
                                                      "type": "text",
                                                      "value": "multiple"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " options!"
                                                }
                                              ]
                                            }
                                          ],
                                          "data": {
                                            "quirksMode": false
                                          }
                                        },
                                        "multiSelection": true,
                                        "skipBehaviors": false,
                                        "options": [
                                          {
                                            "primary": "Red Hawk Cheese",
                                            "secondary": "Red Hawk is a type of American triple-crème aged cow's-milk cheese with a brine-washed rind produced by the Cowgirl Creamery in Point Reyes Station, California.\n",
                                            "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg/320px-Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg",
                                            "value": "cheese"
                                          },
                                          {
                                            "primary": "Red Wine",
                                            "secondary": "Wine comes in at the mouth. And love comes in at the eye; That’s all we shall know for truth, before we grow old and die.\n",
                                            "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Tempranillowine.jpg/320px-Tempranillowine.jpg",
                                            "value": "wine"
                                          },
                                          {
                                            "primary": "Espresso",
                                            "secondary": "The size can be a single, double, or triple, using a proportional amount of ground coffee, roughly 7, 14, and 21 grams; correspondingly sized filter baskets are used.\n",
                                            "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Doppio.jpg/320px-Doppio.jpg",
                                            "value": "espresso"
                                          }
                                        ]
                                      },
                                      "behaviors": [
                                        {
                                          "when": {
                                            "MANUAL": {
                                              "key": "selector_confirm"
                                            }
                                          },
                                          "do": [
                                            {
                                              "SET_FIELD": {
                                                "value": "data.value",
                                                "field": "selectorResult"
                                              }
                                            },
                                            "COMPLETE_SUBSTEP"
                                          ]
                                        }
                                      ]
                                    }
                                  ],
                                  "reportSummary": "{{template.steps.weighing.info.title}}: This is the information that will be generated by this step, when it's completed, in the report. We have a field reference here: {{someString}}. Completed by {{operator.data.attributes.full_name}}",
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    },
                                    {
                                      "title": "Start timer (implicit behavior)",
                                      "when": {
                                        "manual": {
                                          "key": "start-timer-manually",
                                          "identifier": "SUBSTEP_0_TIMER"
                                        }
                                      },
                                      "do": [
                                        "start_timer"
                                      ]
                                    },
                                    {
                                      "title": "Stop timer (implicit behavior)",
                                      "when": {
                                        "manual": {
                                          "key": "stop-timer-manually",
                                          "identifier": "SUBSTEP_0_TIMER"
                                        }
                                      },
                                      "do": [
                                        "stop_timer"
                                      ]
                                    },
                                    {
                                      "title": "Reset timer (implicit behavior)",
                                      "when": {
                                        "manual": {
                                          "key": "reset-timer-manually",
                                          "identifier": "SUBSTEP_0_TIMER"
                                        }
                                      },
                                      "do": [
                                        "reset_timer"
                                      ]
                                    }
                                  ]
                                },
                                "dosing": {
                                  "uuid": "b3fc8c2b-aa03-4ab7-9172-377ef38fd860",
                                  "version": "1.0.0",
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ],
                                  "missing": true
                                },
                                "stirring": {
                                  "info": {
                                    "title": "Stirring"
                                  },
                                  "contextInfo": {
                                    "pages": [
                                      {
                                        "title": "Dosing Info",
                                        "content": {
                                          "type": "root",
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "tagName": "em",
                                                  "properties": {},
                                                  "children": [
                                                    {
                                                      "type": "text",
                                                      "value": "I like to occasionally write an infinite loop to remind my computer who's boss."
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "text",
                                                  "value": " — Ben Awad"
                                                }
                                              ]
                                            }
                                          ],
                                          "data": {
                                            "quirksMode": false
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "reportSummary": "This is the report for the stirring step.",
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "The wheel on the bus goes round and round"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ]
                                },
                                "externalStep": {
                                  "info": {
                                    "title": "A Great Step",
                                    "description": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Add a fancy description here. It even supports "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "strong",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "Markdown"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "text",
                                              "value": "!"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  },
                                  "behaviors": [
                                    {
                                      "when": "ON_SUBSTEP_START",
                                      "do": {
                                        "notify": {
                                          "text": "Starting substep of externalStep",
                                          "variant": "info",
                                          "autoHideDuration": 50
                                        }
                                      }
                                    },
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ],
                                  "fields": {
                                    "sample": {
                                      "type": "string",
                                      "maxLength": 100
                                    },
                                    "powderDispenser": {
                                      "type": "relationship",
                                      "resourceType": "devices",
                                      "prepare": true
                                    }
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Load a "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "sample"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " into the "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "powderDispenser"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "secondary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Please, confirm when you are done."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "The sample will be gravimetrically placed in a "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "target"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " reaction tube."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "devices": [
                                        "powderDispenser"
                                      ],
                                      "behaviors": [
                                        {
                                          "title": "Start gravimetrical measurement",
                                          "when": "ON_SUBSTEP_START",
                                          "do": [
                                            {
                                              "SEND_COMMAND": {
                                                "device": "powderDose",
                                                "command": "GET_GRAVIMETRICAL_MEASUREMENT",
                                                "scope": "substep"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "title": "Record result",
                                          "when": {
                                            "ON_COMMAND_RESPONSE": {
                                              "device": "powderDose",
                                              "command": "GET_GRAVIMETRICAL_MEASUREMENT"
                                            }
                                          },
                                          "and": "data.value >= 9 && data.value <= 11",
                                          "do": [
                                            {
                                              "SET_FIELD": {
                                                "field": "actual",
                                                "value": "data.value"
                                              }
                                            },
                                            "COMPLETE_SUBSTEP"
                                          ],
                                          "else": [
                                            {
                                              "ALERT": {
                                                "title": "Tolerance Missed",
                                                "text": "Result is not within tolerance of 1 {{target.unit}} of the\ntarget of {{target}}. Repeat the step.\n"
                                              }
                                            },
                                            "REPEAT_STEP"
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Results after gravimetrical placement are recorded: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "actual"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": "ON_SUBSTEP_START",
                                          "do": [
                                            "COMPLETE_SUBSTEP",
                                            "COMPLETE_STEP"
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Send results to ELN"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": "ON_SUBSTEP_COMPLETE",
                                          "do": [
                                            {
                                              "webhook": {
                                                "url": "http://localhost:5000/__cypress__/webhook?status=200&body=6",
                                                "method": "post",
                                                "blocking": false,
                                                "headers": {
                                                  "content-type": "application/json"
                                                },
                                                "body": "{\n  \"registered_value\": \"{{someString}}\",\n  \"description\": \"some information goes here\"\n}\n",
                                                "onSuccess": {
                                                  "do": [
                                                    {
                                                      "SET_FIELD": {
                                                        "field": "actual",
                                                        "value": "data.value"
                                                      }
                                                    },
                                                    {
                                                      "webhook": {
                                                        "url": "http://localhost:5000/__cypress__/webhook?status=204"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "onError": {
                                                  "do": [
                                                    "REPEAT_SUBSTEP"
                                                  ]
                                                },
                                                "onCode": {
                                                  "404": {
                                                    "do": [
                                                      {
                                                        "ALERT": {
                                                          "title": "Not Found",
                                                          "text": "Ensure that you're using a valid url / endpoint"
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "418": {
                                                    "do": [
                                                      {
                                                        "ALERT": {
                                                          "title": "I'm a teapot",
                                                          "text": "For real! I'm a teapot"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "when": {
                                            "MANUAL": {
                                              "key": "alert_confirmed"
                                            }
                                          },
                                          "do": [
                                            "CONFIRM_ALERT"
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "alert": {
                                  "info": {
                                    "title": "Alert completed"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Ahoy, Matey!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "title": "Alert that we are done.",
                                      "when": "ON_STEP_START",
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "Finished!",
                                            "text": "We are done here."
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ]
                                },
                                "buttonStep": {
                                  "info": {
                                    "title": "A step with a handled button."
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "This is a step with a button."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "buttons": [
                                        {
                                          "label": "Click me",
                                          "key": "clickable-button"
                                        }
                                      ],
                                      "behaviors": [
                                        {
                                          "when": {
                                            "MANUAL": {
                                              "key": "clickable-button"
                                            }
                                          },
                                          "do": [
                                            "COMPLETE_SUBSTEP"
                                          ]
                                        }
                                      ]
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                {
                                  "weighing": {
                                    "fields": {
                                      "target": {
                                        "number": 100,
                                        "unit": "mg"
                                      }
                                    },
                                    "fieldMapping": {
                                      "actualWeight": "actual",
                                      "sample": "sample"
                                    }
                                  }
                                },
                                "buttonStep",
                                {
                                  "if": "true",
                                  "then": "alert",
                                  "else": [
                                    "alert",
                                    "buttonStep"
                                  ]
                                },
                                {
                                  "loop": [
                                    "weighing",
                                    "weighing"
                                  ],
                                  "until": "field1 > 20"
                                },
                                {
                                  "forEach": "iterator",
                                  "step": 1,
                                  "to": 10,
                                  "do": "weighing"
                                },
                                {
                                  "while": "true",
                                  "do": [
                                    "weighing",
                                    "weighing"
                                  ]
                                },
                                {
                                  "forEach": "iterator",
                                  "in": "collection",
                                  "do": "weighing"
                                },
                                {
                                  "externalStep": {
                                    "fields": {
                                      "sample": "MySample"
                                    },
                                    "fieldMapping": {
                                      "balance": "powderDispenser"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_template": {
                              "data": {
                                "id": "1",
                                "type": "workflow_template"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "workflow_steps": {
                              "data": []
                            },
                            "review": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_runs/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  },
                  "List of found WorkflowRuns": {
                    "summary": "List of found WorkflowRuns",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_run",
                          "attributes": {
                            "title": "My Premium Workflow 1.0.0 run #1",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "state": "pending",
                            "run_number": 1,
                            "collaborator_ids": [],
                            "created_at": "2023-06-26T12:01:06.599Z",
                            "updated_at": "2023-06-26T12:01:06.658Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "locked": false
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_template": {
                              "data": {
                                "id": "1",
                                "type": "workflow_template"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "workflow_steps": {
                              "data": []
                            },
                            "review": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_runs/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_runs attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a WorkflowRun.",
        "operationId": "createWorkflowRun",
        "summary": "Create Workflow Run",
        "tags": [
          "workflow_runs"
        ],
        "requestBody": {
          "description": "Create a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowRun"
              },
              "example": {
                "data": {
                  "type": "workflow_run",
                  "relationships": {
                    "collection": {
                      "data": {
                        "type": "collections",
                        "id": "2"
                      }
                    },
                    "workflow_template": {
                      "data": {
                        "type": "workflow_templates",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #2",
                          "state": "pending",
                          "run_number": 2,
                          "collaborator_ids": [
                            1
                          ],
                          "created_at": "2023-06-26T12:01:20.323Z",
                          "updated_at": "2023-06-26T12:01:20.390Z",
                          "custom_attributes": [],
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "locked": false
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "workflow_steps": {
                            "data": []
                          },
                          "review": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_runs/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/workflow_runs/{id}": {
      "get": {
        "description": "Get a single WorkflowRun by its id.",
        "operationId": "getWorkflowRun",
        "summary": "Get Workflow Run",
        "tags": [
          "workflow_runs"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowRun to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowRun attributes to be included in response."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `workflow_template`"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #1",
                          "state": "pending",
                          "run_number": 1,
                          "collaborator_ids": [],
                          "created_at": "2023-06-26T12:01:10.222Z",
                          "updated_at": "2023-06-26T12:01:10.279Z",
                          "custom_attributes": [],
                          "template": {
                            "schema_version": "0.0.1",
                            "info": {
                              "version": "1.0.0",
                              "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                              "title": "My Premium Workflow",
                              "description": "Add a fancy description here. It even supports __Markdown__!\n",
                              "author": {
                                "name": "Max Mustermann",
                                "email": "max.mustermann@company.com"
                              },
                              "slug": "my-premium-workflow"
                            },
                            "config": {
                              "contextInfoSettings": {
                                "toggleButton": {
                                  "label": "Overflowing Context Toggle Button"
                                },
                                "contentPanel": {
                                  "color": "#002b56",
                                  "height": 140
                                }
                              },
                              "reportHeader": "Experiment {{run.data.attributes.title}}"
                            },
                            "contextInfo": {
                              "pages": [
                                {
                                  "title": "Global Info",
                                  "content": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "em",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Once, if my memory serves me well, my life was a banquet where every heart revealed itself, where every wine flowed."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": " — Arthur Rimbaud"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            },
                            "behaviors": [
                              {
                                "when": "run_start",
                                "do": {
                                  "alert": {
                                    "title": "Starting!",
                                    "text": "Here we go!"
                                  }
                                }
                              }
                            ],
                            "fields": {
                              "someString": {
                                "type": "string",
                                "maxLength": 100,
                                "defaultValue": "Test"
                              },
                              "balance": {
                                "type": "relationship",
                                "resourceType": "devices",
                                "prepare": true
                              },
                              "instrumentInstructions": {
                                "type": "file",
                                "mediaType": "application/my-instruments-config-file-type",
                                "prepare": true,
                                "readOnly": true,
                                "output": false
                              },
                              "actualWeight": {
                                "type": "quantity",
                                "unit": "mg"
                              },
                              "actualVolume": {
                                "type": "quantity",
                                "unit": "ml"
                              },
                              "density": {
                                "type": "script",
                                "script": "actualWeight / actualVolume",
                                "readOnly": true,
                                "result": {
                                  "type": "quantity",
                                  "unit": "mg"
                                }
                              },
                              "selectorResult": {
                                "type": "string",
                                "hidden": true,
                                "maxLength": 100
                              },
                              "iterator": {
                                "type": "integer",
                                "hidden": true
                              },
                              "collection": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "defaultValue": [
                                  "one",
                                  "two",
                                  "three"
                                ]
                              },
                              "INTERNAL_STATE": {
                                "type": "object",
                                "title": "Internal State",
                                "hidden": true,
                                "defaultValue": {},
                                "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                              },
                              "sample": {
                                "type": "relationship",
                                "resourceType": "samples"
                              }
                            },
                            "steps": {
                              "weighing": {
                                "info": {
                                  "title": "Weighing"
                                },
                                "contextInfo": {
                                  "pages": [
                                    {
                                      "title": "Really Long Weighing Info Page Title",
                                      "content": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "em",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "One chord is fine. Two chords is pushing it. Three chords and you're into jazz."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " — Lou Reed"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "img",
                                                "properties": {
                                                  "src": "https://source.unsplash.com/600x400/?music",
                                                  "alt": "music"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "fields": {
                                  "sample": {
                                    "type": "relationship",
                                    "resourceType": "samples"
                                  },
                                  "target": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  },
                                  "actual": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  },
                                  "SUBSTEP_0_TIMER": {
                                    "type": "timer",
                                    "defaultDuration": "5s",
                                    "hidden": true
                                  }
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Place the "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "sample"
                                              },
                                              "children": []
                                            },
                                            {
                                              "type": "text",
                                              "value": " on the balance."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "description": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Your fancy markdown body with formatting, images and what not else!"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "confirm": true,
                                    "timer": "SUBSTEP_0_TIMER"
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Selector"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "confirm": true,
                                    "selector": {
                                      "layout": "list",
                                      "result": "selectorResult",
                                      "title": "Treats",
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "You nailed that first substep. You deserve to treat yourself. Choose "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "del",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "one"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "multiple"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " options!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "multiSelection": true,
                                      "skipBehaviors": false,
                                      "options": [
                                        {
                                          "primary": "Red Hawk Cheese",
                                          "secondary": "Red Hawk is a type of American triple-crème aged cow's-milk cheese with a brine-washed rind produced by the Cowgirl Creamery in Point Reyes Station, California.\n",
                                          "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg/320px-Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg",
                                          "value": "cheese"
                                        },
                                        {
                                          "primary": "Red Wine",
                                          "secondary": "Wine comes in at the mouth. And love comes in at the eye; That’s all we shall know for truth, before we grow old and die.\n",
                                          "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Tempranillowine.jpg/320px-Tempranillowine.jpg",
                                          "value": "wine"
                                        },
                                        {
                                          "primary": "Espresso",
                                          "secondary": "The size can be a single, double, or triple, using a proportional amount of ground coffee, roughly 7, 14, and 21 grams; correspondingly sized filter baskets are used.\n",
                                          "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Doppio.jpg/320px-Doppio.jpg",
                                          "value": "espresso"
                                        }
                                      ]
                                    },
                                    "behaviors": [
                                      {
                                        "when": {
                                          "MANUAL": {
                                            "key": "selector_confirm"
                                          }
                                        },
                                        "do": [
                                          {
                                            "SET_FIELD": {
                                              "value": "data.value",
                                              "field": "selectorResult"
                                            }
                                          },
                                          "COMPLETE_SUBSTEP"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "reportSummary": "{{template.steps.weighing.info.title}}: This is the information that will be generated by this step, when it's completed, in the report. We have a field reference here: {{someString}}. Completed by {{operator.data.attributes.full_name}}",
                                "behaviors": [
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  },
                                  {
                                    "title": "Start timer (implicit behavior)",
                                    "when": {
                                      "manual": {
                                        "key": "start-timer-manually",
                                        "identifier": "SUBSTEP_0_TIMER"
                                      }
                                    },
                                    "do": [
                                      "start_timer"
                                    ]
                                  },
                                  {
                                    "title": "Stop timer (implicit behavior)",
                                    "when": {
                                      "manual": {
                                        "key": "stop-timer-manually",
                                        "identifier": "SUBSTEP_0_TIMER"
                                      }
                                    },
                                    "do": [
                                      "stop_timer"
                                    ]
                                  },
                                  {
                                    "title": "Reset timer (implicit behavior)",
                                    "when": {
                                      "manual": {
                                        "key": "reset-timer-manually",
                                        "identifier": "SUBSTEP_0_TIMER"
                                      }
                                    },
                                    "do": [
                                      "reset_timer"
                                    ]
                                  }
                                ]
                              },
                              "dosing": {
                                "uuid": "b3fc8c2b-aa03-4ab7-9172-377ef38fd860",
                                "version": "1.0.0",
                                "behaviors": [
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  }
                                ],
                                "missing": true
                              },
                              "stirring": {
                                "info": {
                                  "title": "Stirring"
                                },
                                "contextInfo": {
                                  "pages": [
                                    {
                                      "title": "Dosing Info",
                                      "content": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "em",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "I like to occasionally write an infinite loop to remind my computer who's boss."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " — Ben Awad"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "reportSummary": "This is the report for the stirring step.",
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "The wheel on the bus goes round and round"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ],
                                "behaviors": [
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  }
                                ]
                              },
                              "externalStep": {
                                "info": {
                                  "title": "A Great Step",
                                  "description": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Add a fancy description here. It even supports "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "strong",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Markdown"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "author": {
                                    "name": "Max Mustermann",
                                    "email": "max.mustermann@company.com"
                                  },
                                  "slug": "a-great-step"
                                },
                                "behaviors": [
                                  {
                                    "when": "ON_SUBSTEP_START",
                                    "do": {
                                      "notify": {
                                        "text": "Starting substep of externalStep",
                                        "variant": "info",
                                        "autoHideDuration": 50
                                      }
                                    }
                                  },
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  }
                                ],
                                "fields": {
                                  "sample": {
                                    "type": "string",
                                    "maxLength": 100
                                  },
                                  "powderDispenser": {
                                    "type": "relationship",
                                    "resourceType": "devices",
                                    "prepare": true
                                  }
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Load a "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "sample"
                                              },
                                              "children": []
                                            },
                                            {
                                              "type": "text",
                                              "value": " into the "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "powderDispenser"
                                              },
                                              "children": []
                                            },
                                            {
                                              "type": "text",
                                              "value": "."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "secondary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Please, confirm when you are done."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "confirm": true
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "The sample will be gravimetrically placed in a "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "target"
                                              },
                                              "children": []
                                            },
                                            {
                                              "type": "text",
                                              "value": " reaction tube."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "devices": [
                                      "powderDispenser"
                                    ],
                                    "behaviors": [
                                      {
                                        "title": "Start gravimetrical measurement",
                                        "when": "ON_SUBSTEP_START",
                                        "do": [
                                          {
                                            "SEND_COMMAND": {
                                              "device": "powderDose",
                                              "command": "GET_GRAVIMETRICAL_MEASUREMENT",
                                              "scope": "substep"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "Record result",
                                        "when": {
                                          "ON_COMMAND_RESPONSE": {
                                            "device": "powderDose",
                                            "command": "GET_GRAVIMETRICAL_MEASUREMENT"
                                          }
                                        },
                                        "and": "data.value >= 9 && data.value <= 11",
                                        "do": [
                                          {
                                            "SET_FIELD": {
                                              "field": "actual",
                                              "value": "data.value"
                                            }
                                          },
                                          "COMPLETE_SUBSTEP"
                                        ],
                                        "else": [
                                          {
                                            "ALERT": {
                                              "title": "Tolerance Missed",
                                              "text": "Result is not within tolerance of 1 {{target.unit}} of the\ntarget of {{target}}. Repeat the step.\n"
                                            }
                                          },
                                          "REPEAT_STEP"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Results after gravimetrical placement are recorded: "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "actual"
                                              },
                                              "children": []
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "behaviors": [
                                      {
                                        "when": "ON_SUBSTEP_START",
                                        "do": [
                                          "COMPLETE_SUBSTEP",
                                          "COMPLETE_STEP"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Send results to ELN"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "behaviors": [
                                      {
                                        "when": "ON_SUBSTEP_COMPLETE",
                                        "do": [
                                          {
                                            "webhook": {
                                              "url": "http://localhost:5000/__cypress__/webhook?status=200&body=6",
                                              "method": "post",
                                              "blocking": false,
                                              "headers": {
                                                "content-type": "application/json"
                                              },
                                              "body": "{\n  \"registered_value\": \"{{someString}}\",\n  \"description\": \"some information goes here\"\n}\n",
                                              "onSuccess": {
                                                "do": [
                                                  {
                                                    "SET_FIELD": {
                                                      "field": "actual",
                                                      "value": "data.value"
                                                    }
                                                  },
                                                  {
                                                    "webhook": {
                                                      "url": "http://localhost:5000/__cypress__/webhook?status=204"
                                                    }
                                                  }
                                                ]
                                              },
                                              "onError": {
                                                "do": [
                                                  "REPEAT_SUBSTEP"
                                                ]
                                              },
                                              "onCode": {
                                                "404": {
                                                  "do": [
                                                    {
                                                      "ALERT": {
                                                        "title": "Not Found",
                                                        "text": "Ensure that you're using a valid url / endpoint"
                                                      }
                                                    }
                                                  ]
                                                },
                                                "418": {
                                                  "do": [
                                                    {
                                                      "ALERT": {
                                                        "title": "I'm a teapot",
                                                        "text": "For real! I'm a teapot"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "when": {
                                          "MANUAL": {
                                            "key": "alert_confirmed"
                                          }
                                        },
                                        "do": [
                                          "CONFIRM_ALERT"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              "alert": {
                                "info": {
                                  "title": "Alert completed"
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Ahoy, Matey!"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ],
                                "behaviors": [
                                  {
                                    "title": "Alert that we are done.",
                                    "when": "ON_STEP_START",
                                    "do": [
                                      {
                                        "ALERT": {
                                          "title": "Finished!",
                                          "text": "We are done here."
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  }
                                ]
                              },
                              "buttonStep": {
                                "info": {
                                  "title": "A step with a handled button."
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "This is a step with a button."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "buttons": [
                                      {
                                        "label": "Click me",
                                        "key": "clickable-button"
                                      }
                                    ],
                                    "behaviors": [
                                      {
                                        "when": {
                                          "MANUAL": {
                                            "key": "clickable-button"
                                          }
                                        },
                                        "do": [
                                          "COMPLETE_SUBSTEP"
                                        ]
                                      }
                                    ]
                                  }
                                ],
                                "behaviors": [
                                  {
                                    "when": {
                                      "MANUAL": {
                                        "key": "alert_confirmed"
                                      }
                                    },
                                    "do": [
                                      "CONFIRM_ALERT"
                                    ]
                                  }
                                ]
                              },
                              "stepOne": {
                                "info": {
                                  "title": "Step 1"
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Completed"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "confirm": true
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Aborted"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Skipped"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              },
                              "stepTwo": {
                                "info": {
                                  "title": "Step 2"
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "If a step never gets taken, does the step exists?"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "flow": [
                              {
                                "weighing": {
                                  "fields": {
                                    "target": {
                                      "number": 100,
                                      "unit": "mg"
                                    }
                                  },
                                  "fieldMapping": {
                                    "actualWeight": "actual",
                                    "sample": "sample"
                                  }
                                }
                              },
                              "buttonStep",
                              {
                                "if": "true",
                                "then": "alert",
                                "else": [
                                  "alert",
                                  "buttonStep"
                                ]
                              },
                              {
                                "loop": [
                                  "weighing",
                                  "weighing"
                                ],
                                "until": "field1 > 20"
                              },
                              {
                                "forEach": "iterator",
                                "step": 1,
                                "to": 10,
                                "do": "weighing"
                              },
                              {
                                "while": "true",
                                "do": [
                                  "weighing",
                                  "weighing"
                                ]
                              },
                              {
                                "forEach": "iterator",
                                "in": "collection",
                                "do": "weighing"
                              },
                              {
                                "externalStep": {
                                  "fields": {
                                    "sample": "MySample"
                                  },
                                  "fieldMapping": {
                                    "balance": "powderDispenser"
                                  }
                                }
                              }
                            ]
                          },
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "locked": false
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "workflow_steps": {
                            "data": []
                          },
                          "review": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_runs/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a WorkflowRun.",
        "operationId": "updateWorkflowRun",
        "summary": "Update Workflow Run",
        "tags": [
          "workflow_runs"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowRun to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRun"
              },
              "example": {
                "data": {
                  "type": "workflow_run",
                  "attributes": {
                    "title": "Updated Title"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "Updated Title",
                          "state": "pending",
                          "run_number": 1,
                          "collaborator_ids": [],
                          "created_at": "2023-06-26T12:01:25.267Z",
                          "updated_at": "2023-06-26T12:01:25.602Z",
                          "custom_attributes": [],
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "locked": false
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "workflow_steps": {
                            "data": []
                          },
                          "review": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_runs/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WorkflowRun.",
        "operationId": "deleteWorkflowRun",
        "summary": "Delete Workflow Run",
        "tags": [
          "workflow_runs"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowRun to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_runs/{id}/report": {
      "get": {
        "description": "Get a WorkflowRun report.",
        "operationId": "reportWorkflowRun",
        "summary": "Report Workflow Run",
        "tags": [
          "workflow_runs"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowRun to get."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunsResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": [
                        {
                          "type": "workflow_runs",
                          "id": 1,
                          "content": "Experiment My Premium Workflow 1.0.0 run #1"
                        },
                        {
                          "type": "workflow_steps",
                          "id": 1,
                          "step_number": 1,
                          "content": "Weighing: This is the information that will be generated by this step, when it's completed, in the report. We have a field reference here: Test. Completed by Reed McGlynn"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Query parameter(s) `notallowed` is not allowed for this resource.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_runs/{id}/status": {
      "patch": {
        "description": "Update the status of a Workflow Run.",
        "operationId": "updateWorkflowRunStatus",
        "summary": "Update the status of a Workflow Run.",
        "tags": [
          "workflow_run_statuses"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Workflow Run to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update status of a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRunStatus"
              },
              "example": {
                "data": {
                  "type": "workflow_run",
                  "attributes": {
                    "state": "active"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #1",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "state": "active",
                          "run_number": 1,
                          "collaborator_ids": [],
                          "created_at": "2023-06-26T12:01:36.559Z",
                          "updated_at": "2023-06-26T12:01:36.924Z",
                          "custom_attributes": [],
                          "locked": false
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "workflow_steps": {
                            "data": [
                              {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            ]
                          },
                          "review": {}
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_runs/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Bad State Transition": {
                    "summary": "Bad State Transition",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Cannot transition from pending to completed.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Invalid State": {
                    "summary": "Invalid State",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Invalid value 'puzzled' for enum.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_step_templates": {
      "get": {
        "description": "Get a list of existing WorkflowStepTemplates.",
        "operationId": "getWorkflowStepTemplates",
        "summary": "Get Workflow Step Templates",
        "tags": [
          "workflow_step_templates"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStepTemplate attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowStepTemplatesFilter"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the template will be included as the `template` attribute."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplatesResponse"
                },
                "examples": {
                  "List of WorkflowStepTemplates": {
                    "summary": "List of WorkflowStepTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "9f4293be-9204-4959-895a-c0ee9def23c0",
                            "template_version": "1.0.0",
                            "title": "Workflow Step with Secrets",
                            "description": "This is a secret step.\n",
                            "slug": "a-secret-step",
                            "created_at": "2023-06-26T12:01:44.463Z",
                            "updated_at": "2023-06-26T12:01:44.463Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "9f4293be-9204-4959-895a-c0ee9def23c0",
                                "title": "Workflow Step with Secrets",
                                "description": "This is a secret step.\n",
                                "slug": "a-secret-step"
                              },
                              "secrets": {
                                "my-secret": {
                                  "scope": "personal",
                                  "description": "nothing to see here"
                                },
                                "my-org-secret": {
                                  "scope": "organisation",
                                  "description": "a valid secret"
                                }
                              },
                              "fields": {},
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "this is a secret substep"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.1",
                            "title": "A Single Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:44.620Z",
                            "updated_at": "2023-06-26T12:01:44.620Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                                "title": "A Single Step",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-single-step"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Load a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " into the "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "powderDispenser"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "secondary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Please, confirm when you are done."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.2",
                            "title": "A Single Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:44.743Z",
                            "updated_at": "2023-06-26T14:01:44.633Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.2",
                                "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                                "title": "A Single Step",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-single-step"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Load a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " into the "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "powderDispenser"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "secondary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Please, confirm when you are done."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                            "template_version": "1.0.1",
                            "title": "Show Alert",
                            "description": null,
                            "slug": "show-alert",
                            "created_at": "2023-06-26T12:01:44.887Z",
                            "updated_at": "2023-06-26T14:01:44.769Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                                "title": "Show Alert",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "show-alert"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "defaultValue": "Rock"
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Now, look at this field "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "! Great!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "buttons": [
                                    {
                                      "label": "Click me",
                                      "key": "alert-button"
                                    },
                                    {
                                      "label": "Then click me",
                                      "key": "alert-button2"
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "alert-button"
                                        }
                                      },
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "You clicked me",
                                            "text": "This text explains what happened to {{sample}}!"
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "alert-button2"
                                        }
                                      },
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "You clicked me",
                                            "text": "This text explains what happened on the second step!",
                                            "buttons": [
                                              {
                                                "label": "Fine",
                                                "key": "custom_alert_confirmed"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "custom_alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "complete_substep"
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "alert_confirmed"
                                    }
                                  },
                                  "do": [
                                    "CONFIRM_ALERT"
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/4"
                          }
                        },
                        {
                          "id": "5",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.1",
                            "title": "A Great Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:45.055Z",
                            "updated_at": "2023-06-26T14:01:44.900Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                                "title": "A Great Step",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "powderDispenser": {
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "prepare": true
                                },
                                "SUBSTEP_0_TIMER": {
                                  "type": "timer",
                                  "defaultDuration": "5s",
                                  "hidden": true
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Load a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " into the "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "powderDispenser"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "secondary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Please, confirm when you are done."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true,
                                  "timer": "SUBSTEP_0_TIMER"
                                },
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "The sample will be gravimetrically placed in a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "target"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " reaction tube."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "devices": [
                                    "powderDispenser"
                                  ],
                                  "behaviors": [
                                    {
                                      "title": "Start gravimetrical measurement",
                                      "when": "ON_SUBSTEP_START",
                                      "do": [
                                        {
                                          "SEND_COMMAND": {
                                            "device": "powderDose",
                                            "command": "GET_GRAVIMETRICAL_MEASUREMENT",
                                            "scope": "substep"
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Results after gravimetrical placement are recorded: "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "actual"
                                            },
                                            "children": []
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "behaviors": [
                                    {
                                      "when": "ON_SUBSTEP_START",
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "Finished!",
                                            "text": "We are done here."
                                          }
                                        },
                                        "COMPLETE_SUBSTEP",
                                        "COMPLETE_STEP"
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Send results to ELN"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "behaviors": [
                                    {
                                      "when": "ON_SUBSTEP_COMPLETE",
                                      "do": [
                                        {
                                          "webhook": {
                                            "url": "https://my_endpoint.com/webhook",
                                            "method": "post",
                                            "blocking": true,
                                            "headers": {
                                              "content-type": "application/json"
                                            },
                                            "body": "body_value",
                                            "onSuccess": {
                                              "processor": "json",
                                              "do": [
                                                {
                                                  "SET_FIELD": {
                                                    "field": "actual",
                                                    "value": "data.value"
                                                  }
                                                }
                                              ]
                                            },
                                            "onError": {
                                              "processor": "json",
                                              "do": [
                                                "REPEAT_SUBSTEP"
                                              ]
                                            },
                                            "onCode": {
                                              "404": {
                                                "processor": "json",
                                                "do": [
                                                  {
                                                    "ALERT": {
                                                      "title": "Not Found",
                                                      "text": "Ensure that you're using a valid url / endpoint"
                                                    }
                                                  }
                                                ]
                                              },
                                              "418": {
                                                "processor": "json",
                                                "do": [
                                                  {
                                                    "ALERT": {
                                                      "title": "I'm a teapot",
                                                      "text": "For real! I'm a teapot"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "alert_confirmed"
                                    }
                                  },
                                  "do": [
                                    "CONFIRM_ALERT"
                                  ]
                                },
                                {
                                  "title": "Start timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "start-timer-manually",
                                      "identifier": "SUBSTEP_0_TIMER"
                                    }
                                  },
                                  "do": [
                                    "start_timer"
                                  ]
                                },
                                {
                                  "title": "Stop timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "stop-timer-manually",
                                      "identifier": "SUBSTEP_0_TIMER"
                                    }
                                  },
                                  "do": [
                                    "stop_timer"
                                  ]
                                },
                                {
                                  "title": "Reset timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "reset-timer-manually",
                                      "identifier": "SUBSTEP_0_TIMER"
                                    }
                                  },
                                  "do": [
                                    "reset_timer"
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/5"
                          }
                        },
                        {
                          "id": "6",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "573313f4-3ab3-449e-90dc-a48d6eb02d65",
                            "template_version": "1.0.0",
                            "title": "This step template has a very, very long title that our skilled frontend engineers will handle graciously and display in the best way possible.",
                            "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus animi perspiciatis soluta enim. Expedita delectus, vel doloremque dicta culpa reiciendis sint reprehenderit aliquam, ex facere, neque quos. Amet animi dolorum asperiores eos aliquam hic exercitationem voluptatem inventore labore odit vero dolores, repellendus voluptates nesciunt laboriosam laudantium quas dolor quis nulla provident sunt saepe tempora distinctio natus! Animi ullam corrupti magnam? Eligendi voluptate aliquam placeat officiis incidunt, culpa cumque dolor ipsam alias voluptates, praesentium quae aliquid quo, eum voluptatibus cupiditate quos fugiat aperiam. Ad voluptate veritatis reiciendis eligendi quidem vitae repellendus impedit magnam perspiciatis officiis, voluptatibus eveniet tenetur aliquid rerum? Maxime ad soluta velit amet quo cumque aut! Eveniet eius repellendus quaerat mollitia possimus dolore modi explicabo iste deserunt libero quia, quibusdam, optio, illo sit consequatur. Fugit tempore temporibus quidem ut placeat libero impedit, perferendis veritatis voluptate ex excepturi reiciendis ducimus necessitatibus unde amet non dolorem nisi autem provident laudantium, eaque in sapiente. Commodi, exercitationem! Assumenda voluptatibus vitae consequuntur tempora, obcaecati impedit ex libero totam velit quam nam, quia doloribus repudiandae sequi asperiores officiis iusto aut repellat doloremque? Saepe dolores voluptate dicta adipisci consectetur aliquam totam porro eaque, architecto maxime officia facere quas hic et! Veniam vitae quis accusamus omnis illum dolorem blanditiis eos iure laborum. Earum tempora tenetur aperiam nihil molestiae necessitatibus alias aut, eos quidem non aliquam sunt voluptate nobis culpa quod excepturi, accusantium laborum. Voluptatibus dolorem rem eius dolore, accusamus rerum modi adipisci perspiciatis delectus minus provident laboriosam nobis accusantium expedita in at ab labore placeat officiis nesciunt cum. At nobis cum reiciendis exercitationem pariatur, obcaecati aspernatur earum perspiciatis deleniti. Totam distinctio commodi quisquam, veniam eos dolor, inventore impedit necessitatibus odio delectus mollitia aliquam esse earum qui doloribus at ex fugit libero maxime numquam debitis vitae non. Recusandae dignissimos expedita hic, id necessitatibus accusamus, quaerat tenetur esse explicabo atque eligendi. Totam repellendus autem fuga quibusdam quisquam? Obcaecati aliquam ad reiciendis doloremque ab sapiente odio natus laborum qui id, veniam perferendis ipsam blanditiis voluptate explicabo dolores unde. Nobis recusandae harum fuga, temporibus molestias dolor ullam beatae itaque nam labore nemo tenetur dolore dolores dolorum facere aut voluptatem eos corporis ducimus explicabo id asperiores magnam sint adipisci. Exercitationem laboriosam quod mollitia non quia qui totam veniam amet. Quasi voluptas, aliquid debitis aut, error id harum quis vero, velit magnam illo quam ad excepturi molestias amet veritatis sit voluptatum dolore ab eum et eos fuga? In recusandae, quo minima, corporis quisquam autem sit debitis quam suscipit, dignissimos fuga! Est recusandae laboriosam dolorem enim cupiditate? Beatae, vitae. Culpa distinctio, voluptate soluta tempore commodi minus unde aut officia eligendi placeat aliquid ut pariatur suscipit reiciendis reprehenderit. Ea adipisci cumque soluta non dolorum totam accusamus tenetur quisquam veniam inventore iure eos fuga repudiandae, quod ducimus neque quia, doloribus sunt velit harum itaque incidunt. Delectus fuga at dolore ipsum libero quae possimus veniam esse vel in. Quia sequi quaerat porro repellat vel, provident assumenda voluptas incidunt sit quidem animi aliquam minima distinctio? Unde, harum ducimus molestiae nemo, fugit perspiciatis perferendis quis incidunt quas aperiam odit.\n",
                            "slug": "notification",
                            "created_at": "2023-06-26T12:01:45.178Z",
                            "updated_at": "2023-06-26T14:01:45.068Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "573313f4-3ab3-449e-90dc-a48d6eb02d65",
                                "title": "This step template has a very, very long title that our skilled frontend engineers will handle graciously and display in the best way possible.",
                                "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus animi perspiciatis soluta enim. Expedita delectus, vel doloremque dicta culpa reiciendis sint reprehenderit aliquam, ex facere, neque quos. Amet animi dolorum asperiores eos aliquam hic exercitationem voluptatem inventore labore odit vero dolores, repellendus voluptates nesciunt laboriosam laudantium quas dolor quis nulla provident sunt saepe tempora distinctio natus! Animi ullam corrupti magnam? Eligendi voluptate aliquam placeat officiis incidunt, culpa cumque dolor ipsam alias voluptates, praesentium quae aliquid quo, eum voluptatibus cupiditate quos fugiat aperiam. Ad voluptate veritatis reiciendis eligendi quidem vitae repellendus impedit magnam perspiciatis officiis, voluptatibus eveniet tenetur aliquid rerum? Maxime ad soluta velit amet quo cumque aut! Eveniet eius repellendus quaerat mollitia possimus dolore modi explicabo iste deserunt libero quia, quibusdam, optio, illo sit consequatur. Fugit tempore temporibus quidem ut placeat libero impedit, perferendis veritatis voluptate ex excepturi reiciendis ducimus necessitatibus unde amet non dolorem nisi autem provident laudantium, eaque in sapiente. Commodi, exercitationem! Assumenda voluptatibus vitae consequuntur tempora, obcaecati impedit ex libero totam velit quam nam, quia doloribus repudiandae sequi asperiores officiis iusto aut repellat doloremque? Saepe dolores voluptate dicta adipisci consectetur aliquam totam porro eaque, architecto maxime officia facere quas hic et! Veniam vitae quis accusamus omnis illum dolorem blanditiis eos iure laborum. Earum tempora tenetur aperiam nihil molestiae necessitatibus alias aut, eos quidem non aliquam sunt voluptate nobis culpa quod excepturi, accusantium laborum. Voluptatibus dolorem rem eius dolore, accusamus rerum modi adipisci perspiciatis delectus minus provident laboriosam nobis accusantium expedita in at ab labore placeat officiis nesciunt cum. At nobis cum reiciendis exercitationem pariatur, obcaecati aspernatur earum perspiciatis deleniti. Totam distinctio commodi quisquam, veniam eos dolor, inventore impedit necessitatibus odio delectus mollitia aliquam esse earum qui doloribus at ex fugit libero maxime numquam debitis vitae non. Recusandae dignissimos expedita hic, id necessitatibus accusamus, quaerat tenetur esse explicabo atque eligendi. Totam repellendus autem fuga quibusdam quisquam? Obcaecati aliquam ad reiciendis doloremque ab sapiente odio natus laborum qui id, veniam perferendis ipsam blanditiis voluptate explicabo dolores unde. Nobis recusandae harum fuga, temporibus molestias dolor ullam beatae itaque nam labore nemo tenetur dolore dolores dolorum facere aut voluptatem eos corporis ducimus explicabo id asperiores magnam sint adipisci. Exercitationem laboriosam quod mollitia non quia qui totam veniam amet. Quasi voluptas, aliquid debitis aut, error id harum quis vero, velit magnam illo quam ad excepturi molestias amet veritatis sit voluptatum dolore ab eum et eos fuga? In recusandae, quo minima, corporis quisquam autem sit debitis quam suscipit, dignissimos fuga! Est recusandae laboriosam dolorem enim cupiditate? Beatae, vitae. Culpa distinctio, voluptate soluta tempore commodi minus unde aut officia eligendi placeat aliquid ut pariatur suscipit reiciendis reprehenderit. Ea adipisci cumque soluta non dolorum totam accusamus tenetur quisquam veniam inventore iure eos fuga repudiandae, quod ducimus neque quia, doloribus sunt velit harum itaque incidunt. Delectus fuga at dolore ipsum libero quae possimus veniam esse vel in. Quia sequi quaerat porro repellat vel, provident assumenda voluptas incidunt sit quidem animi aliquam minima distinctio? Unde, harum ducimus molestiae nemo, fugit perspiciatis perferendis quis incidunt quas aperiam odit.\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "notification"
                              },
                              "behaviors": [
                                {
                                  "when": {
                                    "on_manual": {
                                      "key": "notify"
                                    }
                                  },
                                  "do": {
                                    "notify": {
                                      "text": "Value: {{MyQuantity}}",
                                      "variant": "info",
                                      "autoHideDuration": 50
                                    }
                                  }
                                }
                              ],
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Let's see a notification!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "buttons": [
                                    {
                                      "label": "Notify me!",
                                      "key": "notify"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "968e3acd-9270-4c08-b1a2-52e3df33bdf1",
                            "template_version": "1.0.0",
                            "title": "Add External Dispenser",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:45.300Z",
                            "updated_at": "2023-06-26T14:01:45.191Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "968e3acd-9270-4c08-b1a2-52e3df33bdf1",
                                "title": "Add External Dispenser",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-single-step"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "powderDispenser": {
                                  "type": "string",
                                  "maxLength": 100
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Load a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " into the "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "powderDispenser"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "secondary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Please confirm when you are done."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/7"
                          }
                        },
                        {
                          "id": "8",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                            "template_version": "1.0.0",
                            "title": "A Great Step Template With Table",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:45.429Z",
                            "updated_at": "2023-06-26T14:01:45.315Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                                "title": "A Great Step Template With Table",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "fields": {
                                "myTableData": {
                                  "type": "array",
                                  "hidden": true,
                                  "defaultValue": [
                                    {
                                      "name": "acetic anhydride",
                                      "density": 1.08,
                                      "molar_mass": 102.09
                                    },
                                    {
                                      "name": "2-Hydroxybenzoic acid",
                                      "density": 1.44,
                                      "molar_mass": 138.121
                                    }
                                  ]
                                },
                                "myStepTable_state": {
                                  "type": "object",
                                  "title": "Internal Table State",
                                  "hidden": true,
                                  "defaultValue": {
                                    "selectedRow": null,
                                    "selectedCell": null
                                  },
                                  "description": "Used by the workflow engine to store state data for the table."
                                }
                              },
                              "tables": {
                                "myStepTable": {
                                  "data": "myTableData",
                                  "columns": [
                                    {
                                      "label": "Compound",
                                      "value": "/name"
                                    },
                                    {
                                      "label": "Density (g/cm³)",
                                      "value": "/density",
                                      "align": "center",
                                      "selectable": true
                                    },
                                    {
                                      "label": "Molar mass (g/mol)",
                                      "value": "/molar_mass",
                                      "align": "center"
                                    }
                                  ]
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Table, yo!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true,
                                  "expandDescription": true,
                                  "description": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "table|myTable"
                                            },
                                            "children": []
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_row",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_row": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                },
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_cell",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_cell": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/8"
                          }
                        },
                        {
                          "id": "9",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "f4ab6770-3e5e-4f9f-ac9c-f6937a1a6a8b",
                            "template_version": "1.0.0",
                            "title": "Invalid - Unapproved Webhook",
                            "description": null,
                            "slug": "invalid-unapproved-webhook",
                            "created_at": "2023-06-26T12:01:45.559Z",
                            "updated_at": "2023-06-26T14:01:45.443Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "uuid": "f4ab6770-3e5e-4f9f-ac9c-f6937a1a6a8b",
                                "version": "1.0.0",
                                "title": "Invalid - Unapproved Webhook"
                              },
                              "fields": {},
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Click the button please!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "buttons": [
                                    {
                                      "label": "Trigger Webhook",
                                      "key": "webhook-button"
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "webhook-button"
                                        }
                                      },
                                      "do": [
                                        {
                                          "webhook": {
                                            "url": "https://notatallsuspicious.com/",
                                            "method": "post",
                                            "headers": {
                                              "content-type": "application/json"
                                            },
                                            "body": "{}",
                                            "onSuccess": {
                                              "processor": "json",
                                              "do": [
                                                {
                                                  "ALERT": {
                                                    "title": "Hooray! We did it!",
                                                    "text": "All your data are belongs to us"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/9"
                          }
                        },
                        {
                          "id": "10",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                            "template_version": "1.0.0",
                            "title": "A Great Step | Index",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:45.678Z",
                            "updated_at": "2023-06-26T15:01:45.572Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                                "title": "A Great Step | Index",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Look at how great this step are"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/10"
                          }
                        },
                        {
                          "id": "11",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                            "template_version": "1.0.1",
                            "title": "A Great Step | Index",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:45.799Z",
                            "updated_at": "2023-06-26T15:01:45.693Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                                "title": "A Great Step | Index",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Look at how great this step are"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/11"
                          }
                        },
                        {
                          "id": "12",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                            "template_version": "1.0.2",
                            "title": "A Great Step | Index",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:45.914Z",
                            "updated_at": "2023-06-26T15:01:45.813Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.2",
                                "uuid": "8edfd185-c5e4-4b4a-953d-331945b60eb3",
                                "title": "A Great Step | Index",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Look at how great this step are"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/12"
                          }
                        },
                        {
                          "id": "13",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                            "template_version": "1.0.2",
                            "title": "A Great Step Template With Table",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:46.040Z",
                            "updated_at": "2023-06-26T15:01:45.926Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.2",
                                "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                                "title": "A Great Step Template With Table",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "fields": {
                                "myTableData": {
                                  "type": "array",
                                  "hidden": true,
                                  "defaultValue": [
                                    {
                                      "name": "acetic anhydride",
                                      "density": 1.08,
                                      "molar_mass": 102.09
                                    },
                                    {
                                      "name": "2-Hydroxybenzoic acid",
                                      "density": 1.44,
                                      "molar_mass": 138.121
                                    }
                                  ]
                                },
                                "myStepTable_state": {
                                  "type": "object",
                                  "title": "Internal Table State",
                                  "hidden": true,
                                  "defaultValue": {
                                    "selectedRow": null,
                                    "selectedCell": null
                                  },
                                  "description": "Used by the workflow engine to store state data for the table."
                                }
                              },
                              "tables": {
                                "myStepTable": {
                                  "data": "myTableData",
                                  "columns": [
                                    {
                                      "label": "Compound",
                                      "value": "/name"
                                    },
                                    {
                                      "label": "Density (g/cm³)",
                                      "value": "/density",
                                      "align": "center",
                                      "selectable": true
                                    },
                                    {
                                      "label": "Molar mass (g/mol)",
                                      "value": "/molar_mass",
                                      "align": "center"
                                    }
                                  ]
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Table, yo!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true,
                                  "expandDescription": true,
                                  "description": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "table|myTable"
                                            },
                                            "children": []
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_row",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_row": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                },
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_cell",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_cell": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/13"
                          }
                        },
                        {
                          "id": "14",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                            "template_version": "1.0.1",
                            "title": "A Great Step Template With Table",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "created_at": "2023-06-26T12:01:46.165Z",
                            "updated_at": "2023-06-26T15:01:46.053Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "fd400d06-4084-421c-9f13-4e6ebc61667b",
                                "title": "A Great Step Template With Table",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-great-step"
                              },
                              "fields": {
                                "myTableData": {
                                  "type": "array",
                                  "hidden": true,
                                  "defaultValue": [
                                    {
                                      "name": "acetic anhydride",
                                      "density": 1.08,
                                      "molar_mass": 102.09
                                    },
                                    {
                                      "name": "2-Hydroxybenzoic acid",
                                      "density": 1.44,
                                      "molar_mass": 138.121
                                    }
                                  ]
                                },
                                "myStepTable_state": {
                                  "type": "object",
                                  "title": "Internal Table State",
                                  "hidden": true,
                                  "defaultValue": {
                                    "selectedRow": null,
                                    "selectedCell": null
                                  },
                                  "description": "Used by the workflow engine to store state data for the table."
                                }
                              },
                              "tables": {
                                "myStepTable": {
                                  "data": "myTableData",
                                  "columns": [
                                    {
                                      "label": "Compound",
                                      "value": "/name"
                                    },
                                    {
                                      "label": "Density (g/cm³)",
                                      "value": "/density",
                                      "align": "center",
                                      "selectable": true
                                    },
                                    {
                                      "label": "Molar mass (g/mol)",
                                      "value": "/molar_mass",
                                      "align": "center"
                                    }
                                  ]
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Table, yo!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true,
                                  "expandDescription": true,
                                  "description": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "table|myTable"
                                            },
                                            "children": []
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_row",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_row": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                },
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "select_cell",
                                      "identifier": "myStepTable"
                                    }
                                  },
                                  "do": {
                                    "select_cell": {
                                      "table": "myStepTable",
                                      "value": "data.pointer"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/14"
                          }
                        },
                        {
                          "id": "15",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "3d604aee-f13c-45ca-aff8-e4f7085391a4",
                            "template_version": "1.0.1",
                            "title": "Lots of step fields",
                            "description": null,
                            "slug": "lots-of-step-fields",
                            "created_at": "2023-06-26T12:01:46.321Z",
                            "updated_at": "2023-06-26T15:01:46.178Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "3d604aee-f13c-45ca-aff8-e4f7085391a4",
                                "title": "Lots of step fields"
                              },
                              "fields": {
                                "someString": {
                                  "type": "string"
                                },
                                "someStringReadOnly": {
                                  "type": "string",
                                  "maxLength": 100,
                                  "readOnly": true
                                },
                                "textarea": {
                                  "type": "string",
                                  "ui:widget": "textarea"
                                },
                                "balance": {
                                  "group": "required",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "prepare": true
                                },
                                "balanceReadOnly": {
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "readOnly": true
                                },
                                "sample": {
                                  "group": "required",
                                  "type": "relationship",
                                  "resourceType": "samples",
                                  "prepare": true
                                },
                                "user": {
                                  "group": "required",
                                  "type": "relationship",
                                  "resourceType": "users",
                                  "prepare": true
                                },
                                "measurement": {
                                  "group": "required",
                                  "type": "relationship",
                                  "resourceType": "measurements",
                                  "prepare": true
                                },
                                "channel": {
                                  "type": "relationship",
                                  "resourceType": "channels"
                                },
                                "collection": {
                                  "type": "relationship",
                                  "resourceType": "collections"
                                },
                                "instrumentInstructions": {
                                  "type": "file",
                                  "mediaType": "application/my-instruments-config-file-type",
                                  "readOnly": true,
                                  "output": false
                                },
                                "actualWeight": {
                                  "type": "quantity",
                                  "unit": "mg"
                                },
                                "actualWeightReadOnly": {
                                  "type": "quantity",
                                  "unit": "mg",
                                  "readOnly": true
                                },
                                "density": {
                                  "type": "script",
                                  "script": "actualWeight / actualVolume",
                                  "readOnly": true,
                                  "result": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  }
                                },
                                "repeat_count": {
                                  "group": "required",
                                  "type": "integer",
                                  "prepare": true
                                },
                                "duration": {
                                  "type": "timer"
                                },
                                "export_after_finish": {
                                  "type": "boolean"
                                },
                                "boolean_readOnly": {
                                  "type": "boolean",
                                  "readOnly": true
                                },
                                "schema": {
                                  "type": "object",
                                  "properties": {
                                    "first": {
                                      "type": "string",
                                      "title": "first"
                                    },
                                    "second": {
                                      "type": "number",
                                      "title": "second"
                                    }
                                  }
                                },
                                "hiddenString": {
                                  "group": "hidden",
                                  "type": "string",
                                  "hidden": true
                                },
                                "anotherField1": {
                                  "type": "string"
                                },
                                "anotherField2": {
                                  "type": "string"
                                },
                                "anotherField3": {
                                  "type": "string"
                                },
                                "anotherField4": {
                                  "type": "string"
                                },
                                "anotherField5": {
                                  "type": "string"
                                },
                                "anotherField6": {
                                  "type": "string"
                                },
                                "anotherField7": {
                                  "type": "string"
                                },
                                "anotherField8": {
                                  "type": "string"
                                },
                                "anotherField9": {
                                  "type": "string"
                                },
                                "anotherField10": {
                                  "type": "string"
                                },
                                "anotherField11": {
                                  "type": "string"
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "A field"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true
                                }
                              ],
                              "behaviors": [
                                {
                                  "title": "Start timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "start-timer-manually",
                                      "identifier": "duration"
                                    }
                                  },
                                  "do": [
                                    "start_timer"
                                  ]
                                },
                                {
                                  "title": "Stop timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "stop-timer-manually",
                                      "identifier": "duration"
                                    }
                                  },
                                  "do": [
                                    "stop_timer"
                                  ]
                                },
                                {
                                  "title": "Reset timer (implicit behavior)",
                                  "when": {
                                    "manual": {
                                      "key": "reset-timer-manually",
                                      "identifier": "duration"
                                    }
                                  },
                                  "do": [
                                    "reset_timer"
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/15"
                          }
                        },
                        {
                          "id": "16",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                            "template_version": "1.0.0",
                            "title": "Show Alert",
                            "description": null,
                            "slug": "show-alert",
                            "created_at": "2023-06-26T12:01:46.461Z",
                            "updated_at": "2023-06-26T12:01:46.461Z",
                            "hidden_at": "2023-06-26T12:01:46.336Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                                "title": "Show Alert",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "show-alert"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "defaultValue": "Rock"
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Now, look at this field "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "! Great!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "buttons": [
                                    {
                                      "label": "Click me",
                                      "key": "alert-button"
                                    },
                                    {
                                      "label": "Then click me",
                                      "key": "alert-button2"
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "alert-button"
                                        }
                                      },
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "You clicked me",
                                            "text": "This text explains what happened to {{sample}}!"
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "alert-button2"
                                        }
                                      },
                                      "do": [
                                        {
                                          "ALERT": {
                                            "title": "You clicked me",
                                            "text": "This text explains what happened on the second step!",
                                            "buttons": [
                                              {
                                                "label": "Fine",
                                                "key": "custom_alert_confirmed"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "custom_alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "complete_substep"
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "behaviors": [
                                {
                                  "when": {
                                    "MANUAL": {
                                      "key": "alert_confirmed"
                                    }
                                  },
                                  "do": [
                                    "CONFIRM_ALERT"
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/16"
                          }
                        },
                        {
                          "id": "17",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "9f4293be-9204-4959-895a-c0ee9def23c0",
                            "template_version": "1.0.1",
                            "title": "Workflow Step with Secrets",
                            "description": "This is a secret step.\n",
                            "slug": "a-secret-step",
                            "created_at": "2023-06-26T12:01:46.585Z",
                            "updated_at": "2023-06-26T12:01:46.585Z",
                            "hidden_at": "2023-06-26T12:01:46.475Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "9f4293be-9204-4959-895a-c0ee9def23c0",
                                "title": "Workflow Step with Secrets",
                                "description": "This is a secret step.\n",
                                "slug": "a-secret-step"
                              },
                              "secrets": {
                                "my-secret": {
                                  "scope": "personal",
                                  "description": "nothing to see here"
                                },
                                "my-org-secret": {
                                  "scope": "organisation",
                                  "description": "a valid secret"
                                }
                              },
                              "fields": {},
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "this is a secret substep"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/17"
                          }
                        },
                        {
                          "id": "18",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "88708519-14e6-4917-a494-9bdc2c526a0a",
                            "template_version": "1.0.0",
                            "title": "Valid Selector Field Options",
                            "description": null,
                            "slug": "valid-selector-field-options",
                            "created_at": "2023-06-26T12:01:46.712Z",
                            "updated_at": "2023-06-26T12:01:46.712Z",
                            "hidden_at": "2023-06-26T12:01:46.604Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "88708519-14e6-4917-a494-9bdc2c526a0a",
                                "title": "Valid Selector Field Options"
                              },
                              "fields": {
                                "MySelectResult": {
                                  "type": "string",
                                  "hidden": true,
                                  "maxLength": 100
                                },
                                "myArrayField": {
                                  "type": "array",
                                  "hidden": true,
                                  "items": [
                                    {
                                      "primary": "Carbon",
                                      "value": "carbon"
                                    },
                                    {
                                      "primary": "Mercury",
                                      "secondary": "Mercury occurs in deposits throughout the world mostly as cinnabar (mercuric sulfide).\n",
                                      "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/7/74/Mercury-27128.jpg",
                                      "value": "mercury"
                                    },
                                    {
                                      "primary": "Zinc",
                                      "secondary": "The element was probably named by the alchemist Paracelsus after the German word Zinke (prong, tooth).\n",
                                      "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/2/2f/Sphalerite4.jpg",
                                      "value": "zinc"
                                    }
                                  ]
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Table, yo!"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "selector": {
                                    "layout": "cards",
                                    "result": "MySelectResult",
                                    "title": "Samples One",
                                    "options": "myArrayField"
                                  },
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "selector_confirm"
                                        }
                                      },
                                      "do": [
                                        {
                                          "SET_FIELD": {
                                            "value": "data.value",
                                            "field": "MySelectResult"
                                          }
                                        },
                                        "COMPLETE_SUBSTEP"
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/18"
                          }
                        },
                        {
                          "id": "19",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "88708519-14e6-4917-a494-9bdc2c526a0a",
                            "template_version": "0.0.1",
                            "title": "Valid template with duplicate YAML keys",
                            "description": null,
                            "slug": "valid-template-with-duplicate-yaml-keys",
                            "created_at": "2023-06-26T12:01:46.829Z",
                            "updated_at": "2023-06-26T12:01:46.829Z",
                            "hidden_at": "2023-06-26T12:01:46.726Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "0.0.1",
                                "uuid": "88708519-14e6-4917-a494-9bdc2c526a0a",
                                "title": "Valid template with duplicate YAML keys"
                              },
                              "fields": {},
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "du bi du dam dam, dam du dam"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/19"
                          }
                        },
                        {
                          "id": "20",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "dddb025a-6e89-41a1-aeb0-71f382ee25fe",
                            "template_version": "1.0.0",
                            "title": "Step Secret Interpolation",
                            "description": null,
                            "slug": "step-secret-interpolation",
                            "created_at": "2023-06-26T12:01:46.964Z",
                            "updated_at": "2023-06-26T12:01:46.964Z",
                            "hidden_at": "2023-06-26T12:01:46.844Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "dddb025a-6e89-41a1-aeb0-71f382ee25fe",
                                "title": "Step Secret Interpolation"
                              },
                              "fields": {
                                "OrgStepSecretInterpolated": {
                                  "type": "string",
                                  "defaultValue": "Not yet"
                                },
                                "PersonalStepSecretInterpolated": {
                                  "type": "string",
                                  "defaultValue": "Nope"
                                }
                              },
                              "secrets": {
                                "org-step-secret": {
                                  "scope": "organisation"
                                },
                                "personal-step-secret": {
                                  "scope": "personal"
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Step Secret interpolation"
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true,
                                  "description": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Is the org-step-secret interpolated? "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "OrgStepSecretInterpolated"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " What about the personal-step-secret? "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "PersonalStepSecretInterpolated"
                                            },
                                            "children": []
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "buttons": [
                                    {
                                      "label": "Trigger Webhook - Approved",
                                      "key": "webhook-button"
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "manual": {
                                          "key": "webhook-button"
                                        }
                                      },
                                      "do": [
                                        {
                                          "webhook": {
                                            "url": "http://localhost:5000/__cypress__/webhook?status=200&body=6&authorization={{secrets.org-step-secret}}&user-authorization={{secrets.personal-step-secret}}",
                                            "method": "post",
                                            "headers": {
                                              "content-type": "application/json"
                                            },
                                            "body": "{\n  \"description\": \"Interpolate all the secrets, but do not log them\",\n  \"log_the_secret_value\": {{secrets.org-step-secret}}\n}\n",
                                            "onSuccess": {
                                              "processor": "json",
                                              "do": [
                                                {
                                                  "set_field": {
                                                    "field": "OrgStepSecretInterpolated",
                                                    "value": "response.body.org_secret"
                                                  }
                                                },
                                                {
                                                  "set_field": {
                                                    "field": "PersonalStepSecretInterpolated",
                                                    "value": "response.body.personal_secret"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/20"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 2,
                        "recordsTotal": 21,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17,
                          18,
                          19,
                          20
                        ],
                        "recordsSize": 20
                      }
                    }
                  },
                  "List of found WorkflowStepTemplates": {
                    "summary": "List of found WorkflowStepTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.1",
                            "title": "A Single Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:48.516Z",
                            "updated_at": "2023-06-26T12:01:48.516Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.2",
                            "title": "A Single Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:48.687Z",
                            "updated_at": "2023-06-26T14:01:48.531Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          2,
                          3
                        ],
                        "recordsSize": 2
                      }
                    }
                  },
                  "Filter for WorkflowStepTemplate: A Single Step 1.0.1": {
                    "summary": "Filter for WorkflowStepTemplate: A Single Step 1.0.1",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.1",
                            "title": "A Single Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-single-step",
                            "created_at": "2023-06-26T12:01:52.821Z",
                            "updated_at": "2023-06-26T12:01:52.821Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                                "title": "A Single Step",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "a-single-step"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                }
                              },
                              "substeps": [
                                {
                                  "primary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Load a "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "sample"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": " into the "
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "interpolation",
                                            "properties": {
                                              "formula": "powderDispenser"
                                            },
                                            "children": []
                                          },
                                          {
                                            "type": "text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "secondary": {
                                    "type": "root",
                                    "children": [
                                      {
                                        "type": "element",
                                        "tagName": "p",
                                        "properties": {},
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "Please, confirm when you are done."
                                          }
                                        ]
                                      }
                                    ],
                                    "data": {
                                      "quirksMode": false
                                    }
                                  },
                                  "confirm": true
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_step_templates/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          2
                        ],
                        "recordsSize": 1
                      }
                    }
                  },
                  "Empty response": {
                    "summary": "Empty response",
                    "value": {
                      "data": [],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 0,
                        "recordsTotal": 0,
                        "recordsOrder": [],
                        "recordsSize": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_step_templates attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_step_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowStepTemplate"
              }
            }
          }
        },
        "description": "Create a WorkflowStepTemplate.",
        "operationId": "createWorkflowStepTemplate",
        "summary": "Create Workflow Step Template",
        "tags": [
          "workflow_step_templates"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate": {
                    "summary": "WorkflowStepTemplate",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "workflow_step_template",
                        "attributes": {
                          "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                          "template_version": "1.0.0",
                          "title": "A Great Step",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "a-great-step",
                          "created_at": "2023-06-26T12:02:08.751Z",
                          "updated_at": "2023-06-26T12:02:08.751Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_step_templates/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request": {
                    "summary": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: File can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_step_templates/{id}": {
      "get": {
        "description": "Get a single WorkflowStepTemplate by its id.",
        "operationId": "getWorkflowStepTemplate",
        "summary": "Get Workflow Step Template",
        "tags": [
          "workflow_step_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStepTemplate to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStepTemplate attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the template will be included as the `template` attribute."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate": {
                    "summary": "WorkflowStepTemplate",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "workflow_step_template",
                        "attributes": {
                          "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                          "template_version": "1.0.1",
                          "title": "A Single Step",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "a-single-step",
                          "created_at": "2023-06-26T12:02:03.048Z",
                          "updated_at": "2023-06-26T12:02:03.048Z",
                          "custom_attributes": [],
                          "template": {
                            "schema_version": "0.0.1",
                            "info": {
                              "version": "1.0.1",
                              "uuid": "b16e8146-d14b-4052-8ad8-0fd6d53d9ed0",
                              "title": "A Single Step",
                              "description": "Add a fancy description here. It even supports __Markdown__!\n",
                              "author": {
                                "name": "Max Mustermann",
                                "email": "max.mustermann@company.com"
                              },
                              "slug": "a-single-step"
                            },
                            "fields": {
                              "sample": {
                                "type": "string",
                                "maxLength": 100
                              }
                            },
                            "substeps": [
                              {
                                "primary": {
                                  "type": "root",
                                  "children": [
                                    {
                                      "type": "element",
                                      "tagName": "p",
                                      "properties": {},
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "Load a "
                                        },
                                        {
                                          "type": "element",
                                          "tagName": "interpolation",
                                          "properties": {
                                            "formula": "sample"
                                          },
                                          "children": []
                                        },
                                        {
                                          "type": "text",
                                          "value": " into the "
                                        },
                                        {
                                          "type": "element",
                                          "tagName": "interpolation",
                                          "properties": {
                                            "formula": "powderDispenser"
                                          },
                                          "children": []
                                        },
                                        {
                                          "type": "text",
                                          "value": "."
                                        }
                                      ]
                                    }
                                  ],
                                  "data": {
                                    "quirksMode": false
                                  }
                                },
                                "secondary": {
                                  "type": "root",
                                  "children": [
                                    {
                                      "type": "element",
                                      "tagName": "p",
                                      "properties": {},
                                      "children": [
                                        {
                                          "type": "text",
                                          "value": "Please, confirm when you are done."
                                        }
                                      ]
                                    }
                                  ],
                                  "data": {
                                    "quirksMode": false
                                  }
                                },
                                "confirm": true
                              }
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_step_templates/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_step_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WorkflowStepTemplate.",
        "operationId": "deleteWorkflowStepTemplate",
        "summary": "Delete Workflow Step Template",
        "tags": [
          "workflow_step_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowStepTemplate to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Error (Template used by previous runs)": {
                    "summary": "Conflict Error (Template used by previous runs)",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent workflow_steps",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_step_templates/{id}/download": {
      "get": {
        "description": "Download a previously uploaded workflow template file.",
        "operationId": "downloadWorkflowStepTemplate",
        "summary": "Download Workflow Step Template",
        "tags": [
          "workflow_step_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStepTemplate with a file to download."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate download": {
                    "summary": "WorkflowStepTemplate download",
                    "value": "---\nschema_version: '0.0.1' # version of the workflow template schema\ninfo:\n  version: '1.0.1'\n  uuid: b16e8146-d14b-4052-8ad8-0fd6d53d9ed0 # can be passed an external uuid\n  title: A Single Step\n  description: |\n    Add a fancy description here. It even supports __Markdown__!\n  author:\n    name: Max Mustermann\n    email: max.mustermann@company.com\n  slug: a-single-step\n\nfields:\n  sample: # basic types\n    type: string\n    maxLength: 100\n\nsubsteps:\n  - primary: Load a {{sample}} into the {{powderDispenser}}.\n    secondary: Please, confirm when you are done.\n    confirm: true\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps": {
      "get": {
        "description": "Get a list of existing WorkflowSteps.",
        "operationId": "getWorkflowSteps",
        "summary": "Get Workflow Steps",
        "tags": [
          "workflow_steps"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStep attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowStepsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepsResponse"
                },
                "examples": {
                  "List of WorkflowSteps": {
                    "summary": "List of WorkflowSteps",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step",
                          "attributes": {
                            "title": "A step with a handled button.",
                            "pointer": "/steps/buttonStep",
                            "flow_pointer": "/flow/1",
                            "step_number": 2,
                            "current_substep": -1,
                            "snapshots": {},
                            "created_at": "2023-06-26T12:02:24.201Z",
                            "updated_at": "2023-06-26T12:02:24.201Z",
                            "completed_at": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "reviews": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_steps/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_step",
                          "attributes": {
                            "title": "A step with a handled button.",
                            "pointer": "/steps/buttonStep",
                            "flow_pointer": "/flow/1",
                            "step_number": 1,
                            "current_substep": -1,
                            "snapshots": {},
                            "created_at": "2023-06-26T12:02:24.237Z",
                            "updated_at": "2023-06-26T12:02:24.237Z",
                            "completed_at": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "reviews": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_steps/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_steps attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_steps given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps/{id}": {
      "get": {
        "description": "Get a single WorkflowStep by its id.",
        "operationId": "getWorkflowStep",
        "summary": "Get Workflow Step",
        "tags": [
          "workflow_steps"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStep to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStep attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepResponse"
                },
                "examples": {
                  "WorkflowStep": {
                    "summary": "WorkflowStep",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step",
                        "attributes": {
                          "title": "A step with a handled button.",
                          "pointer": "/steps/buttonStep",
                          "flow_pointer": "/flow/1",
                          "step_number": 2,
                          "current_substep": -1,
                          "snapshots": {},
                          "created_at": "2023-06-26T12:02:28.801Z",
                          "updated_at": "2023-06-26T12:02:28.801Z"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "reviews": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_steps/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_steps given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps/{id}/substeps/{index}/completion": {
      "post": {
        "description": "Complete a workflow substep.",
        "operationId": "createWorkflowStepSubstepCompletion",
        "summary": "Create Workflow Step Substep Completion",
        "tags": [
          "workflow_step_substep_completions"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the workflow step."
          },
          {
            "name": "index",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The index of the substep that should be completed."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create substepcompletion of a WorkflowStep.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowStepSubstepCompletion"
              },
              "example": {
                "data": {
                  "type": "manual",
                  "substep": "0",
                  "key": "clickable-button"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepResponse"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step",
                        "attributes": {
                          "title": "A step with a handled button.",
                          "pointer": "/steps/buttonStep",
                          "flow_pointer": "/flow/1",
                          "step_number": 1,
                          "current_substep": 1,
                          "snapshots": {},
                          "created_at": "2023-06-26T12:02:34.327Z",
                          "updated_at": "2023-06-26T12:02:34.670Z",
                          "completed_at": "2023-06-26T12:02:34.667Z"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "reviews": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_steps/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps/{id}/substeps/{index}/repeat": {
      "post": {
        "description": "Repeat a workflow substep.",
        "operationId": "createWorkflowStepSubstepRepeat",
        "summary": "Create Workflow Step Substep Repeat",
        "tags": [
          "workflow_step_substep_repeats"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the workflow step."
          },
          {
            "name": "index",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The index of the substep that should be repeated."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create substeprepeat of a WorkflowStep.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowStepSubstepRepeat"
              },
              "example": {
                "data": {
                  "type": "manual",
                  "substep": "0",
                  "key": "clickable-button"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepResponse"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step",
                        "attributes": {
                          "title": "A step with a handled button.",
                          "pointer": "/steps/buttonStep",
                          "flow_pointer": "/flow/1",
                          "step_number": 1,
                          "current_substep": 1,
                          "snapshots": {},
                          "created_at": "2023-06-26T12:02:37.530Z",
                          "updated_at": "2023-06-26T12:02:37.775Z",
                          "completed_at": "2023-06-26T12:02:37.774Z"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "reviews": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_steps/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps/{id}/trigger": {
      "post": {
        "description": "Signal a trigger to a workflow step.",
        "operationId": "createWorkflowStepTrigger",
        "summary": "Create Workflow Step Trigger",
        "tags": [
          "workflow_step_triggers"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the workflow step the trigger should fire for."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create trigger of a WorkflowStep.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerSignal"
              },
              "example": {
                "data": {
                  "type": "manual",
                  "substep": "0",
                  "key": "clickable-button"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Trigger Type": {
                    "summary": "Bad Trigger Type",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "The identifier invalid does not match any defined identifier. Recognized triggers are: CommandResponse, DataPoint, DeviceStatusUpdate, FieldUpdate, Manual, RunComplete, RunLock, RunPause, RunResume, RunStart, Scan, SelectorConfirm, StepComplete, StepStart, SubstepComplete, SubstepPause, SubstepResume, SubstepStart, TimerComplete, TimerReset, TimerStart, TimerStop.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Trigger Not Handled ": {
                    "summary": "Trigger Not Handled ",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "The identifier invalid does not match any defined identifier. Recognized triggers are: CommandResponse, DataPoint, DeviceStatusUpdate, FieldUpdate, Manual, RunComplete, RunLock, RunPause, RunResume, RunStart, Scan, SelectorConfirm, StepComplete, StepStart, SubstepComplete, SubstepPause, SubstepResume, SubstepStart, TimerComplete, TimerReset, TimerStart, TimerStop.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "param is missing or the value is empty: data",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_templates": {
      "get": {
        "description": "Get a list of existing WorkflowTemplates.",
        "operationId": "getWorkflowTemplates",
        "summary": "Get Workflow Templates",
        "tags": [
          "workflow_templates"
        ],
        "parameters": [
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowTemplate attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowTemplatesFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplatesResponse"
                },
                "examples": {
                  "List of WorkflowTemplates": {
                    "summary": "List of WorkflowTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "3aaccefe-7e54-4e09-b4da-93c326871ace",
                            "template_version": "1.0.0",
                            "title": "Completing Run",
                            "description": null,
                            "slug": "completing-run",
                            "updated_at": "2023-06-26T13:02:46.572Z",
                            "created_at": "2023-06-26T12:02:46.701Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "3aaccefe-7e54-4e09-b4da-93c326871ace",
                                "title": "Completing Run"
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Step 1"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Completed"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Aborted"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Skipped"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "stepTwo": {
                                  "info": {
                                    "title": "Step 2"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "If a step never gets taken, does the step exists?"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne",
                                "stepTwo"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "a3b008a9-531c-4e77-b227-f0b3090b6f7d",
                            "template_version": "1.0.0",
                            "title": "Triggers: Manual",
                            "description": "Description",
                            "slug": "triggers-manual",
                            "updated_at": "2023-06-26T12:02:46.856Z",
                            "created_at": "2023-06-26T12:02:46.856Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "a3b008a9-531c-4e77-b227-f0b3090b6f7d",
                                "title": "Triggers: Manual",
                                "description": "Description"
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "behaviors": [
                                {
                                  "when": {
                                    "manual": {
                                      "key": "clack"
                                    }
                                  },
                                  "do": {
                                    "ALERT": {
                                      "title": "Global alert",
                                      "text": "Button is clicked!"
                                    }
                                  }
                                }
                              ],
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Do something"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "buttons": [
                                        {
                                          "label": "Click",
                                          "key": "clack"
                                        }
                                      ]
                                    }
                                  ],
                                  "behaviors": [
                                    {
                                      "when": {
                                        "MANUAL": {
                                          "key": "alert_confirmed"
                                        }
                                      },
                                      "do": [
                                        "CONFIRM_ALERT"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "58a2b821-2b48-4402-9e33-b27ad920a8d6",
                            "template_version": "1.0.5",
                            "title": "Test Workflow | Context Information No Config",
                            "description": "Workflow containing context information\n",
                            "slug": "test-workflow-context-information-no-config",
                            "updated_at": "2023-06-26T14:02:46.878Z",
                            "created_at": "2023-06-26T12:02:47.006Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.5",
                                "uuid": "58a2b821-2b48-4402-9e33-b27ad920a8d6",
                                "title": "Test Workflow | Context Information No Config",
                                "description": "Workflow containing context information\n"
                              },
                              "contextInfo": {
                                "pages": [
                                  {
                                    "title": "Global Info",
                                    "content": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "MyTitle"
                                              },
                                              "children": []
                                            },
                                            {
                                              "type": "text",
                                              "value": "\n"
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "interpolation",
                                              "properties": {
                                                "formula": "IsNotDefined"
                                              },
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "text",
                                          "value": "\n"
                                        },
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nullam ac tortor vitae purus "
                                            },
                                            {
                                              "type": "element",
                                              "tagName": "strong",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "faucibus ornare suspendisse"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "text",
                                              "value": " sed. Cursus turpis massa tincidunt dui ut ornare lectus sit. Tristique nulla aliquet enim tortor at auctor urna nunc id. Ac feugiat sed lectus vestibulum mattis. Praesent semper feugiat nibh sed pulvinar proin gravida hendrerit."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "text",
                                          "value": "\n"
                                        },
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Viverra justo nec ultrices dui sapien. Sed odio morbi quis commodo odio aenean sed adipiscing. Tristique et egestas quis ipsum suspendisse. Velit sed ullamcorper morbi tincidunt ornare massa. Facilisis sed odio morbi quis commodo. Arcu cursus vitae congue mauris rhoncus. Integer malesuada nunc vel risus. Pellentesque habitant morbi tristique senectus. Posuere morbi leo urna molestie at elementum eu facilisis sed. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. At augue eget arcu dictum."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "text",
                                          "value": "\n"
                                        },
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Massa sapien faucibus et molestie ac. Lobortis scelerisque fermentum dui faucibus in. In cursus turpis massa tincidunt dui. Enim nec dui nunc mattis enim ut tellus. Etiam dignissim diam quis enim. Vestibulum lectus mauris ultrices eros. Ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue eget. At elementum eu facilisis sed odio morbi quis commodo. Penatibus et magnis dis parturient montes nascetur ridiculus. Montes nascetur ridiculus mus mauris. Pharetra massa massa ultricies mi quis hendrerit."
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              },
                              "fields": {
                                "MyTitle": {
                                  "type": "string",
                                  "defaultValue": "Content Title"
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Without additional step context info"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "This title is shown in the context info: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyTitle"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                },
                                "stepTwo": {
                                  "info": {
                                    "title": "With additional step context info"
                                  },
                                  "contextInfo": {
                                    "pages": [
                                      {
                                        "title": "Step Formula",
                                        "content": {
                                          "type": "root",
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "text",
                                                  "value": "H2O"
                                                }
                                              ]
                                            }
                                          ],
                                          "data": {
                                            "quirksMode": false
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "This title is shown in the context info: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyTitle"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne",
                                "stepTwo"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "8e3521e7-76e6-45ad-aac2-7f7f94b488dc",
                            "template_version": "1.0.0",
                            "title": "Workflow with external steps",
                            "description": "Add a fancy description here. It even supports __Markdown__!\\n",
                            "slug": "external-steps",
                            "updated_at": "2023-06-26T14:02:47.021Z",
                            "created_at": "2023-06-26T12:02:47.149Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "8e3521e7-76e6-45ad-aac2-7f7f94b488dc",
                                "title": "Workflow with external steps",
                                "description": "Add a fancy description here. It even supports __Markdown__!\\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "external-steps"
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                                  "version": "1.0.0"
                                },
                                "stepTwo": {
                                  "uuid": "573313f4-3ab3-449e-90dc-a48d6eb02d65",
                                  "version": "1.0.0"
                                }
                              },
                              "flow": [
                                "stepOne",
                                "stepTwo"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/4"
                          }
                        },
                        {
                          "id": "5",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "93190d32-9533-11ea-bb37-0242ac130002",
                            "template_version": "1.0.0",
                            "title": "WorkflowTemplate",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T14:02:47.173Z",
                            "created_at": "2023-06-26T12:02:47.311Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "93190d32-9533-11ea-bb37-0242ac130002",
                                "title": "WorkflowTemplate",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "fields": {
                                "someString": {
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "weighing": {
                                  "info": {
                                    "title": "Weighing"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Place the "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "someString"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " on the balance."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Your fancy markdown body with formatting, images and what not else!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "weighing"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/5"
                          }
                        },
                        {
                          "id": "6",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "ac7928cf-0686-4d37-adf0-4216827ced03",
                            "template_version": "1.1.0",
                            "title": "This workflow template has a very, very long title that our skilled frontend engineers will handle graciously and display in the best way possible.",
                            "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus animi perspiciatis soluta enim. Expedita delectus, vel doloremque dicta culpa reiciendis sint reprehenderit aliquam, ex facere, neque quos. Amet animi dolorum asperiores eos aliquam hic exercitationem voluptatem inventore labore odit vero dolores, repellendus voluptates nesciunt laboriosam laudantium quas dolor quis nulla provident sunt saepe tempora distinctio natus! Animi ullam corrupti magnam? Eligendi voluptate aliquam placeat officiis incidunt, culpa cumque dolor ipsam alias voluptates, praesentium quae aliquid quo, eum voluptatibus cupiditate quos fugiat aperiam. Ad voluptate veritatis reiciendis eligendi quidem vitae repellendus impedit magnam perspiciatis officiis, voluptatibus eveniet tenetur aliquid rerum? Maxime ad soluta velit amet quo cumque aut! Eveniet eius repellendus quaerat mollitia possimus dolore modi explicabo iste deserunt libero quia, quibusdam, optio, illo sit consequatur. Fugit tempore temporibus quidem ut placeat libero impedit, perferendis veritatis voluptate ex excepturi reiciendis ducimus necessitatibus unde amet non dolorem nisi autem provident laudantium, eaque in sapiente. Commodi, exercitationem! Assumenda voluptatibus vitae consequuntur tempora, obcaecati impedit ex libero totam velit quam nam, quia doloribus repudiandae sequi asperiores officiis iusto aut repellat doloremque? Saepe dolores voluptate dicta adipisci consectetur aliquam totam porro eaque, architecto maxime officia facere quas hic et! Veniam vitae quis accusamus omnis illum dolorem blanditiis eos iure laborum. Earum tempora tenetur aperiam nihil molestiae necessitatibus alias aut, eos quidem non aliquam sunt voluptate nobis culpa quod excepturi, accusantium laborum. Voluptatibus dolorem rem eius dolore, accusamus rerum modi adipisci perspiciatis delectus minus provident laboriosam nobis accusantium expedita in at ab labore placeat officiis nesciunt cum. At nobis cum reiciendis exercitationem pariatur, obcaecati aspernatur earum perspiciatis deleniti. Totam distinctio commodi quisquam, veniam eos dolor, inventore impedit necessitatibus odio delectus mollitia aliquam esse earum qui doloribus at ex fugit libero maxime numquam debitis vitae non. Recusandae dignissimos expedita hic, id necessitatibus accusamus, quaerat tenetur esse explicabo atque eligendi. Totam repellendus autem fuga quibusdam quisquam? Obcaecati aliquam ad reiciendis doloremque ab sapiente odio natus laborum qui id, veniam perferendis ipsam blanditiis voluptate explicabo dolores unde. Nobis recusandae harum fuga, temporibus molestias dolor ullam beatae itaque nam labore nemo tenetur dolore dolores dolorum facere aut voluptatem eos corporis ducimus explicabo id asperiores magnam sint adipisci. Exercitationem laboriosam quod mollitia non quia qui totam veniam amet. Quasi voluptas, aliquid debitis aut, error id harum quis vero, velit magnam illo quam ad excepturi molestias amet veritatis sit voluptatum dolore ab eum et eos fuga? In recusandae, quo minima, corporis quisquam autem sit debitis quam suscipit, dignissimos fuga! Est recusandae laboriosam dolorem enim cupiditate? Beatae, vitae. Culpa distinctio, voluptate soluta tempore commodi minus unde aut officia eligendi placeat aliquid ut pariatur suscipit reiciendis reprehenderit. Ea adipisci cumque soluta non dolorum totam accusamus tenetur quisquam veniam inventore iure eos fuga repudiandae, quod ducimus neque quia, doloribus sunt velit harum itaque incidunt. Delectus fuga at dolore ipsum libero quae possimus veniam esse vel in. Quia sequi quaerat porro repellat vel, provident assumenda voluptas incidunt sit quidem animi aliquam minima distinctio? Unde, harum ducimus molestiae nemo, fugit perspiciatis perferendis quis incidunt quas aperiam odit.",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T14:02:47.325Z",
                            "created_at": "2023-06-26T12:02:47.443Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.1.0",
                                "uuid": "ac7928cf-0686-4d37-adf0-4216827ced03",
                                "title": "This workflow template has a very, very long title that our skilled frontend engineers will handle graciously and display in the best way possible.",
                                "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus animi perspiciatis soluta enim. Expedita delectus, vel doloremque dicta culpa reiciendis sint reprehenderit aliquam, ex facere, neque quos. Amet animi dolorum asperiores eos aliquam hic exercitationem voluptatem inventore labore odit vero dolores, repellendus voluptates nesciunt laboriosam laudantium quas dolor quis nulla provident sunt saepe tempora distinctio natus! Animi ullam corrupti magnam? Eligendi voluptate aliquam placeat officiis incidunt, culpa cumque dolor ipsam alias voluptates, praesentium quae aliquid quo, eum voluptatibus cupiditate quos fugiat aperiam. Ad voluptate veritatis reiciendis eligendi quidem vitae repellendus impedit magnam perspiciatis officiis, voluptatibus eveniet tenetur aliquid rerum? Maxime ad soluta velit amet quo cumque aut! Eveniet eius repellendus quaerat mollitia possimus dolore modi explicabo iste deserunt libero quia, quibusdam, optio, illo sit consequatur. Fugit tempore temporibus quidem ut placeat libero impedit, perferendis veritatis voluptate ex excepturi reiciendis ducimus necessitatibus unde amet non dolorem nisi autem provident laudantium, eaque in sapiente. Commodi, exercitationem! Assumenda voluptatibus vitae consequuntur tempora, obcaecati impedit ex libero totam velit quam nam, quia doloribus repudiandae sequi asperiores officiis iusto aut repellat doloremque? Saepe dolores voluptate dicta adipisci consectetur aliquam totam porro eaque, architecto maxime officia facere quas hic et! Veniam vitae quis accusamus omnis illum dolorem blanditiis eos iure laborum. Earum tempora tenetur aperiam nihil molestiae necessitatibus alias aut, eos quidem non aliquam sunt voluptate nobis culpa quod excepturi, accusantium laborum. Voluptatibus dolorem rem eius dolore, accusamus rerum modi adipisci perspiciatis delectus minus provident laboriosam nobis accusantium expedita in at ab labore placeat officiis nesciunt cum. At nobis cum reiciendis exercitationem pariatur, obcaecati aspernatur earum perspiciatis deleniti. Totam distinctio commodi quisquam, veniam eos dolor, inventore impedit necessitatibus odio delectus mollitia aliquam esse earum qui doloribus at ex fugit libero maxime numquam debitis vitae non. Recusandae dignissimos expedita hic, id necessitatibus accusamus, quaerat tenetur esse explicabo atque eligendi. Totam repellendus autem fuga quibusdam quisquam? Obcaecati aliquam ad reiciendis doloremque ab sapiente odio natus laborum qui id, veniam perferendis ipsam blanditiis voluptate explicabo dolores unde. Nobis recusandae harum fuga, temporibus molestias dolor ullam beatae itaque nam labore nemo tenetur dolore dolores dolorum facere aut voluptatem eos corporis ducimus explicabo id asperiores magnam sint adipisci. Exercitationem laboriosam quod mollitia non quia qui totam veniam amet. Quasi voluptas, aliquid debitis aut, error id harum quis vero, velit magnam illo quam ad excepturi molestias amet veritatis sit voluptatum dolore ab eum et eos fuga? In recusandae, quo minima, corporis quisquam autem sit debitis quam suscipit, dignissimos fuga! Est recusandae laboriosam dolorem enim cupiditate? Beatae, vitae. Culpa distinctio, voluptate soluta tempore commodi minus unde aut officia eligendi placeat aliquid ut pariatur suscipit reiciendis reprehenderit. Ea adipisci cumque soluta non dolorum totam accusamus tenetur quisquam veniam inventore iure eos fuga repudiandae, quod ducimus neque quia, doloribus sunt velit harum itaque incidunt. Delectus fuga at dolore ipsum libero quae possimus veniam esse vel in. Quia sequi quaerat porro repellat vel, provident assumenda voluptas incidunt sit quidem animi aliquam minima distinctio? Unde, harum ducimus molestiae nemo, fugit perspiciatis perferendis quis incidunt quas aperiam odit.",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "config": {
                                "navigationDelay": "2s"
                              },
                              "fields": {
                                "sample": {
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "config": {
                                    "navigationDelay": "3s"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Now, look at this field "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "sample"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": "! Great!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne",
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "bce232bd-e271-4a7f-8c4e-1f9f1c8e51ec",
                            "template_version": "1.0.0",
                            "title": "My Workflow | Script fields",
                            "description": "Description",
                            "slug": "my-workflow-script-fields",
                            "updated_at": "2023-06-26T14:02:47.467Z",
                            "created_at": "2023-06-26T12:02:47.610Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "bce232bd-e271-4a7f-8c4e-1f9f1c8e51ec",
                                "title": "My Workflow | Script fields",
                                "description": "Description"
                              },
                              "fields": {
                                "MyQuantity": {
                                  "type": "quantity",
                                  "unit": "kg"
                                },
                                "MyScript": {
                                  "type": "script",
                                  "script": "MyQuantity * 2",
                                  "result": {
                                    "type": "quantity",
                                    "unit": "g"
                                  }
                                },
                                "MyScriptZeroValue": {
                                  "type": "script",
                                  "script": "1 * 0",
                                  "result": {
                                    "type": "number"
                                  }
                                },
                                "MyScriptInteger": {
                                  "type": "script",
                                  "script": "SQRT(20)",
                                  "result": {
                                    "type": "integer"
                                  }
                                },
                                "MyDependentScript": {
                                  "type": "script",
                                  "script": "MyScript - MyQuantity",
                                  "result": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  }
                                },
                                "MyBooleanScript": {
                                  "type": "script",
                                  "script": "MyDependentScript < MyScript",
                                  "result": {
                                    "type": "boolean"
                                  }
                                },
                                "MyBooleanFalseScript": {
                                  "type": "script",
                                  "script": "MyScript = MyQuantity",
                                  "result": {
                                    "type": "boolean"
                                  }
                                },
                                "MyStringScript": {
                                  "type": "script",
                                  "script": "CONCAT('test ', MyScript, ' concat')",
                                  "result": {
                                    "type": "string"
                                  }
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "behaviors": [
                                    {
                                      "when": {
                                        "on_manual": {
                                          "key": "set"
                                        }
                                      },
                                      "do": {
                                        "set_field": {
                                          "field": "MyQuantity",
                                          "value": "\"1 kg\""
                                        }
                                      }
                                    },
                                    {
                                      "when": {
                                        "on_manual": {
                                          "key": "double"
                                        }
                                      },
                                      "do": {
                                        "set_field": {
                                          "field": "MyQuantity",
                                          "value": "\"2 kg\""
                                        }
                                      }
                                    }
                                  ],
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "MyQuantity: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyQuantity"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": ", MyScript: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyScript"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": ", MyDependentScript: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyDependentScript"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "buttons": [
                                        {
                                          "label": "Set",
                                          "key": "set"
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "MyQuantity: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyQuantity"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": ", MyScript: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyScript"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": ", MyDependentScript: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyDependentScript"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "buttons": [
                                        {
                                          "label": "Double it up!",
                                          "key": "double"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/7"
                          }
                        },
                        {
                          "id": "8",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "2fb9a584-3a3e-49e9-a211-72a65151253c",
                            "template_version": "1.0.3",
                            "title": "Test Workflow | Scan to Select",
                            "description": "Add a fancy description here. It even supports __Markdown__\n",
                            "slug": "test-workflow-scan-select",
                            "updated_at": "2023-06-26T14:02:47.623Z",
                            "created_at": "2023-06-26T12:02:47.761Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "1.0.0",
                              "info": {
                                "version": "1.0.3",
                                "uuid": "2fb9a584-3a3e-49e9-a211-72a65151253c",
                                "title": "Test Workflow | Scan to Select",
                                "description": "Add a fancy description here. It even supports __Markdown__\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "test-workflow-scan-select"
                              },
                              "config": {
                                "contextInfoSettings": {
                                  "contentPanel": {
                                    "height": 130
                                  },
                                  "initialState": {
                                    "open": true
                                  }
                                }
                              },
                              "contextInfo": {
                                "pages": [
                                  {
                                    "title": "Device Select",
                                    "content": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "gridcontainer",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "grid",
                                              "properties": {
                                                "card": "card"
                                              },
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "tagName": "p",
                                                  "properties": {},
                                                  "children": [
                                                    {
                                                      "type": "element",
                                                      "tagName": "banginterpolation",
                                                      "properties": {
                                                        "formula": "Device4"
                                                      },
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              },
                              "fields": {
                                "Device1": {
                                  "group": "Instruments",
                                  "title": "Device Field #1",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "hidden": true
                                },
                                "Device2": {
                                  "group": "Instruments",
                                  "title": "Device Field #2",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "hidden": true
                                },
                                "Device3": {
                                  "group": "Instruments",
                                  "title": "Device Field #3",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "hidden": true
                                },
                                "Device4": {
                                  "group": "Instruments",
                                  "title": "Device Field #4",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "hidden": true
                                },
                                "Device5": {
                                  "group": "Instruments",
                                  "title": "Device Field #5",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "hidden": true
                                },
                                "Sample1": {
                                  "title": "Sample Field",
                                  "type": "relationship",
                                  "resourceType": "samples",
                                  "hidden": true
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Beep! Beep!"
                                  },
                                  "contextInfo": {
                                    "pages": [
                                      {
                                        "title": "Empty Device Select",
                                        "content": {
                                          "type": "root",
                                          "children": [
                                            {
                                              "type": "element",
                                              "tagName": "p",
                                              "properties": {},
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "tagName": "banginterpolation",
                                                  "properties": {
                                                    "formula": "Device5"
                                                  },
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ],
                                          "data": {
                                            "quirksMode": false
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Select Resources"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "expandDescription": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Select devices "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "Device1"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " | "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "Device2"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " via the inline relationship field."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "Device1"
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "Sample1"
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "Device2|dialog"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Select Resources"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "expandDescription": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Select a device "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "Device3"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " via the inline relationship field.\n"
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "Device3|dialog"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/8"
                          }
                        },
                        {
                          "id": "9",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "55455e95-bee4-4de2-bf98-d1e226758949",
                            "template_version": "1.0.0",
                            "title": "Test Workflow | Workflow Navigation",
                            "description": "Minimal workflow used to test the workflow navigation menu.\n",
                            "slug": "test-workflow-workflow-navigation",
                            "updated_at": "2023-06-26T14:02:47.774Z",
                            "created_at": "2023-06-26T12:02:47.900Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "55455e95-bee4-4de2-bf98-d1e226758949",
                                "title": "Test Workflow | Workflow Navigation",
                                "description": "Minimal workflow used to test the workflow navigation menu.\n"
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "A "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "great"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " step!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "secondary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Be the greatness that they deserves"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Any resemblance of the quote to certain movie is purely coincidence."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "em",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "True story"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "An even "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "greater"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " step!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "secondary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "But not the one they need right now"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "expandDescription": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Brought to you by:"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Robert B. Weide"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                {
                                  "stepOne": {
                                    "title": "First Step"
                                  }
                                },
                                {
                                  "stepOne": {
                                    "title": "Second Step"
                                  }
                                },
                                {
                                  "stepOne": {
                                    "title": "Third Step with Longer Title"
                                  }
                                }
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/9"
                          }
                        },
                        {
                          "id": "10",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "93190d32-9533-11ea-bb37-0242ac130002",
                            "template_version": "1.0.1",
                            "title": "WorkflowTemplate",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T15:02:47.915Z",
                            "created_at": "2023-06-26T12:02:48.034Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "93190d32-9533-11ea-bb37-0242ac130002",
                                "title": "WorkflowTemplate",
                                "description": "Add a fancy description here. It even supports __Markdown__!\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "fields": {
                                "someString": {
                                  "type": "string",
                                  "maxLength": 100
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "weighing": {
                                  "info": {
                                    "title": "Weighing"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Place the "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "someString"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " on the balance."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Your fancy markdown body with formatting, images and what not else!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "weighing"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/10"
                          }
                        },
                        {
                          "id": "11",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "f59bac62-1021-4462-a90f-8d4cf9c733f4",
                            "template_version": "1.0.1",
                            "title": "Test Workflow | Secrets",
                            "description": "Workflow with secrets 🤫",
                            "slug": "test-workflow-secrets",
                            "updated_at": "2023-06-26T15:02:48.051Z",
                            "created_at": "2023-06-26T12:02:48.178Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "f59bac62-1021-4462-a90f-8d4cf9c733f4",
                                "title": "Test Workflow | Secrets",
                                "description": "Workflow with secrets 🤫"
                              },
                              "config": {
                                "navigationDelay": "0s"
                              },
                              "secrets": {
                                "org-secret": {
                                  "scope": "organisation",
                                  "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae quas quibusdam expedita architecto maiores corporis fuga animi explicabo aperiam aliquid blanditiis distinctio ullam consequatur, autem ratione suscipit id consectetur a sit."
                                },
                                "personal-secret": {
                                  "scope": "personal",
                                  "description": "My password is 'qwerty'."
                                }
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Secrets"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "A "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "great"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " step!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "behaviors": [
                                        {
                                          "when": "on_substep_start",
                                          "do": [
                                            {
                                              "add_step": {
                                                "uuid": "9f4293be-9204-4959-895a-c0ee9def23c0",
                                                "version": "1.0.0"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/11"
                          }
                        },
                        {
                          "id": "12",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "0d287fe0-b28a-4742-9d79-896ccac13dd4",
                            "template_version": "1.0.0",
                            "title": "My Workflow",
                            "description": "Description",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T15:02:48.209Z",
                            "created_at": "2023-06-26T12:02:48.362Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "0d287fe0-b28a-4742-9d79-896ccac13dd4",
                                "title": "My Workflow",
                                "description": "Description",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "fields": {
                                "MyDevice": {
                                  "type": "relationship",
                                  "resourceType": "devices"
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "behaviors": [
                                    {
                                      "when": {
                                        "command_response": {
                                          "device": "MyDevice",
                                          "command": "do_something"
                                        }
                                      },
                                      "do": "complete_substep"
                                    }
                                  ],
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "First step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Second step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": [
                                            {
                                              "command_response": {
                                                "device": "MyDevice",
                                                "command": "do_something"
                                              }
                                            },
                                            {
                                              "command_response": {
                                                "device": "MyDevice",
                                                "command": "do_something_else"
                                              }
                                            }
                                          ],
                                          "do": "complete_substep"
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Third step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": {
                                            "command_response": {
                                              "device": "MyDevice",
                                              "command": "do_something_else"
                                            }
                                          },
                                          "do": "repeat_step"
                                        },
                                        {
                                          "when": {
                                            "command_response": {
                                              "device": "MyDevice",
                                              "command": "do_something_else"
                                            }
                                          },
                                          "do": "complete_substep"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/12"
                          }
                        },
                        {
                          "id": "13",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "0d287fe0-b28a-4742-9d79-896ccac13dd4",
                            "template_version": "1.0.1",
                            "title": "My Workflow",
                            "description": "Description",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T15:02:48.377Z",
                            "created_at": "2023-06-26T12:02:48.535Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.1",
                                "uuid": "0d287fe0-b28a-4742-9d79-896ccac13dd4",
                                "title": "My Workflow",
                                "description": "Description",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "fields": {
                                "MyDevice": {
                                  "type": "relationship",
                                  "resourceType": "devices"
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "behaviors": [
                                    {
                                      "when": {
                                        "command_response": {
                                          "device": "MyDevice",
                                          "command": "do_something"
                                        }
                                      },
                                      "do": "complete_substep"
                                    }
                                  ],
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "First step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Second step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": [
                                            {
                                              "command_response": {
                                                "device": "MyDevice",
                                                "command": "do_something"
                                              }
                                            },
                                            {
                                              "command_response": {
                                                "device": "MyDevice",
                                                "command": "do_something_else"
                                              }
                                            }
                                          ],
                                          "do": "complete_substep"
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Third step."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "behaviors": [
                                        {
                                          "when": {
                                            "command_response": {
                                              "device": "MyDevice",
                                              "command": "do_something_else"
                                            }
                                          },
                                          "do": "repeat_step"
                                        },
                                        {
                                          "when": {
                                            "command_response": {
                                              "device": "MyDevice",
                                              "command": "do_something_else"
                                            }
                                          },
                                          "do": "complete_substep"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/13"
                          }
                        },
                        {
                          "id": "14",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "f59bac62-1021-4462-a90f-8d4cf9c733f4",
                            "template_version": "1.0.0",
                            "title": "Test Workflow | Secrets",
                            "description": "Workflow with secrets 🤫",
                            "slug": "test-workflow-secrets",
                            "updated_at": "2023-06-26T15:02:48.554Z",
                            "created_at": "2023-06-26T12:02:48.707Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "f59bac62-1021-4462-a90f-8d4cf9c733f4",
                                "title": "Test Workflow | Secrets",
                                "description": "Workflow with secrets 🤫"
                              },
                              "config": {
                                "navigationDelay": "0s"
                              },
                              "secrets": {
                                "org-secret": {
                                  "scope": "organisation",
                                  "description": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae quas quibusdam expedita architecto maiores corporis fuga animi explicabo aperiam aliquid blanditiis distinctio ullam consequatur, autem ratione suscipit id consectetur a sit."
                                },
                                "personal-secret": {
                                  "scope": "personal",
                                  "description": "My password is 'qwerty'."
                                }
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Secrets"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "A "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "great"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " step!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/14"
                          }
                        },
                        {
                          "id": "15",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "db64b719-c53a-4815-ba74-8b46e8cd0754",
                            "template_version": "1.0.0",
                            "title": "Test Workflow | MOAR SECRETS!",
                            "description": "Workflow with secrets 🤫",
                            "slug": "test-workflow-moar-secrets",
                            "updated_at": "2023-06-26T15:02:48.723Z",
                            "created_at": "2023-06-26T12:02:48.853Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "db64b719-c53a-4815-ba74-8b46e8cd0754",
                                "title": "Test Workflow | MOAR SECRETS!",
                                "description": "Workflow with secrets 🤫"
                              },
                              "config": {
                                "navigationDelay": "0s"
                              },
                              "secrets": {
                                "org-secret": {
                                  "scope": "organisation",
                                  "description": "This is a really popular secret that is requested by yet another resource."
                                }
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Secrets"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "A "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "strong",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "great"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "text",
                                                "value": " step!"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/15"
                          }
                        },
                        {
                          "id": "16",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "dab590f4-c9e7-4414-bfb4-18f1e09e8252",
                            "template_version": "1.0.0",
                            "title": "My Workflow | Step agent",
                            "description": "Description",
                            "slug": "my-workflow-step-agent",
                            "updated_at": "2023-06-26T15:02:48.876Z",
                            "created_at": "2023-06-26T12:02:49.014Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "dab590f4-c9e7-4414-bfb4-18f1e09e8252",
                                "title": "My Workflow | Step agent",
                                "description": "Description"
                              },
                              "fields": {
                                "MyDevice": {
                                  "type": "relationship",
                                  "resourceType": "devices"
                                },
                                "MyNumber": {
                                  "type": "number",
                                  "formatSpecifier": ".0%",
                                  "defaultValue": 0
                                },
                                "MyBool": {
                                  "type": "boolean",
                                  "defaultValue": true
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "behaviors": [
                                    {
                                      "when": {
                                        "on_data_point": {
                                          "device": "MyDevice",
                                          "channel": "weight"
                                        }
                                      },
                                      "do": "complete_substep"
                                    },
                                    {
                                      "when": {
                                        "on_command_response": {
                                          "device": "MyDevice",
                                          "channel": "power"
                                        }
                                      },
                                      "do": "complete_substep"
                                    }
                                  ],
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Number: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyNumber"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " | Power: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyBool"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/16"
                          }
                        },
                        {
                          "id": "17",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "35b6efe7-2a92-438d-8060-3cfc682a6bbc",
                            "template_version": "1.0.0",
                            "title": "Repeating Steps",
                            "description": "Description",
                            "slug": "repeating-steps",
                            "updated_at": "2023-06-26T15:02:49.029Z",
                            "created_at": "2023-06-26T12:02:49.154Z",
                            "hidden_at": null,
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "35b6efe7-2a92-438d-8060-3cfc682a6bbc",
                                "title": "Repeating Steps",
                                "description": "Description"
                              },
                              "fields": {
                                "Counter": {
                                  "type": "number",
                                  "defaultValue": 0
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Do Something"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "First step"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Second Step "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "Counter"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "behaviors": [
                                        {
                                          "when": "on_substep_start",
                                          "do": {
                                            "set_field": {
                                              "field": "Counter",
                                              "value": "Counter + 1"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Last step"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/17"
                          }
                        },
                        {
                          "id": "18",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "b886c7c0-4098-4dd0-9e25-9bdc64f451b3",
                            "template_version": "0.0.1",
                            "title": "Test Workflow | Signature",
                            "description": null,
                            "slug": "test-workflow-signature",
                            "updated_at": "2023-06-26T12:02:49.290Z",
                            "created_at": "2023-06-26T12:02:49.290Z",
                            "hidden_at": "2023-06-26T12:02:49.167Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "0.0.1",
                                "uuid": "b886c7c0-4098-4dd0-9e25-9bdc64f451b3",
                                "title": "Test Workflow | Signature"
                              },
                              "config": {
                                "signature": {
                                  "enabled": true
                                }
                              },
                              "fields": {
                                "MyField": {
                                  "type": "string",
                                  "hidden": true
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "preparation": {
                                  "info": {
                                    "title": "Preparation"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "whatcha doin?"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "MyField"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "expandDescription": true,
                                      "behaviors": [
                                        {
                                          "when": {
                                            "on_field_update": {
                                              "field": "MyField"
                                            }
                                          },
                                          "do": "complete_substep"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "doit": {
                                  "info": {
                                    "title": "Do the thing"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Doing "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "banginterpolation",
                                                "properties": {
                                                  "formula": "MyField"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    }
                                  ]
                                },
                                "verification": {
                                  "info": {
                                    "title": "Verification"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "How was it?"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "MyField"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " was legend, wait for it, dary! legendary."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "preparation",
                                "doit",
                                "verification"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/18"
                          }
                        },
                        {
                          "id": "19",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "ebf69df5-d5e3-4e87-8210-064f4a5cdc3b",
                            "template_version": "1.0.0",
                            "title": "Test Workflow | Lifecycle",
                            "description": "Minimal workflow used to test general lifecycle behavior.\n",
                            "slug": "test-workflow-lifecycle",
                            "updated_at": "2023-06-26T12:02:49.415Z",
                            "created_at": "2023-06-26T12:02:49.415Z",
                            "hidden_at": "2023-06-26T12:02:49.302Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.0",
                                "uuid": "ebf69df5-d5e3-4e87-8210-064f4a5cdc3b",
                                "title": "Test Workflow | Lifecycle",
                                "description": "Minimal workflow used to test general lifecycle behavior.\n"
                              },
                              "fields": {
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "stepOne": {
                                  "info": {
                                    "title": "Step 1"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Completed"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Aborted"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Skipped"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "stepTwo": {
                                  "info": {
                                    "title": "Step 2"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "If a step never gets taken, does the step exists?"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                "stepOne",
                                "stepTwo"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/19"
                          }
                        },
                        {
                          "id": "20",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "2e7d5c61-c5cd-4856-b155-19923480d012",
                            "template_version": "1.0.9",
                            "title": "Test SOP 123",
                            "description": "## Test SOP 123\nThis our Test Workflow for the first milestone of the SmartLab Project.\n\n### General features of Milestone 1\nWhen you reached this point you have already figured out how to:\n\n- upload a workflow template\n- and open your template\n\nAnd there is more to discover:\n\n- uploading new versions of your template\n- creating workflow runs from your template\n- starting, pausing, resuming, closing and re-entering workflow runs\n\n### Features covered in this workflow\n\n- Different field types\n- Markdown descriptions (like this one)\n- Preparing fields, like selecting a device\n- Basic sequential execution of steps\n- Inline field references on substeps\n- A general confirm button\n- Navigation on step completion\n- Manual Triggers, e.g. Buttons with\n- Actions to\n   1. repeat a step\n   1. complete a substep\n   1. send a device command (though we are lacking data capturing and representation of the results making this kinda lame)\n\n### The Demo Flow\nThe workflow for this demo consists of only two steps being reused in a\nsequential flow. In the template that looks like this:\n\n```yml\nflow:\n  - weighing:\n      title: First Weighing\n      fieldMapping:\n        targetWeightOne: target\n  - weighing:\n      title: Second Weighing\n      fieldMapping:\n        targetWeightTwo: target\n  - demoStep\n  - demoStep\n```\n\n### Markdown Support\nThis is the workflows main description text. Just like most descriptions\nin the template it features [Markdown](). [Markdown]() is super simple\nmarkup language that enables basic formatting and is unlike HTML well\nreadable as raw text and therefore well suited to be written in the\ntemplate files.\n\nWe can even do cool things like this:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/b1gnV9fsARU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Markdown]: https://markdown.de\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2023-06-26T12:02:49.590Z",
                            "created_at": "2023-06-26T12:02:49.590Z",
                            "hidden_at": "2023-06-26T12:02:49.428Z",
                            "custom_attributes": [],
                            "template": {
                              "schema_version": "0.0.1",
                              "info": {
                                "version": "1.0.9",
                                "uuid": "2e7d5c61-c5cd-4856-b155-19923480d012",
                                "title": "Test SOP 123",
                                "description": "## Test SOP 123\nThis our Test Workflow for the first milestone of the SmartLab Project.\n\n### General features of Milestone 1\nWhen you reached this point you have already figured out how to:\n\n- upload a workflow template\n- and open your template\n\nAnd there is more to discover:\n\n- uploading new versions of your template\n- creating workflow runs from your template\n- starting, pausing, resuming, closing and re-entering workflow runs\n\n### Features covered in this workflow\n\n- Different field types\n- Markdown descriptions (like this one)\n- Preparing fields, like selecting a device\n- Basic sequential execution of steps\n- Inline field references on substeps\n- A general confirm button\n- Navigation on step completion\n- Manual Triggers, e.g. Buttons with\n- Actions to\n   1. repeat a step\n   1. complete a substep\n   1. send a device command (though we are lacking data capturing and representation of the results making this kinda lame)\n\n### The Demo Flow\nThe workflow for this demo consists of only two steps being reused in a\nsequential flow. In the template that looks like this:\n\n```yml\nflow:\n  - weighing:\n      title: First Weighing\n      fieldMapping:\n        targetWeightOne: target\n  - weighing:\n      title: Second Weighing\n      fieldMapping:\n        targetWeightTwo: target\n  - demoStep\n  - demoStep\n```\n\n### Markdown Support\nThis is the workflows main description text. Just like most descriptions\nin the template it features [Markdown](). [Markdown]() is super simple\nmarkup language that enables basic formatting and is unlike HTML well\nreadable as raw text and therefore well suited to be written in the\ntemplate files.\n\nWe can even do cool things like this:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/b1gnV9fsARU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Markdown]: https://markdown.de\n",
                                "author": {
                                  "name": "Max Mustermann",
                                  "email": "max.mustermann@company.com"
                                },
                                "slug": "my-premium-workflow"
                              },
                              "fields": {
                                "aReadOnlyQuantity": {
                                  "type": "quantity",
                                  "defaultValue": {
                                    "number": 100,
                                    "unit": "l"
                                  },
                                  "readOnly": true
                                },
                                "sample": {
                                  "title": "Sample",
                                  "type": "relationship",
                                  "resourceType": "samples",
                                  "prepare": true
                                },
                                "balance": {
                                  "title": "Balance",
                                  "type": "relationship",
                                  "resourceType": "devices",
                                  "prepare": true
                                },
                                "targetWeightOne": {
                                  "type": "quantity",
                                  "unit": "mg",
                                  "prepare": true
                                },
                                "targetWeightTwo": {
                                  "type": "quantity",
                                  "unit": "mg",
                                  "prepare": true
                                },
                                "INTERNAL_STATE": {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "defaultValue": {},
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                                }
                              },
                              "steps": {
                                "weighing": {
                                  "info": {
                                    "title": "Weighing"
                                  },
                                  "fields": {
                                    "target": {
                                      "type": "quantity",
                                      "unit": "mg"
                                    },
                                    "tolerance": {
                                      "type": "quantity",
                                      "unit": "mg",
                                      "defaultValue": {
                                        "number": 20,
                                        "unit": "mg"
                                      }
                                    }
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Place the "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "sample"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " on "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "balance"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "In the template this substep looks like this:"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "pre",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "code",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "- primary: Place the {{sample}} on {{balance}}.\n  confirm: true\n"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Weigh "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "target"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": " of "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "sample"
                                                },
                                                "children": []
                                              },
                                              {
                                                "type": "text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "secondary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "Tolerance: "
                                              },
                                              {
                                                "type": "element",
                                                "tagName": "interpolation",
                                                "properties": {
                                                  "formula": "tolerance"
                                                },
                                                "children": []
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "devices": [
                                        {
                                          "balance": {
                                            "image": "https://uc.uxpin.com/files/681215/673367/image-cb80bf.png"
                                          }
                                        }
                                      ],
                                      "buttons": [
                                        {
                                          "label": "Print",
                                          "key": "print"
                                        }
                                      ],
                                      "behaviors": [
                                        {
                                          "when": {
                                            "manual": {
                                              "key": "print"
                                            }
                                          },
                                          "do": {
                                            "send_command": {
                                              "device": "balance",
                                              "command": "get_weight"
                                            }
                                          }
                                        }
                                      ],
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "In the template this substep looks like this:"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "pre",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "code",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "- primary: Weigh {{target}} of {{sample}}.\n  secondary: \"Tolerance: {{tolerance}}\"\n  devices:\n    - balance:\n        image: https://uc.uxpin.com/files/681215/673367/image-cb80bf.png\n  buttons:\n    - label: Print\n      key: print\n  behaviors:\n    - when:\n        manual:\n          key: print\n      do:\n        send_command:\n          device: balance\n          command: get_weight\n"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                "demoStep": {
                                  "info": {
                                    "title": "Demo Step"
                                  },
                                  "substeps": [
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "You can complete this substep with a custom button."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "buttons": [
                                        {
                                          "label": "Complete Substep",
                                          "key": "complete-substep"
                                        }
                                      ],
                                      "behaviors": [
                                        {
                                          "when": {
                                            "MANUAL": {
                                              "key": "complete-substep"
                                            }
                                          },
                                          "do": [
                                            "complete_substep"
                                          ]
                                        }
                                      ],
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "In the template this substep looks like this:"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "pre",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "code",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "- primary: You can complete this substep with a custom button.\n  buttons:\n    - label: Complete Substep\n      key: complete-substep\n  behaviors:\n    - when:\n        MANUAL:\n          key: complete-substep\n      do:\n        - complete_substep\n"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    },
                                    {
                                      "primary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "You can repeat the step with a custom button."
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "secondary": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "or confirm it using the confirm button to the right"
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      },
                                      "confirm": true,
                                      "buttons": [
                                        {
                                          "label": "Repeat Step",
                                          "key": "repeat-substep"
                                        }
                                      ],
                                      "behaviors": [
                                        {
                                          "when": {
                                            "MANUAL": {
                                              "key": "repeat-substep"
                                            }
                                          },
                                          "do": [
                                            "repeat_step"
                                          ]
                                        }
                                      ],
                                      "description": {
                                        "type": "root",
                                        "children": [
                                          {
                                            "type": "element",
                                            "tagName": "p",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "text",
                                                "value": "In the template this substep looks like this:"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "text",
                                            "value": "\n"
                                          },
                                          {
                                            "type": "element",
                                            "tagName": "pre",
                                            "properties": {},
                                            "children": [
                                              {
                                                "type": "element",
                                                "tagName": "code",
                                                "properties": {},
                                                "children": [
                                                  {
                                                    "type": "text",
                                                    "value": "- primary: You can repeat the step with a custom button.\n  secondary: or confirm it using the confirm button to the right\n  confirm: true\n  buttons:\n    - label: Repeat Step\n      key: repeat-substep\n  behaviors:\n    - when:\n        MANUAL:\n          key: repeat-substep\n      do:\n        - repeat_step\n"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ],
                                        "data": {
                                          "quirksMode": false
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "flow": [
                                {
                                  "weighing": {
                                    "title": "First Weighing",
                                    "fieldMapping": {
                                      "targetWeightOne": "target"
                                    }
                                  }
                                },
                                {
                                  "weighing": {
                                    "title": "Second Weighing",
                                    "fieldMapping": {
                                      "targetWeightTwo": "target"
                                    }
                                  }
                                },
                                "demoStep",
                                "demoStep"
                              ]
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/20"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 2,
                        "recordsTotal": 25,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17,
                          18,
                          19,
                          20
                        ],
                        "recordsSize": 20
                      }
                    }
                  },
                  "List of found WorkflowTemplates": {
                    "summary": "List of found WorkflowTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "3aaccefe-7e54-4e09-b4da-93c326871ace",
                            "template_version": "1.0.0",
                            "title": "Completing Run",
                            "description": null,
                            "slug": "completing-run",
                            "updated_at": "2023-06-26T13:02:51.501Z",
                            "created_at": "2023-06-26T12:02:51.612Z",
                            "hidden_at": null,
                            "custom_attributes": []
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/workflow_templates/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsSize": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_templates attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowTemplate"
              }
            }
          }
        },
        "description": "Create a WorkflowTemplate.",
        "operationId": "createWorkflowTemplate",
        "summary": "Create Workflow Template",
        "tags": [
          "workflow_templates"
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate": {
                    "summary": "WorkflowTemplate",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "workflow_template",
                        "attributes": {
                          "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                          "template_version": "1.0.0",
                          "title": "My Premium Workflow",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "my-premium-workflow",
                          "updated_at": "2023-06-26T12:03:11.931Z",
                          "created_at": "2023-06-26T12:03:11.931Z",
                          "custom_attributes": []
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_templates/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: File can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"write\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ]
      }
    },
    "/workflow_templates/{id}": {
      "get": {
        "description": "Get a single WorkflowTemplate by its id.",
        "operationId": "getWorkflowTemplate",
        "summary": "Get Workflow Template",
        "tags": [
          "workflow_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowTemplate to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowTemplate attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate": {
                    "summary": "WorkflowTemplate",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_template",
                        "attributes": {
                          "uuid": "3aaccefe-7e54-4e09-b4da-93c326871ace",
                          "template_version": "1.0.0",
                          "title": "Completing Run",
                          "slug": "completing-run",
                          "updated_at": "2023-06-26T13:03:00.694Z",
                          "created_at": "2023-06-26T12:03:00.831Z",
                          "custom_attributes": [],
                          "template": {
                            "schema_version": "0.0.1",
                            "info": {
                              "version": "1.0.0",
                              "uuid": "3aaccefe-7e54-4e09-b4da-93c326871ace",
                              "title": "Completing Run"
                            },
                            "fields": {
                              "INTERNAL_STATE": {
                                "type": "object",
                                "title": "Internal State",
                                "hidden": true,
                                "defaultValue": {},
                                "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things! Updates to the internal state does not trigger a `field_update` event and does not trigger dependant scripts to update."
                              }
                            },
                            "steps": {
                              "stepOne": {
                                "info": {
                                  "title": "Step 1"
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Completed"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    },
                                    "confirm": true
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Aborted"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  },
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "Skipped"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              },
                              "stepTwo": {
                                "info": {
                                  "title": "Step 2"
                                },
                                "substeps": [
                                  {
                                    "primary": {
                                      "type": "root",
                                      "children": [
                                        {
                                          "type": "element",
                                          "tagName": "p",
                                          "properties": {},
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "If a step never gets taken, does the step exists?"
                                            }
                                          ]
                                        }
                                      ],
                                      "data": {
                                        "quirksMode": false
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "flow": [
                              "stepOne",
                              "stepTwo"
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/workflow_templates/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WorkflowTemplate.",
        "operationId": "deleteWorkflowTemplate",
        "summary": "Delete Workflow Template",
        "tags": [
          "workflow_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowTemplate to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Error (Template used by previous runs)": {
                    "summary": "Conflict Error (Template used by previous runs)",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent workflow_runs",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_templates/{id}/download": {
      "get": {
        "description": "Download a previously uploaded workflow template file.",
        "operationId": "downloadWorkflowTemplate",
        "summary": "Download Workflow Template",
        "tags": [
          "workflow_templates"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowTemplate with a file to download."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate download": {
                    "summary": "WorkflowTemplate download",
                    "value": "---\nschema_version: '0.0.1'\ninfo:\n  version: '1.0.0'\n  uuid: '3aaccefe-7e54-4e09-b4da-93c326871ace'\n  title: 'Completing Run'\nfields: {}\nsteps:\n  stepOne:\n    info:\n      title: 'Step 1'\n    substeps:\n      - primary: 'Completed'\n        confirm: true\n      - primary: 'Aborted'\n      - primary: 'Skipped'\n  stepTwo:\n    info:\n      title: 'Step 2'\n    substeps:\n      - primary: 'If a step never gets taken, does the step exists?'\n\nflow:\n  - stepOne\n  - stepTwo\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corrections": {
      "get": {
        "description": "Get a list of existing Corrections.",
        "operationId": "getCorrections",
        "summary": "Get Corrections",
        "tags": [
          "corrections"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Correction attributes to be included in the response."
          },
          {
            "name": "latest_corrections",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Only select corrections that were made in the latest iterations"
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CorrectionsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrectionsResponse"
                },
                "examples": {
                  "List of Corrections": {
                    "summary": "List of Corrections",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "correction",
                          "attributes": {
                            "id": 1,
                            "status": "pending",
                            "review_id": 2,
                            "review_iteration": 1,
                            "flagged_value": "Gil Pacocha",
                            "corrected_value": null,
                            "field_pointer": "/step/1/substep/1/field",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "created_at": "2023-04-21T13:07:45.815Z",
                            "updated_at": "2023-04-21T13:07:45.815Z"
                          },
                          "relationships": {
                            "analyst": {
                              "data": null
                            },
                            "reviewer": {
                              "data": {
                                "id": "1",
                                "type": "reviewer"
                              }
                            },
                            "review": {
                              "data": {
                                "id": "2",
                                "type": "review"
                              }
                            },
                            "workflow_field": {
                              "data": {
                                "id": "1",
                                "type": "workflow_field"
                              }
                            },
                            "comment": {
                              "data": {
                                "id": "1",
                                "type": "comment"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/corrections/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "correction",
                          "attributes": {
                            "id": 2,
                            "status": "pending",
                            "review_id": 2,
                            "review_iteration": 1,
                            "flagged_value": "The Hon. Theron Bogan",
                            "corrected_value": null,
                            "field_pointer": "/step/1/substep/3/field",
                            "change_reasons": {
                              "versionIds": {}
                            },
                            "created_at": "2023-04-21T13:07:45.910Z",
                            "updated_at": "2023-04-21T13:07:45.910Z"
                          },
                          "relationships": {
                            "analyst": {
                              "data": null
                            },
                            "reviewer": {
                              "data": {
                                "id": "5",
                                "type": "reviewer"
                              }
                            },
                            "review": {
                              "data": {
                                "id": "2",
                                "type": "review"
                              }
                            },
                            "workflow_field": {
                              "data": {
                                "id": "1",
                                "type": "workflow_field"
                              }
                            },
                            "comment": {
                              "data": {
                                "id": "2",
                                "type": "comment"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/corrections/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong corrections attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for corrections given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for corrections given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Correction.",
        "operationId": "createCorrection",
        "summary": "Create Correction",
        "tags": [
          "corrections"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a Correction.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorrection"
              },
              "example": {
                "data": {
                  "type": "correction",
                  "attributes": {
                    "flagged_value": "1",
                    "field_pointer": "/step/1/substep/2/field",
                    "comment_attributes": {
                      "content": {
                        "text": "It does not do to dwell on dreams and forget to live."
                      }
                    }
                  },
                  "relationships": {
                    "review": {
                      "data": {
                        "type": "review",
                        "id": "2"
                      }
                    },
                    "workflow_field": {
                      "data": {
                        "type": "workflow_field",
                        "id": "3"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrectionResponse"
                },
                "examples": {
                  "Correction": {
                    "summary": "Correction",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "correction",
                        "attributes": {
                          "id": 2,
                          "status": "pending",
                          "review_id": 2,
                          "review_iteration": 1,
                          "flagged_value": "1",
                          "field_pointer": "/step/1/substep/2/field",
                          "change_reasons": {
                            "versionIds": {}
                          },
                          "created_at": "2023-04-21T13:07:56.381Z",
                          "updated_at": "2023-04-21T13:07:56.381Z"
                        },
                        "relationships": {
                          "analyst": {},
                          "reviewer": {
                            "data": {
                              "id": "1",
                              "type": "reviewer"
                            }
                          },
                          "review": {
                            "data": {
                              "id": "2",
                              "type": "review"
                            }
                          },
                          "workflow_field": {
                            "data": {
                              "id": "3",
                              "type": "workflow_field"
                            }
                          },
                          "comment": {
                            "data": {
                              "id": "2",
                              "type": "comment"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/corrections/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for correction: `flagged_value`, `field_pointer`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corrections/{id}": {
      "get": {
        "description": "Get a single Correction by its id.",
        "operationId": "getCorrection",
        "summary": "Get Correction",
        "tags": [
          "corrections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Correction to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Correction attributes to be included in the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrectionResponse"
                },
                "examples": {
                  "Correction": {
                    "summary": "Correction",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "correction",
                        "attributes": {
                          "id": 1,
                          "status": "pending",
                          "review_id": 2,
                          "review_iteration": 1,
                          "flagged_value": "Gil Pacocha",
                          "field_pointer": "/step/1/substep/1/field",
                          "change_reasons": {
                            "versionIds": {}
                          },
                          "created_at": "2023-04-21T13:07:50.509Z",
                          "updated_at": "2023-04-21T13:07:50.509Z"
                        },
                        "relationships": {
                          "analyst": {},
                          "reviewer": {
                            "data": {
                              "id": "1",
                              "type": "reviewer"
                            }
                          },
                          "review": {
                            "data": {
                              "id": "2",
                              "type": "review"
                            }
                          },
                          "workflow_field": {
                            "data": {
                              "id": "1",
                              "type": "workflow_field"
                            }
                          },
                          "comment": {
                            "data": {
                              "id": "1",
                              "type": "comment"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/corrections/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for corrections given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for corrections given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a Correction.",
        "operationId": "updateCorrection",
        "summary": "Update Correction",
        "tags": [
          "corrections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Correction to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a Correction.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorrection"
              },
              "example": {
                "data": {
                  "type": "correction",
                  "attributes": {
                    "comment_attributes": {
                      "content": {
                        "text": "Updated Comment"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrectionResponse"
                },
                "examples": {
                  "Correction": {
                    "summary": "Correction",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "correction",
                        "attributes": {
                          "id": 1,
                          "status": "pending",
                          "review_id": 2,
                          "review_iteration": 1,
                          "flagged_value": "Gil Pacocha",
                          "field_pointer": "/step/1/substep/1/field",
                          "change_reasons": {
                            "versionIds": {}
                          },
                          "created_at": "2023-04-21T13:08:02.869Z",
                          "updated_at": "2023-04-21T13:08:02.869Z"
                        },
                        "relationships": {
                          "analyst": {},
                          "reviewer": {
                            "data": {
                              "id": "1",
                              "type": "reviewer"
                            }
                          },
                          "review": {
                            "data": {
                              "id": "2",
                              "type": "review"
                            }
                          },
                          "workflow_field": {
                            "data": {
                              "id": "1",
                              "type": "workflow_field"
                            }
                          },
                          "comment": {
                            "data": {
                              "id": "1",
                              "type": "comment"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/corrections/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Correction.",
        "operationId": "deleteCorrection",
        "summary": "Delete Correction",
        "tags": [
          "corrections"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Correction to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resource_destinations": {
      "get": {
        "description": "Get a list of existing ResourceDestinations.",
        "operationId": "getResourceDestinations",
        "summary": "Get Resource Destinations",
        "tags": [
          "resource_destinations"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ResourceDestination attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ResourceDestinationsFilter"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDestinationsResponse"
                },
                "examples": {
                  "List of ResourceDestinations": {
                    "summary": "List of ResourceDestinations",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "resource_destination",
                          "attributes": {
                            "created_at": "2023-04-21T13:13:41.288Z",
                            "updated_at": "2023-04-21T13:13:41.288Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "2",
                                "type": "collection"
                              }
                            },
                            "collection_resource": {
                              "data": {
                                "id": "4",
                                "type": "collection_resource"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/resource_destinations/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "resource_destination",
                          "attributes": {
                            "created_at": "2023-04-21T13:13:41.371Z",
                            "updated_at": "2023-04-21T13:13:41.371Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "2",
                                "type": "collection"
                              }
                            },
                            "collection_resource": {
                              "data": {
                                "id": "8",
                                "type": "collection_resource"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/resource_destinations/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong resource_destinations attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for resource_destinations given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (some fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (some fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for resource_destinations given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a ResourceDestination.",
        "operationId": "createResourceDestination",
        "summary": "Create Resource Destination",
        "tags": [
          "resource_destinations"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Create a ResourceDestination.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceDestination"
              },
              "example": {
                "data": {
                  "type": "resource_destination",
                  "relationships": {
                    "user": {
                      "data": {
                        "id": "1",
                        "type": "User"
                      }
                    },
                    "collection": {
                      "data": {
                        "id": "2",
                        "type": "Collection"
                      }
                    },
                    "collection_resource": {
                      "data": {
                        "id": "4",
                        "type": "CollectionResource"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDestinationResponse"
                },
                "examples": {
                  "ResourceDestination": {
                    "summary": "ResourceDestination",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "resource_destination",
                        "attributes": {
                          "created_at": "2023-04-21T13:13:53.345Z",
                          "updated_at": "2023-04-21T13:13:53.345Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "2",
                              "type": "collection"
                            }
                          },
                          "collection_resource": {
                            "data": {
                              "id": "4",
                              "type": "collection_resource"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/resource_destinations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resource_destinations/{id}": {
      "get": {
        "description": "Get a single ResourceDestination by its id.",
        "operationId": "getResourceDestination",
        "summary": "Get Resource Destination",
        "tags": [
          "resource_destinations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of ResourceDestination to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ResourceDestination attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDestinationResponse"
                },
                "examples": {
                  "ResourceDestination": {
                    "summary": "ResourceDestination",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "resource_destination",
                        "attributes": {
                          "created_at": "2023-04-21T13:13:46.932Z",
                          "updated_at": "2023-04-21T13:13:46.932Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "2",
                              "type": "collection"
                            }
                          },
                          "collection_resource": {
                            "data": {
                              "id": "4",
                              "type": "collection_resource"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/resource_destinations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for resource_destinations given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for resource_destinations given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a ResourceDestination.",
        "operationId": "updateResourceDestination",
        "summary": "Update Resource Destination",
        "tags": [
          "resource_destinations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a ResourceDestination to update."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "requestBody": {
          "description": "Update a ResourceDestination.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceDestination"
              },
              "example": {
                "data": {
                  "type": "resource_destination",
                  "relationships": {
                    "user": {
                      "data": {
                        "id": "1",
                        "type": "User"
                      }
                    },
                    "collection": {
                      "data": {
                        "id": "4",
                        "type": "Collection"
                      }
                    },
                    "collection_resource": {
                      "data": {
                        "id": "4",
                        "type": "CollectionResource"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDestinationResponse"
                },
                "examples": {
                  "ResourceDestination": {
                    "summary": "ResourceDestination",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "resource_destination",
                        "attributes": {
                          "created_at": "2023-04-21T13:13:58.164Z",
                          "updated_at": "2023-04-21T13:13:58.524Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "4",
                              "type": "collection"
                            }
                          },
                          "collection_resource": {
                            "data": {
                              "id": "4",
                              "type": "collection_resource"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/resource_destinations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` attribute at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` attribute at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` attribute does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a ResourceDestination.",
        "operationId": "deleteResourceDestination",
        "summary": "Delete Resource Destination",
        "tags": [
          "resource_destinations"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a ResourceDestination to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channel_thresholds": {
      "get": {
        "description": "Get a list of existing ChannelThresholds.",
        "operationId": "getChannelThresholds",
        "summary": "Get Channel Thresholds",
        "tags": [
          "channel_thresholds"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ChannelThreshold attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ChannelThresholdsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelThresholdsResponse"
                },
                "examples": {
                  "List of ChannelThresholds": {
                    "summary": "List of ChannelThresholds",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "channel_threshold",
                          "attributes": {
                            "level": "critical",
                            "value": "14.0",
                            "comparator": "below",
                            "duration": 0,
                            "condition": "for_at_least"
                          },
                          "relationships": {
                            "channel": {
                              "data": {
                                "id": "5",
                                "type": "channel"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/channel_thresholds/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "channel_threshold",
                          "attributes": {
                            "level": "warning",
                            "value": "14.0",
                            "comparator": "below",
                            "duration": 0,
                            "condition": "for_at_least"
                          },
                          "relationships": {
                            "channel": {
                              "data": {
                                "id": "5",
                                "type": "channel"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/channel_thresholds/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong channel_thresholds attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_thresholds given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_thresholds given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channel_thresholds/{id}": {
      "delete": {
        "description": "Delete a ChannelThreshold.",
        "operationId": "deleteChannelThreshold",
        "summary": "Delete Channel Threshold",
        "tags": [
          "channel_thresholds"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a ChannelThreshold to delete."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channel_incidents": {
      "get": {
        "description": "Get a list of existing ChannelIncidents.",
        "operationId": "getChannelIncidents",
        "summary": "Get Channel Incidents",
        "tags": [
          "channel_incidents"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ChannelIncident attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `channel`, `channel_threshold`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ChannelIncidentsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelIncidentsResponse"
                },
                "examples": {
                  "List of ChannelIncidents": {
                    "summary": "List of ChannelIncidents",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "channel_incident",
                          "attributes": {
                            "closed_at": null,
                            "created_at": "2023-04-21T13:05:23.934Z",
                            "updated_at": "2023-04-21T13:05:23.934Z",
                            "threshold_version_id": null
                          },
                          "relationships": {
                            "channel": {
                              "data": {
                                "id": "5",
                                "type": "channel"
                              }
                            },
                            "channel_threshold": {
                              "data": {
                                "id": "1",
                                "type": "channel_threshold"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/channel_incidents/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "channel_incident",
                          "attributes": {
                            "closed_at": null,
                            "created_at": "2023-04-21T13:05:23.938Z",
                            "updated_at": "2023-04-21T13:05:23.938Z",
                            "threshold_version_id": null
                          },
                          "relationships": {
                            "channel": {
                              "data": {
                                "id": "6",
                                "type": "channel"
                              }
                            },
                            "channel_threshold": {
                              "data": {
                                "id": "2",
                                "type": "channel_threshold"
                              }
                            }
                          },
                          "links": {
                            "self": "https://{host}/api/v2/laboperator/channel_incidents/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageNumber": 1,
                        "pageSize": 20,
                        "pagesTotal": 1,
                        "recordsTotal": 2,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsSize": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong channel_incidents attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_incidents given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_incidents given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Access to this resource requires scope \"read\".",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channel_incidents/{id}": {
      "get": {
        "description": "Get a single ChannelIncident by its id.",
        "operationId": "getChannelIncident",
        "summary": "Get Channel Incident",
        "tags": [
          "channel_incidents"
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of ChannelIncident to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ChannelIncident attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `channel`, `channel_threshold`."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List of available language preferences. Allowed values are: `de`, `en`, `fr`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelIncidentResponse"
                },
                "examples": {
                  "ChannelIncident": {
                    "summary": "ChannelIncident",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "channel_incident",
                        "attributes": {
                          "created_at": "2023-04-21T13:05:28.556Z",
                          "updated_at": "2023-04-21T13:05:28.556Z"
                        },
                        "relationships": {
                          "channel": {
                            "data": {
                              "id": "5",
                              "type": "channel"
                            }
                          },
                          "channel_threshold": {
                            "data": {
                              "id": "1",
                              "type": "channel_threshold"
                            }
                          }
                        },
                        "links": {
                          "self": "https://{host}/api/v2/laboperator/channel_incidents/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_incidents given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channel_incidents given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.0.0",
  "info": {
    "title": "Laboperator API",
    "contact": {
      "name": "Julian Lübke",
      "email": "julian.luebke@labforward.io",
      "url": "https://www.laboperator.com/contact/"
    },
    "version": "2.0.0-rc.14",
    "x-logo": {
      "url": "/assets/laboperator_logo-4c0cd3e76da60e382a0710e6c548389dedafd114e8515f9ad06c43bd739ad263.png",
      "backgroundColor": "#fafafa",
      "altText": "Laboperator logo"
    },
    "description": "This is the Laboperator API documentation bundled with\nyour Laboperator Server. It will reflect the API v2 subversion that\nruns on this instance.\n\n# PRE-RELEASE\nThe current distribution of the API v2 is a pre-realease and as such\nsubject to frequent updates and potentially breaking changes.\n\n# Changelog\nThis changelog will be kept here for pre-releases only.\n\n## v2.0.0-rc.14\n### Changed\n- replace archival (deleted and deleted_at) with hiding (hidden_at)\n\n### Removed\n- removed endpoints for `protocol_rules`\n\n## v2.0.0-rc.13\n### Added\n- additional endpoints for `applications`, `attachments`, `authentications`, `automations`, `collections`, `comments`,\n  `connectors` enrollments, `dashboards`, `device_classes`, `exports`, `organisations`, `samples`, `secrets` and `secret_acceses`,\n  `signatures`, `smart_views`, `update_requests`, `versions`, `webhook_logs`, `workflow_events`, `workflow_fields`, `workflow_runs`,\n  `workflow_steps`, `workflow_step_templates`, `workflow_templates`\n\n### Changed\n- this API documentation is now publicly available without needing to authenticate\n- restore endpoint on various resources now works on singular resource instead of collection\n\n### Removed\n- removed obsolete attributes from `device_types` endpoint\n- removed endpoints for `jobs`, and, `tasks`\n\n## v2.0.0-rc.12\n### Added\n- introduce trait-tags in API V2 documentaion for common query parameters `fields`, `filter`, `sort`, `page`\n\n### Changed\n- API V2 data_points endpoints are normalized\n\n## v2.0.0-rc.11\n\n### Added\n- additional endpoints for `jobs`, `views`, `tasks`, `notifications`, `ports`, `schemas`\n- custom rake task `rake spec:api_v2_docs` for running specs along with generation of documentation\n- `filter` fetch parameter accepts and understands comparison operators `gt`, `ge`, `lt`, `le`, `eq`, `ne`, `lk`, `nlk`\n\n### Changed\n- invalid query params are not ignored anymore but throw a 'Bad Request' error\n\n### Fixed\n- ActiveRecord validation errors are handled by JsonApiUtils\n- `fields` specs context and descriptions\n- errors which happen on a middleware level are handled in a JsonApiUtils manner\n\n## v2.0.0-rc.10\n\n### Changed\n- invalid query params are not ignored anymore but throw a 'Bad Request' error\n\n### Fixed\n- ActiveRecord validation errors are handled by JsonApiUtils\n\n## v2.0.0-rc.9\n\n### Changed\n- updated schema structure\n\n### Fixed\n- missing id parameter for device command endpoint\n- minor errors in several response and body schemas\n\n## v2.0.0-rc.8\n\n### Added\n- command execution endpoints\n- devices command endpoint\n\n## v2.0.0-rc.7\n\n### Added\n- protocol rule endpoints\n\n## v2.0.0-rc.6\n\n### Added\n- data points endpoints\n- task include `result`\n- measurement `data_points` documentation\n- measurement `protocol_entries` documentation\n\n### Fixed\n- task type serialization\n\n## v2.0.0-rc.5\n\n### Added\n- support for filters\n- support for sparse field sets\n- Task.parameters documentation\n- custom attributes documentation\n- Job.response\n- Task include option for Measurements\n- added `created_at`, `description`, `end_at`, `protocol_entries`, `start_at`, `status`, `updated_at`, `uuid` to Measurement serializer\n\n### Fixed\n- URLs in links for subtyped entities\n\n### Removed\n- create action for channels\n- `prev` and `next` links without logical relation (most cases as of now)\n\n# Standards\nThe API uses standards (referenced below) and best practices to\nmake the interaction as easy as possible. Not only are standards\na great way of benefitting from the collective experience of a large\ncommunity that develops these standards, but also for users to rely\non a vivid ecosystem of documentation and resources.\n\n## OpenAPI specification\nThis API is documented in the both human- and machine-readable\n[OpenAPI](https://github.com/OAI/OpenAPI-Specification) format.\nYou can download the raw OpenAPI document for this API using the\nbutton on the top of this page.\n\nThe OpenAPI specification originates from the\n[swagger.io](https://swagger.io). There is an active community\naround the standard and many [tools](https://openapi.tools)\navailable for most modern programming environments.\n\n## JSON:API specification\nWhile OpenAPI specifies how to document an API,\n[JSON:API](https://jsonapi.org) is a specification for building APIs in\n[JSON](https://www.json.org). It is mostly a set of conventions that help\nus to build a consistent service. Our developers and users of the API\nalike can build on generalized tooling and a common understanding of\nwhat to expect.\n"
  },
  "externalDocs": {
    "description": "Find out more about Laboperator terminology and resources in general at our helpdesk.\n",
    "url": "https://support.labforward.io"
  },
  "servers": [
    {
      "url": "/api/v2",
      "description": "Default endpoint on the server hosting this documentation."
    },
    {
      "url": "{scheme}://{host}/api/v2/{tenant}",
      "description": "Use this server template to set things up.",
      "variables": {
        "scheme": {
          "enum": [
            "http",
            "https"
          ],
          "description": "The HTTP scheme to use.",
          "default": "https"
        },
        "tenant": {
          "description": "Your tenants domain.",
          "default": "your-tenant"
        },
        "host": {
          "description": "The server hosting your Laboperator instance.",
          "default": "laboperator.test.labforward.app"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "All requests against the API need to be authenticated. We use\n[OAuth 2.0](https://oauth.net/2/) to implement different\nauthentication strategies. If you are not familiar with OAuth,\nyet, you can get started with some\n[useful resources](https://oauth.net/articles/) to understand the\nbasics. All OAuth strategies lead to an Access Token being issued\nthat needs to be included in the headers of any API request.\n\nFor example:\n```\nAuthorization: Bearer 6e5ca31a16a1bf3426b33ace25efd07d03afb1c63e5f5c0fb6e82ef8b0293a0d\n```\n\n### Prerequisites\nEvery third-party code that wants to authenticate against the API\nneeds to be registered as an OAuth Client or in the Laboperator\nterminology an Application.\n\nRead more about [how to create an Application](https://support.labforward.io/en/support/solutions/articles/19000133949-oauth-applications)\nfrom your Laboperator admin account.\n\n### OAuth Authorization Flows\nThe Laboperator API supports the following OAuth 2 authorization flows:\n\n  - [Authorization Code](http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.1)\n  - [Client Credentials](https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.4)\n  - [Resource Owner Password](http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.3)\n\nBoth `Authorization Code` and `Resource Owner Password` will authorize requests as the Resource Owner,\nwhile `Client Credentials` flow, will authorize requests as the Application Owner.\n\nMore information on the procedure can be found in the\n[Authentication article](https://support.labforward.io/support/solutions/articles/19000106856-authentication) in the helpdesk.\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          },
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          },
          "password": {
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          }
        }
      }
    },
    "schemas": {
      "Success": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "Success"
                ]
              }
            }
          }
        }
      },
      "Errors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "title"
              ],
              "properties": {
                "code": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "required": [
          "pageNumber",
          "pageSize",
          "pagesTotal",
          "recordsTotal",
          "recordsSize"
        ],
        "properties": {
          "pageNumber": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "pagesTotal": {
            "type": "number",
            "description": "The total number of pages.\n\nDue to performance reason, the API might not always be able to get the exact total number of pages,\nin which case pagesTotal will be -1.\n"
          },
          "recordsOrder": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "recordsTotal": {
            "type": "number",
            "description": "The total number of records.\n\nDue to performance reason, the API might not always be able to get the exact total number of records,\nin which case recordsTotal will be -1.\n"
          },
          "recordsSize": {
            "type": "number"
          }
        }
      },
      "HasManyRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          }
        }
      },
      "HasOneRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Relationship"
          }
        }
      },
      "BelongsToRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Relationship"
          }
        }
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AddResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "resource"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "resource_type": {
                    "type": "string"
                  },
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "BindDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "port"
                ]
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "device": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CommandDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "command"
            ],
            "properties": {
              "command": {
                "type": "string"
              },
              "data": {
                "description": "Device Specific Data"
              }
            }
          }
        }
      },
      "CustomAttributeItem": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/BooleanAttribute",
            "date": "#/components/schemas/DateAttribute",
            "datetime": "#/components/schemas/DatetimeAttribute",
            "file": "#/components/schemas/FileAttribute",
            "image": "#/components/schemas/ImageAttribute",
            "number": "#/components/schemas/NumberAttribute",
            "physicalQuantity": "#/components/schemas/PhysicalQuantityAttribute",
            "plot": "#/components/schemas/PlotAttribute",
            "relation": "#/components/schemas/RelationAttribute",
            "string": "#/components/schemas/StringAttribute",
            "text": "#/components/schemas/TextAttribute",
            "duration": "#/components/schemas/DurationAttribute",
            "temperatureCurve": "#/components/schemas/TemperatureCurveAttribute"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BooleanAttribute"
          },
          {
            "$ref": "#/components/schemas/DateAttribute"
          },
          {
            "$ref": "#/components/schemas/DatetimeAttribute"
          },
          {
            "$ref": "#/components/schemas/FileAttribute"
          },
          {
            "$ref": "#/components/schemas/ImageAttribute"
          },
          {
            "$ref": "#/components/schemas/NumberAttribute"
          },
          {
            "$ref": "#/components/schemas/PhysicalQuantityAttribute"
          },
          {
            "$ref": "#/components/schemas/PlotAttribute"
          },
          {
            "$ref": "#/components/schemas/RelationAttribute"
          },
          {
            "$ref": "#/components/schemas/StringAttribute"
          },
          {
            "$ref": "#/components/schemas/TextAttribute"
          },
          {
            "$ref": "#/components/schemas/DurationAttribute"
          },
          {
            "$ref": "#/components/schemas/TemperatureCurveAttribute"
          }
        ]
      },
      "ExportDataPointResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Export"
          }
        }
      },
      "ManualTriggerParams": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "manual"
            ],
            "description": "The type of trigger to signal. As of now only `manual` triggers\nare allowed to be signaled via API.\n"
          },
          "substep": {
            "type": "number",
            "description": "Index of the substep that gives context to this trigger.\n"
          },
          "key": {
            "type": "string",
            "description": "A key that identifies the manual trigger in the context of the\nstep. When definind a behavior the key is passed as an option to\nthe manual trigger definition. The same key can be passed to a\nbutton on a substep. When the button is clicked this key is\npassed with the trigger. The key allows to use multiple manual\ntrigger in the context of the same step or substep.\n"
          }
        }
      },
      "MoveResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "resource"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "collection_id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "OrganisationSettings": {
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "api_docs",
                "permanent_deletion",
                "public_resource",
                "secrets",
                "webhooks",
                "workflows"
              ]
            }
          },
          "theme": {
            "type": "object",
            "description": "The theme's primary and secondary colors",
            "properties": {
              "primary": {
                "description": "The theme's primary color",
                "type": "object",
                "properties": {
                  "main": {
                    "type": "string"
                  }
                }
              },
              "secondary": {
                "description": "The theme's secondary color",
                "type": "object",
                "properties": {
                  "main": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "approvedWebhooks": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "dateFormat": {
            "type": "string"
          },
          "timeFormat": {
            "type": "string"
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "definitions": {
            "description": "Schema definition for the various supported attribute types"
          },
          "ui_definitions": {
            "description": "UI component mapping for each supported attribute types"
          },
          "schema": {
            "description": "JSON Schema definition for the requested resource type"
          },
          "ui_schema": {
            "description": "UI template definition for the requested resource type"
          }
        }
      },
      "SmartViewSettings": {
        "type": "object",
        "description": "settings for the saved filter",
        "properties": {
          "filters": {
            "description": "filters settings",
            "type": "object",
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "contains": {
                "type": "string"
              },
              "statuses": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "collection_id": {
                "type": "number"
              },
              "show_hidden": {
                "type": "boolean"
              },
              "attributes": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "end_at": {
                "type": "string"
              },
              "resource": {
                "type": "string"
              },
              "search": {
                "type": "string"
              },
              "start_at": {
                "type": "string"
              },
              "user_id": {
                "type": "number"
              },
              "user_type": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "dataType": {
                      "type": "string"
                    },
                    "operator": {
                      "type": "string"
                    },
                    "value": {},
                    "options": {}
                  }
                }
              }
            }
          },
          "sorting": {
            "description": "sorting settings",
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "order": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              "order_by": {
                "type": "string"
              },
              "rows_per_page": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        }
      },
      "TriggerSignal": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {}
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "manual": "#/components/schemas/ManualTriggerParams"
              }
            }
          }
        }
      },
      "WorkflowEventAddStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "add_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "uuid",
              "version"
            ],
            "properties": {
              "uuid": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "fields": {
                "type": "object"
              },
              "fieldMapping": {
                "type": "object"
              }
            }
          }
        }
      },
      "WorkflowEventDefinition": {
        "required": [
          "type",
          "payload"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkflowEventAddStep"
          },
          {
            "$ref": "#/components/schemas/WorkflowEventMoveStep"
          },
          {
            "$ref": "#/components/schemas/WorkflowEventRemoveStep"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "add_step": "#/components/schemas/WorkflowEventAddStep",
            "move_step": "#/components/schemas/WorkflowEventMoveStep",
            "remove_step": "#/components/schemas/WorkflowEventRemoveStep"
          }
        }
      },
      "WorkflowEventMoveStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "move_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "from",
              "to"
            ],
            "properties": {
              "from": {
                "type": "string",
                "pattern": "^/flow/"
              },
              "to": {
                "type": "string",
                "pattern": "^/flow/"
              }
            }
          }
        }
      },
      "WorkflowEventRemoveStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "remove_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "pointer"
            ],
            "properties": {
              "pointer": {
                "type": "string",
                "pattern": "^/flow/"
              }
            }
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "redirect_uri": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Applications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Application"
        }
      },
      "ApplicationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Applications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "content_type": {
                "type": "string"
              },
              "original_filename": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "AttachmentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Attachment"
          }
        }
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              },
              "access_token": {
                "type": "string"
              },
              "expires_in": {
                "type": "integer",
                "format": "int64"
              },
              "refresh_token": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Authentications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Authentication"
        }
      },
      "AuthenticationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Authentications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Authentication"
          }
        }
      },
      "Automation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "activated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "active": {
                "type": "boolean"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Automations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Automation"
        }
      },
      "AutomationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Automations"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "AutomationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Automation"
          }
        }
      },
      "CreateAutomation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "automation"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "active": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UpdateAutomation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "automation"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "ChannelsFilter": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disabled": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "interval": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "on_update": {
                "type": "string"
              },
              "status": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "unit": {
                "type": "string"
              },
              "type_sym": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "specific_attributes": {
                "description": "Channel attributes",
                "properties": {
                  "max": {
                    "type": "number"
                  },
                  "min": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "step": {
                    "type": "number"
                  },
                  "commands": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "enumLabels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "disabled": {
                "type": "boolean"
              },
              "dynamic": {
                "type": "boolean"
              },
              "device_class": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "has_element": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "thresholds": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "incidents": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Channels": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Channel"
        }
      },
      "ChannelsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Channels"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ChannelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      },
      "CollectionResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "resource_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_type": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "CollectionResourceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CollectionResource"
          }
        }
      },
      "CollectionResources": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CollectionResource"
        }
      },
      "CollectionResourcesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CollectionResources"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CollectionResourcesFilter": {
        "type": "object",
        "properties": {
          "collection_resources": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "collection_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collection": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CollectionsFilter": {
        "type": "object",
        "properties": {
          "collections": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Collection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "groups": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Collections": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Collection"
        }
      },
      "CollectionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Collections"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Collection"
          }
        }
      },
      "CreateCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "CommandExecutionsFilter": {
        "type": "object",
        "properties": {
          "command_executions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "confirmed_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "finished_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CommandExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "uuid": {
                "type": "string"
              },
              "parameters": {
                "description": "Any parameters send with the command including the command\nthat was triggered itself.\n",
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "command"
                ],
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "The triggered command"
                  }
                }
              },
              "device_id": {
                "type": "integer",
                "format": "int64"
              },
              "user_id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "string",
                "description": "There are four well defined status values:\n\n- **sent:** The command was send to the device\n- **confirmed:** The command was received by the device and will be processed\n- **success:** The command has successfully been processed\n- **error:** An error has occured whil processing the command\n\nAdditionally there might be other status values the device\nsends after confirming the command and before finishing or\nfailing.\n"
              },
              "data": {
                "description": "Any update or result data the device sends back. The\ncontent of this attribute depends on the device type and\nthe command.\n",
                "type": "object",
                "additionalProperties": true
              },
              "confirmed_at": {
                "type": "string",
                "format": "date-time"
              },
              "finished_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "context": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "CommandExecutions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CommandExecution"
        }
      },
      "CommandExecutionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommandExecutions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CommandExecutionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommandExecution"
          }
        }
      },
      "CommentsFilter": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "commentable_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "commentable_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "content": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "owner_display_name": {
                "description": "Name of the author of the comment",
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "commentable": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Comments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Comment"
        }
      },
      "CommentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Comments"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "CreateComment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "commentable_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "commentable_type": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "commentable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateComment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "commentable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ConnectorsFilter": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "pairings": {
            "type": "object",
            "additionalProperties": false
          },
          "ports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connector_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Connector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "connector_key": {
                "type": "string"
              },
              "serial": {
                "type": "string"
              },
              "last_seen_at": {
                "type": "string",
                "format": "date-time"
              },
              "last_appeared_at": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "last_reported_at": {
                "type": "string",
                "format": "date-time"
              },
              "hardware": {
                "type": "string"
              },
              "platform": {
                "type": "string"
              },
              "last_pairing_button_press_at": {
                "type": "string",
                "format": "date-time"
              },
              "version_modules": {
                "type": "string"
              },
              "cpu_architecture": {
                "type": "string"
              },
              "version_connector": {
                "type": "string"
              },
              "version_build": {
                "type": "string"
              },
              "connector_key_nice": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "owner_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "slugs": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "internal_ip": {
                "type": "string"
              },
              "external_ip": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "pairings": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "ports": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Connectors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Connector"
        }
      },
      "ConnectorsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Connectors"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ConnectorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Connector"
          }
        }
      },
      "CreateConnector": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "connector_key": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "connector_key"
        ]
      },
      "UpdateConnector": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "public_access_token": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Dashboards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Dashboard"
        }
      },
      "DashboardsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Dashboards"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DashboardResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Dashboard"
          }
        }
      },
      "CreateDashboard": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "copy_from": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateDashboard": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "publicly_accessible": {
                    "type": "boolean"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "DataPointsFilter": {
        "type": "object",
        "properties": {
          "data_points": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "channel_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "timestamp": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channel": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disabled": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DataPoint": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "type": "integer",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `timestamp`, `value`, `str_value`, and `channel_id`.\n\nThe `timestamp` and the `channel_id` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            },
            {
              "type": "number",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `timestamp`, `value`, `str_value`, and `channel_id`.\n\nThe `timestamp` and the `channel_id` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            },
            {
              "type": "string",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `timestamp`, `value`, `str_value`, and `channel_id`.\n\nThe `timestamp` and the `channel_id` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            }
          ]
        },
        "example": [
          1509494400,
          10.6,
          null,
          12
        ]
      },
      "DataPoints": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DataPoint"
        },
        "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `timestamp`, `value`, `str_value`, and `channel_id`.\n\nThe `timestamp` and the `channel_id` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
      },
      "DataPointsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataPoints"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DataPointResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataPoint"
          }
        }
      },
      "ExportDataPoint": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "export_format"
        ]
      },
      "DeviceClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceClasses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceClass"
        }
      },
      "DeviceClassesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceClasses"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceDriversFilter": {
        "type": "object",
        "properties": {
          "device_drivers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DeviceDriver": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "releases": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "verified": {
                "type": "boolean"
              },
              "device_types": {
                "type": "integer",
                "format": "int64"
              },
              "bundle": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              },
              "device_type_definitions": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceDrivers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceDriver"
        }
      },
      "DeviceDriversResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceDrivers"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceDriverResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceDriver"
          }
        }
      },
      "CreateDeviceDriver": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "device_driver"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "bundle": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "bundle": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "bundle"
        ]
      },
      "UpdateDeviceDriver": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "device_driver"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "bundle": {
                    "type": "string"
                  },
                  "remove_bundle": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              }
            }
          },
          "bundle": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DeviceTypesFilter": {
        "type": "object",
        "properties": {
          "device_types": {
            "type": "object",
            "additionalProperties": false
          },
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DeviceType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "vendor": {
                "type": "string"
              },
              "device_class": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceType"
          }
        }
      },
      "DeviceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceType"
        }
      },
      "DeviceTypesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceTypes"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DevicesFilter": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disabled": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "connector": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device_type": {
            "type": "object",
            "additionalProperties": false
          },
          "driver": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "driver_parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "vendor": {
                "type": "string"
              },
              "device_class": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "device_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "operator_id": {
                "type": "integer",
                "format": "int64"
              },
              "commands": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              },
              "slugs": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "status_channel_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "is_driver_compatible": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "connector": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "device_type": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "driver": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "channels": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "locking_measurement": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Devices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Device"
        }
      },
      "DevicesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Devices"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Device"
          }
        }
      },
      "UpdateDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "driver_parameters": {
                    "description": "Driver parameters"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  },
                  "driver_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "channels_attributes": {
                    "description": "Channels attributes",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "interval": {
                          "type": "integer"
                        },
                        "on_update": {
                          "type": "string"
                        },
                        "thresholds_attributes": {
                          "description": "Channel threshold attributes",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "level": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "comparator": {
                                "type": "string"
                              },
                              "duration": {
                                "type": "integer"
                              },
                              "condition": {
                                "type": "string"
                              },
                              "_destroy": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "force_reset_view": {
                    "description": "Reset view to the default layout"
                  },
                  "force_reset_definitions": {
                    "description": "Reset device attributes to the current device type definitions"
                  },
                  "merge_parameters": {
                    "description": "Persists matching parameters when device type definitions are updated"
                  },
                  "skip_default_parameters": {
                    "description": "Do not overwrite driver parameters to default values when driver is changed"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "driver": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "EventsFilter": {
        "type": "object",
        "properties": {
          "events": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "event_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "context": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "logs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "context": {
                "type": "object",
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "logs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "options": {
                      "type": "object",
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "versions": {
                "type": "object",
                "properties": {
                  "data": {}
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "versions": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Events": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Event"
        }
      },
      "EventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Events"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Event"
          }
        }
      },
      "ExportEvent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "ExportsFilter": {
        "type": "object",
        "properties": {
          "exports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Export": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "secure_token": {
                "type": "string"
              },
              "original_filename": {
                "type": "string"
              },
              "status": {
                "type": "integer",
                "format": "int64"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "file": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Exports": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Export"
        }
      },
      "ExportsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exports"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ExportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Export"
          }
        }
      },
      "GroupResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "relationships": {
            "type": "object",
            "properties": {
              "group": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "resource": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "GroupResourceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupResource"
          }
        }
      },
      "CreateGroupResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "GroupUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "relationships": {
            "type": "object",
            "properties": {
              "group": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "GroupUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupUser"
          }
        }
      },
      "CreateGroupUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "GroupsFilter": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "roles": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "users": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collections": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "smart_views": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "active": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "roles": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "users": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "smart_views": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Groups": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Group"
        }
      },
      "GroupsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Groups"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Group"
          }
        }
      },
      "CreateGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "roles": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "users": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "collections": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "smart_views": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "roles": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "users": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "collections": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "smart_views": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "MeasurementsFilter": {
        "type": "object",
        "properties": {
          "measurements": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disabled": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "status": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "scope_params": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              },
              "container_id": {
                "type": "integer",
                "format": "int64"
              },
              "container_type": {
                "type": "string"
              },
              "start_at": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "end_at": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "data_points": {
                "description": "For the sake of efficiency the DataPoint entity is not a\nResource Object as per the JSON:API specification. A\nDataPoint is instead always provided as an Array with the\ntripple of `channel_id`, `timestamp` and `value`. The\n`channel_id` and the `timestamp` uniquely identify any\ndata point.\n\n**Note:** The order of the items is always as mentioned\nabove, which can due to limitations of the OpenApi\nspecification not be expressed correctly in the schema.\n",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataPoint"
                }
              },
              "scope": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "channels": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Measurements": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Measurement"
        }
      },
      "MeasurementsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Measurements"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "MeasurementResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Measurement"
          }
        }
      },
      "CreateMeasurement": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "container_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "container_type": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  },
                  "scope_attributes": {
                    "type": "object",
                    "properties": {
                      "start_at": {
                        "type": "string"
                      },
                      "end_at": {
                        "type": "string"
                      },
                      "channel_ids": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "container": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "scope_attributes"
        ]
      },
      "UpdateMeasurement": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "container_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "container_type": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  },
                  "scope_attributes": {
                    "type": "object",
                    "properties": {
                      "start_at": {
                        "type": "string"
                      },
                      "end_at": {
                        "type": "string"
                      },
                      "channel_ids": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "id": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "container": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationSettingsFilter": {
        "type": "object",
        "properties": {
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "read": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "notification_setting_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "NotificationSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "delivery_methods": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "rate_limit": {
                "type": "integer",
                "format": "int64"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "protonotification": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "notifications": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "NotificationSettings": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NotificationSetting"
        }
      },
      "NotificationSettingsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationSettingResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationSetting"
          }
        }
      },
      "CreateNotificationSetting": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "delivery_methods": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "notifications": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateNotificationSetting": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "delivery_methods": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "notifications": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationTriggersFilter": {
        "type": "object",
        "properties": {
          "notification_triggers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "NotificationTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "conditions": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "protonotification": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "NotificationTriggers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NotificationTrigger"
        }
      },
      "NotificationTriggersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationTriggers"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationTriggerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationTrigger"
          }
        }
      },
      "CreateNotificationTrigger": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "conditions": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "key"
        ]
      },
      "UpdateNotificationTrigger": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "conditions": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationsFilter": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "read": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "notification_setting_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "details": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "read": {
                "type": "boolean"
              },
              "title": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "notification_setting": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "protonotification": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Notifications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Notification"
        }
      },
      "NotificationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Notifications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Notification"
          }
        }
      },
      "UpdateNotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "read": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "protonotification": {
                    "$ref": "#/components/schemas/HasOneRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/HasOneRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "OrganisationMembershipsFilter": {
        "type": "object",
        "properties": {
          "organisation_memberships": {
            "type": "object",
            "additionalProperties": false
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OrganisationMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "OrganisationMemberships": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrganisationMembership"
        }
      },
      "OrganisationMembershipsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganisationMemberships"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "OrganisationMembershipResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganisationMembership"
          }
        }
      },
      "OrganisationsFilter": {
        "type": "object",
        "properties": {
          "organisations": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "website": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "settings": {
                "$ref": "#/components/schemas/OrganisationSettings"
              },
              "logo": {
                "type": "object",
                "description": "The respective image size of the different logo versions is 300x300 pixels (medium) and 40x40 pixels (small).",
                "properties": {
                  "url": {
                    "type": "object",
                    "properties": {
                      "medium": {
                        "type": "string",
                        "format": "uri"
                      },
                      "thumb": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Organisations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Organisation"
        }
      },
      "OrganisationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Organisations"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "OrganisationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Organisation"
          }
        }
      },
      "CreateOrganisation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/OrganisationSettings"
                  },
                  "domain": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "license_key": {
            "type": "string"
          }
        },
        "required": [
          "domain",
          "name"
        ]
      },
      "UpdateOrganisation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/OrganisationSettings"
                  }
                }
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "Setting the logo property to 'null' will delete the logo.",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "PortsFilter": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connector_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "connector": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Port": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "position": {
                "type": "string"
              },
              "device_type_simulation": {
                "type": "string"
              },
              "instance": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "driver_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "connector_key_nice": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "connector": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Ports": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Port"
        }
      },
      "PortsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Ports"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "PortResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Port"
          }
        }
      },
      "CreatePort": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "string"
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "device_type_simulation": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "object"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "device_type": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "connector": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdatePort": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "string"
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "device_type_simulation": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "object"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "device_type": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "connector": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ProtonotificationsFilter": {
        "type": "object",
        "properties": {
          "protonotifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_triggers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Protonotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "notification_triggers": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "notification_settings": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Protonotifications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Protonotification"
        }
      },
      "ProtonotificationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Protonotifications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ProtonotificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Protonotification"
          }
        }
      },
      "CreateProtonotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "delivery_methods": {
                    "type": "string",
                    "enum": [
                      "ui",
                      "email"
                    ]
                  },
                  "rate_limit": {
                    "description": "How many milliseconds should pass between one notification to the next?",
                    "type": "integer"
                  },
                  "notification_triggers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "conditions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "notification_triggers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdateProtonotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "delivery_methods": {
                    "type": "string",
                    "enum": [
                      "ui",
                      "email"
                    ]
                  },
                  "rate_limit": {
                    "description": "How many milliseconds should pass between one notification to the next?",
                    "type": "integer"
                  },
                  "notification_triggers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "conditions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "notification_triggers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "RolesFilter": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "groups": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Roles": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Role"
        }
      },
      "RolesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Roles"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Role"
          }
        }
      },
      "CreateRole": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateRole": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "SamplesFilter": {
        "type": "object",
        "properties": {
          "samples": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Sample": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Samples": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Sample"
        }
      },
      "SamplesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Samples"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SampleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Sample"
          }
        }
      },
      "CreateSample": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "identifier": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "identifier"
        ]
      },
      "UpdateSample": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "identifier": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "SecretAccessesFilter": {
        "type": "object",
        "properties": {
          "secret_accesses": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "secret_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "secret": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "description": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "resource": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "SecretAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "secret_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_type": {
                "type": "string"
              },
              "resource_id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "integer",
                "format": "int64"
              },
              "key": {
                "description": "The key of the Secret that the access relates to"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "SecretAccesses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SecretAccess"
        }
      },
      "SecretAccessesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretAccesses"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SecretAccessResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretAccess"
          }
        }
      },
      "CreateSecretAccess": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "secret_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_type": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "secret": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "oidc_auth_token": {
                "type": "string"
              }
            }
          }
        }
      },
      "UpdateSecretAccess": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "secret": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "oidc_auth_token": {
                "type": "string"
              }
            }
          }
        }
      },
      "SecretsFilter": {
        "type": "object",
        "properties": {
          "secrets": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "description": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Secret": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "description": {
                "type": "string"
              },
              "owner_id": {
                "type": "integer",
                "format": "int64"
              },
              "key": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "value": {
                "description": "Masked value of a secret.",
                "type": "string"
              },
              "scope": {
                "description": "A flag indicating the type of secret that is accepted. Personal secrets can only be accessed by the user who created them. Organization secrets can only be created by administrators and are accessible to every member of the organization.",
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Secrets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Secret"
        }
      },
      "SecretsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Secrets"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SecretResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Secret"
          }
        }
      },
      "CreateSecret": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the secret. May only consist of alphanumeric characters, hyphens, or underscores.",
                    "type": "string"
                  },
                  "scope": {
                    "type": "string",
                    "description": "The scope of the secret. Current available scopes are `organisation` and `personal`"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "UpdateSecret": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "SignaturesFilter": {
        "type": "object",
        "properties": {
          "signatures": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Signature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "user_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_type": {
                "type": "string"
              },
              "resource_id": {
                "type": "integer",
                "format": "int64"
              },
              "signature": {
                "description": "The data used to generate the SHA256 signature digest"
              },
              "digest": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Signatures": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Signature"
        }
      },
      "SignaturesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Signatures"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SignatureResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "CreateSignature": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_type": {
                    "type": "string"
                  },
                  "signature": {
                    "description": "The data used to generate the SHA256 signature digest"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "oidc_auth_token": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "signature"
        ]
      },
      "SmartViewsFilter": {
        "type": "object",
        "properties": {
          "smart_views": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SmartView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "display_name": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "settings": {
                "$ref": "#/components/schemas/SmartViewSettings"
              },
              "category": {
                "type": "string",
                "enum": [
                  "resource",
                  "audit_trail"
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "SmartViews": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SmartView"
        }
      },
      "SmartViewsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartViews"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SmartViewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartView"
          }
        }
      },
      "CreateSmartView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/SmartViewSettings"
                  },
                  "owner": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "resource",
                      "audit_trail"
                    ]
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name",
          "settings",
          "category"
        ]
      },
      "UpdateSmartView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/SmartViewSettings"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateRequestsFilter": {
        "type": "object",
        "properties": {
          "update_requests": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "context_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "context_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updatable_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updatable_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "updatable_type": {
                "type": "string"
              },
              "updatable_id": {
                "type": "integer",
                "format": "int64"
              },
              "context_type": {
                "type": "string"
              },
              "context_id": {
                "type": "integer",
                "format": "int64"
              },
              "object_changes": {
                "description": "Changes of an updatable record that require a user confirmation",
                "type": "object"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "patch_changes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateRequests": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UpdateRequest"
        }
      },
      "UpdateRequestsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateRequests"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "UpdateRequestResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateRequest"
          }
        }
      },
      "UpdateUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "change_reason": {
                "type": "string",
                "description": "A reason provided by a user who confirms a change of a record"
              }
            }
          }
        }
      },
      "UsersFilter": {
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "full_name": {
                "type": "string"
              },
              "slugs": {
                "type": "string"
              },
              "position": {
                "type": "string"
              },
              "email_link": {
                "type": "string"
              },
              "mobile_phone": {
                "type": "string"
              },
              "office_phone": {
                "type": "string"
              },
              "initials": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "organisation_membership_id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "contact_details": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "groups": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "roles": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "UsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Users"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "groups": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "VersionsFilter": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "change_reason": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "event_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "item_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "item_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "context": {
                "type": "object",
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "changes": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "from": {},
                      "to": {}
                    }
                  }
                }
              },
              "change_reason": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "item_type": {
                "type": "string"
              },
              "item_id": {
                "type": "integer",
                "format": "int64"
              },
              "event_id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Versions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Version"
        }
      },
      "VersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Versions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "VersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "layout": {},
              "viewable_type": {
                "type": "string"
              },
              "draft_layout": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "data_scopes": {
                "description": "Elements data scopes",
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "params": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "channels": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "status_channels": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "container": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "draft_data_scopes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "viewable": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "measurements": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ViewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/View"
          }
        }
      },
      "UpdateView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "layout": {
                    "description": "View layout"
                  },
                  "draft_layout": {
                    "description": "View draft layout"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "viewable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WebhookLogsFilter": {
        "type": "object",
        "properties": {
          "webhook_logs": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WebhookLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "string"
              },
              "response_message": {
                "type": "string"
              },
              "response_body": {
                "type": "string"
              },
              "trigger": {
                "type": "string"
              },
              "payload": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "container_type": {
                "type": "string"
              },
              "container_id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WebhookLogs": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookLog"
        }
      },
      "WebhookLogsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookLogs"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WebhookLogResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookLog"
          }
        }
      },
      "WebhookSubscriptionsFilter": {
        "type": "object",
        "properties": {
          "webhook_subscriptions": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "WebhookSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "triggers": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "headers": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WebhookSubscriptions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookSubscription"
        }
      },
      "WebhookSubscriptionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookSubscriptions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WebhookSubscriptionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookSubscription"
          }
        }
      },
      "CreateWebhookSubscription": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "url": {
                    "type": "string"
                  },
                  "triggers": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "url"
        ]
      },
      "UpdateWebhookSubscription": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "url": {
                    "type": "string"
                  },
                  "triggers": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowEventsFilter": {
        "type": "object",
        "properties": {
          "workflow_events": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "definition": {
                "$ref": "#/components/schemas/WorkflowEventDefinition"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowEvents": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowEvent"
        }
      },
      "WorkflowEventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowEvents"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowEvent"
          }
        }
      },
      "CreateWorkflowEvent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "definition": {
                    "$ref": "#/components/schemas/WorkflowEventDefinition"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_run": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowFieldsFilter": {
        "type": "object",
        "properties": {
          "workflow_fields": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "field_scope_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "field_scope_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "identifier": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "pointer": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "flow_pointer": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "read_only": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "prepare": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "output": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "field_scope": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "pointer": {
                "type": "string"
              },
              "read_only": {
                "type": "boolean"
              },
              "prepare": {
                "type": "boolean"
              },
              "output": {
                "type": "boolean"
              },
              "schema": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "hidden": {
                "type": "boolean"
              },
              "field_scope_type": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "change_reasons": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "value_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "value": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "field_scope": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowField"
        }
      },
      "WorkflowFieldsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowFields"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowFieldResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowField"
          }
        }
      },
      "UpdateWorkflowField": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "workflow_field"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "output": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "workflow_run": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "meta": {
            "type": "object",
            "properties": {
              "change_reason": {
                "type": "string",
                "description": "A reason provided by a user who confirms a change of a workflow field."
              }
            }
          }
        }
      },
      "WorkflowRunsFilter": {
        "type": "object",
        "properties": {
          "workflow_runs": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_template": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowRun": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "state": {
                "type": "integer",
                "format": "int64"
              },
              "run_number": {
                "type": "integer",
                "format": "int64"
              },
              "collaborator_ids": {
                "description": "List of IDs from users who collaborate on the Workflow Run execution",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "template": {
                "description": "The template schema used by this run",
                "type": "object"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              },
              "locked": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_template": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "workflow_steps": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "review": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowRuns": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowRun"
        }
      },
      "WorkflowRunsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowRuns"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowRunResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowRun"
          }
        }
      },
      "CreateWorkflowRun": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  },
                  "remember_me": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_template": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "origin_collection_resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateWorkflowRun": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_template": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "origin_collection_resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateWorkflowRunStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowStepTemplatesFilter": {
        "type": "object",
        "properties": {
          "workflow_step_templates": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowStepTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "template_version": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              },
              "template": {
                "description": "The JSON schema that will be used",
                "type": "object"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowStepTemplates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowStepTemplate"
        }
      },
      "WorkflowStepTemplatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStepTemplates"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowStepTemplateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          }
        }
      },
      "CreateWorkflowStepTemplate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_step_template"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "WorkflowStepsFilter": {
        "type": "object",
        "properties": {
          "workflow_steps": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "completed_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowStep": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "pointer": {
                "type": "string"
              },
              "flow_pointer": {
                "type": "string"
              },
              "step_number": {
                "type": "integer",
                "format": "int64"
              },
              "current_substep": {
                "type": "integer",
                "format": "int64"
              },
              "snapshots": {
                "description": "Snapshots of data used when displaying markdown content within this step",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object"
                    },
                    "tables": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "children": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "children": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "children": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "children": {
                                              "description": "Anything that can be stringify"
                                            },
                                            "properties": {
                                              "type": "object"
                                            }
                                          }
                                        }
                                      },
                                      "properties": {
                                        "type": "object",
                                        "properties": {
                                          "pointer": {
                                            "type": "string"
                                          },
                                          "selectable": {
                                            "type": "boolean"
                                          },
                                          "selected": {
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "caption": {
                                      "type": "string"
                                    },
                                    "columns": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "align": {
                                            "type": "string",
                                            "enum": [
                                              "left",
                                              "right",
                                              "inherit",
                                              "center"
                                            ]
                                          },
                                          "label": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "label": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "alternatingRowColor": {
                                "type": "boolean"
                              },
                              "borders": {
                                "type": "boolean"
                              },
                              "data": {
                                "type": "string"
                              },
                              "dense": {
                                "type": "boolean"
                              },
                              "textWrapping": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "completed_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "reviews": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowSteps": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowStep"
        }
      },
      "WorkflowStepsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowSteps"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowStepResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStep"
          }
        }
      },
      "CreateWorkflowStepSubstepCompletion": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "CreateWorkflowStepSubstepRepeat": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "WorkflowTemplatesFilter": {
        "type": "object",
        "properties": {
          "workflow_templates": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "template_version": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "hidden_at": {
                "type": "string",
                "format": "date-time"
              },
              "template": {
                "description": "The uploaded template schema",
                "type": "object"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeItem"
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowTemplates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowTemplate"
        }
      },
      "WorkflowTemplatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowTemplates"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowTemplateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowTemplate"
          }
        }
      },
      "CreateWorkflowTemplate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_template"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "BooleanAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "boolean",
            "default": false,
            "nullable": true
          }
        }
      },
      "DateAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "DatetimeAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "FileAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "file": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "ImageAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "nullable": true
          }
        }
      },
      "NumberAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "PhysicalQuantityAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "number": {
                "type": "number"
              },
              "unit": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "PlotAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "data": {
                "items": {
                  "properties": {
                    "x": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "y": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "default": [
                  {
                    "x": [
                      0,
                      60000
                    ],
                    "y": [
                      0,
                      0
                    ],
                    "fill": "tozeroy",
                    "line": {
                      "shape": "hv"
                    }
                  }
                ]
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "RelationAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "id": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        }
                      ]
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "StringAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TextAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DurationAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "TemperatureCurveAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "items": {
              "properties": {
                "mode": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "nullable": true
          }
        }
      },
      "CustomAttributesFilter": {
        "type": "object",
        "properties": {
          "custom_attributes": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "resource_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "data_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CustomAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data_type": {
                "type": "string"
              },
              "options": {
                "type": "object"
              },
              "resource_types": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "is_being_used": {
                "type": "boolean"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "CustomAttributes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CustomAttribute"
        }
      },
      "CustomAttributesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomAttributes"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CustomAttributeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomAttribute"
          }
        }
      },
      "CreateCustomAttribute": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "data_type": {
                    "type": "string"
                  },
                  "options": {
                    "type": "object"
                  },
                  "resource_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name",
          "data_type"
        ]
      },
      "UpdateCustomAttribute": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "options": {
                    "type": "object"
                  },
                  "resource_types": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateExport": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttributeItem"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ReviewsFilter": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "parent_id": {
                "type": "integer"
              },
              "reviewable_type": {
                "type": "string",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "string",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "display_name": {
                "type": "string"
              },
              "parent_id": {
                "type": "integer",
                "format": "int64"
              },
              "reviewable_type": {
                "type": "string"
              },
              "reviewable_id": {
                "type": "integer",
                "format": "int64"
              },
              "reviewer_id": {
                "type": "integer",
                "format": "int64"
              },
              "reviewer_display_name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "current_iteration": {
                "type": "integer",
                "format": "int64"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Reviews": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Review"
        }
      },
      "ReviewsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Reviews"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ReviewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Review"
          }
        }
      },
      "UpdateReview": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "in_progress",
                      "approved",
                      "rejected"
                    ]
                  },
                  "signature_attributes": {
                    "type": "object",
                    "properties": {
                      "signature": {
                        "description": "The data used to generate the SHA256 signature digest"
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "oidc_auth_token": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "CorrectionsFilter": {
        "type": "object",
        "properties": {
          "corrections": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "field_pointer": {
                "type": "string",
                "items": {
                  "type": "string"
                }
              },
              "review_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "review_iteration": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "string",
                "items": {
                  "type": "string"
                },
                "enum": [
                  "pending",
                  "outdated"
                ]
              }
            }
          }
        }
      },
      "Correction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "outdated"
                ]
              },
              "review_id": {
                "type": "integer",
                "format": "int64"
              },
              "review_iteration": {
                "type": "integer",
                "format": "int64"
              },
              "flagged_value": {
                "description": "Incorrect value that needs to be corrected.",
                "type": "string"
              },
              "corrected_value": {
                "description": "Corrected value provided in response of the flagged_value.",
                "type": "string"
              },
              "field_pointer": {
                "type": "string"
              },
              "change_reasons": {
                "type": "object"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "analyst": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "reviewer": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "review": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_field": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "comment": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Corrections": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Correction"
        }
      },
      "CorrectionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Corrections"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CorrectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Correction"
          }
        }
      },
      "CreateCorrection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "comment_attributes": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string"
                      }
                    }
                  },
                  "field_pointer": {
                    "type": "string"
                  },
                  "flagged_value": {
                    "description": "Incorrect value that needs to be corrected.",
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "analyst": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "reviewer": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "review": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_field": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "comment_attributes",
          "flagged_value",
          "field_pointer"
        ]
      },
      "UpdateCorrection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "comment_attributes": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string"
                      }
                    }
                  },
                  "corrected_value": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "analyst": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "reviewer": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "review": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_field": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "change_reason": {
                "type": "string",
                "description": "A reason provided by a user who confirms a change of a workflow field."
              }
            }
          }
        }
      },
      "ResourceDestinationsFilter": {
        "type": "object",
        "properties": {
          "resource_destinations": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "collection_resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collection": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collection_resource": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "collection_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.hidden_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResourceDestination": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collection": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collection_resource": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ResourceDestinations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ResourceDestination"
        }
      },
      "ResourceDestinationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResourceDestinations"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ResourceDestinationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResourceDestination"
          }
        }
      },
      "CreateResourceDestination": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection_resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateResourceDestination": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection_resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ChannelThresholdsFilter": {
        "type": "object",
        "properties": {
          "channel_thresholds": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "channel_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ChannelThreshold": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "level": {
                "type": "integer",
                "format": "int64"
              },
              "value": {
                "type": "string"
              },
              "comparator": {
                "type": "integer",
                "format": "int64"
              },
              "duration": {
                "type": "integer",
                "format": "int64"
              },
              "condition": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ChannelThresholds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ChannelThreshold"
        }
      },
      "ChannelThresholdsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChannelThresholds"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ChannelIncidentsFilter": {
        "type": "object",
        "properties": {
          "channel_incidents": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "channel_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "channel_threshold_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channel": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disabled": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channel_threshold": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "channel_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ChannelIncident": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "closed_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "threshold_version_id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "channel_threshold": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ChannelIncidents": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ChannelIncident"
        }
      },
      "ChannelIncidentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChannelIncidents"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ChannelIncidentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChannelIncident"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Fields",
      "description": "The `fields` parameter allows you to only fetch required information in\na query. It can be combined with other query parameters. By reducing the transferred\n\n### Examples\n\n- _return a single attribute:_ `devices?fields[devices]=name`\n- _return multiple attributes:_ `devices?fields[devices]=name,created_at`\n- _along with included resources:_ `devices?include=connector&fields[devices]=name&fields[connector]=name`\n",
      "x-traitTag": true
    },
    {
      "name": "Filtering",
      "description": "Filtering of resource's instances is available via a `filter` query\nparameter. Can be combined with other query parameters.\n\n### List of available comparison operators:\n\n| Operator | Query Symbol |\n|---|---|\n| greater than ('>') | `gt` |\n| greater or equal ('>=') | `ge` |\n| less than ('<') | `lt` |\n| less or equal ('<=') | `le` |\n| equal (default) ('=') | `eq` |\n| not equal ('!=') | `ne` |\n| like (match at least partly) ('~*') | `lk` |\n| unlike (does not match even partly) ('!~*') | `nlk` |\n| match json objects ('@>') | `json` |\n\n### Examples\n\n- `devices?filter[devices][status]=offline`\n- _can be used on both the main resource and included:_ `devices?include=tasks&filter[devices][name]=DeviceName&filter[devices][status]=offline&filter[tasks][name]=SecondTask`\n- _can be used with comparison operators:_ `tasks?filter[tasks][created_at][ge]=2014-01-01`.\n",
      "x-traitTag": true
    },
    {
      "name": "Pagination",
      "description": "Pagination of resource's instances is available via a `page` query\nparameter. Can be combined with other query paraters.\n\n### Examples\n\n- _number of pages to fetch:_ `devices?page[devices][number]=10`\n- _number of records per page:_ `devices?page[devices][size]=2`\n- _fetch the first page of records_ `devices?page[devices][size]=2&page[devices][first]`\n- _fetch the last page of records_ `devices?page[devices][size]=2&page[devices][last]`\n- _fetch the next page of records_ `devices?page[devices][size]=2&page[devices][next]`\n- _fetch the previous page of records_ `devices?page[devices][size]=2&page[devices][prev]`\n- _show the total number of available pages:_ `devices?page[devices][total]`\n",
      "x-traitTag": true
    },
    {
      "name": "Searching",
      "description": "Full-text search of resource's instances is available via a `search` query\nparameter. Can be combined with other query parameters.\n\n### Examples\n\n- _search users:_ `users?search[users]=John%20engineer`\n- _search samples:_ `samples?search[samples]=solution%20fr8wv3mt`\n- _search devices:_ `devices?search[devices]=online`\n",
      "x-traitTag": true
    },
    {
      "name": "Sorting",
      "description": "Sorting of resource's instances is available via a `sort` query\nparameter. Can be combined with other query parameters.\n\n### Examples\n\n- _sort in an ascending order by a given attribute:_ `devices?sort[devices]=created_at`\n- _sort in a descending order by a given attribute:_ `devices?sort[devices]=-created_at`\n- _accepts multiple attributes:_ `sort[devices]=-created_at,name`\n",
      "x-traitTag": true
    },
    {
      "name": "applications",
      "x-displayName": "Applications",
      "x-traitTag": false
    },
    {
      "name": "attachments",
      "x-displayName": "Attachments",
      "x-traitTag": false
    },
    {
      "name": "authentications",
      "x-displayName": "Authentications",
      "x-traitTag": false
    },
    {
      "name": "automations",
      "x-displayName": "Automations",
      "x-traitTag": false
    },
    {
      "name": "channel_incidents",
      "x-displayName": "Channel Incidents",
      "x-traitTag": false
    },
    {
      "name": "channel_thresholds",
      "x-displayName": "Channel Thresholds",
      "x-traitTag": false
    },
    {
      "name": "channels",
      "x-displayName": "Channels",
      "x-traitTag": false
    },
    {
      "name": "collection_resources",
      "x-displayName": "Collection Resources",
      "x-traitTag": false
    },
    {
      "name": "collections",
      "x-displayName": "Collections",
      "x-traitTag": false
    },
    {
      "name": "command_executions",
      "x-displayName": "Command Executions",
      "description": "A command execution is created for every command send to a device. If\nthe driver supports it the execution will also track confirmation and\ncompletion or failure of the command.\n",
      "x-traitTag": false
    },
    {
      "name": "comments",
      "x-displayName": "Comments",
      "description": "<span style=\"color:#f44336\">Attention! This feature in under development.</span>\n",
      "x-traitTag": false
    },
    {
      "name": "connector_reset_drivers",
      "x-displayName": "Connector Reset Drivers",
      "x-traitTag": false
    },
    {
      "name": "connectors",
      "x-displayName": "Connectors",
      "x-traitTag": false
    },
    {
      "name": "corrections",
      "x-displayName": "Corrections",
      "x-traitTag": false
    },
    {
      "name": "custom_attributes",
      "x-displayName": "Custom Attributes",
      "x-traitTag": false
    },
    {
      "name": "dashboards",
      "x-displayName": "Dashboards",
      "x-traitTag": false
    },
    {
      "name": "data_points",
      "x-displayName": "Data Points",
      "x-traitTag": false
    },
    {
      "name": "device_classes",
      "x-displayName": "Device Classes",
      "x-traitTag": false
    },
    {
      "name": "device_drivers",
      "x-displayName": "Device Drivers",
      "x-traitTag": false
    },
    {
      "name": "device_types",
      "x-displayName": "Device Types",
      "x-traitTag": false
    },
    {
      "name": "devices",
      "x-displayName": "Devices",
      "x-traitTag": false
    },
    {
      "name": "events",
      "x-displayName": "Events",
      "x-traitTag": false
    },
    {
      "name": "exports",
      "x-displayName": "Exports",
      "x-traitTag": false
    },
    {
      "name": "group_resources",
      "x-displayName": "Group Resources",
      "x-traitTag": false
    },
    {
      "name": "group_users",
      "x-displayName": "Group Users",
      "x-traitTag": false
    },
    {
      "name": "groups",
      "x-displayName": "Groups",
      "x-traitTag": false
    },
    {
      "name": "measurements",
      "x-displayName": "Measurements",
      "x-traitTag": false
    },
    {
      "name": "notification_settings",
      "x-displayName": "Notification Settings",
      "x-traitTag": false
    },
    {
      "name": "notification_triggers",
      "x-displayName": "Notification Triggers",
      "x-traitTag": false
    },
    {
      "name": "notifications",
      "x-displayName": "Notifications",
      "x-traitTag": false
    },
    {
      "name": "organisation_memberships",
      "x-displayName": "Organisation Memberships",
      "x-traitTag": false
    },
    {
      "name": "organisations",
      "x-displayName": "Organisations",
      "x-traitTag": false
    },
    {
      "name": "port_bindings",
      "x-displayName": "Port Bindings",
      "x-traitTag": false
    },
    {
      "name": "ports",
      "x-displayName": "Ports",
      "x-traitTag": false
    },
    {
      "name": "protonotifications",
      "x-displayName": "Protonotifications",
      "x-traitTag": false
    },
    {
      "name": "resource_destinations",
      "x-displayName": "Resource Destinations",
      "x-traitTag": false
    },
    {
      "name": "reviews",
      "x-displayName": "Reviews",
      "x-traitTag": false
    },
    {
      "name": "roles",
      "x-displayName": "Roles",
      "x-traitTag": false
    },
    {
      "name": "samples",
      "x-displayName": "Samples",
      "x-traitTag": false
    },
    {
      "name": "schemas",
      "x-displayName": "Schemas",
      "x-traitTag": false
    },
    {
      "name": "secret_accesses",
      "x-displayName": "Secret Accesses",
      "x-traitTag": false
    },
    {
      "name": "secrets",
      "x-displayName": "Secrets",
      "x-traitTag": false
    },
    {
      "name": "signatures",
      "x-displayName": "Signatures",
      "x-traitTag": false
    },
    {
      "name": "smart_views",
      "x-displayName": "Smart Views",
      "x-traitTag": false
    },
    {
      "name": "update_requests",
      "x-displayName": "Update Requests",
      "x-traitTag": false
    },
    {
      "name": "users",
      "x-displayName": "Users",
      "x-traitTag": false
    },
    {
      "name": "versions",
      "x-displayName": "Versions",
      "x-traitTag": false
    },
    {
      "name": "view_resets",
      "x-displayName": "View Resets",
      "x-traitTag": false
    },
    {
      "name": "views",
      "x-displayName": "Views",
      "x-traitTag": false
    },
    {
      "name": "webhook_logs",
      "x-displayName": "Webhook Logs",
      "x-traitTag": false
    },
    {
      "name": "webhook_subscriptions",
      "x-displayName": "Webhook Subscriptions",
      "x-traitTag": false
    },
    {
      "name": "workflow_events",
      "x-displayName": "Workflow Events",
      "x-traitTag": false
    },
    {
      "name": "workflow_fields",
      "x-displayName": "Workflow Fields",
      "x-traitTag": false
    },
    {
      "name": "workflow_run_statuses",
      "x-displayName": "Workflow Run Statuses",
      "x-traitTag": false
    },
    {
      "name": "workflow_runs",
      "x-displayName": "Workflow Runs",
      "x-traitTag": false
    },
    {
      "name": "workflow_step_substep_completions",
      "x-displayName": "Workflow Step Substep Completions",
      "x-traitTag": false
    },
    {
      "name": "workflow_step_substep_repeats",
      "x-displayName": "Workflow Step Substep Repeats",
      "x-traitTag": false
    },
    {
      "name": "workflow_step_templates",
      "x-displayName": "Workflow Step Templates",
      "x-traitTag": false
    },
    {
      "name": "workflow_step_triggers",
      "x-displayName": "Workflow Step Triggers",
      "x-traitTag": false
    },
    {
      "name": "workflow_steps",
      "x-displayName": "Workflow Steps",
      "x-traitTag": false
    },
    {
      "name": "workflow_templates",
      "x-displayName": "Workflow Templates",
      "x-traitTag": false
    }
  ]
}