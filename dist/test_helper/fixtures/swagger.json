{
  "openapi": "3.0.0",
  "info": {
    "title": "Laboperator API",
    "contact": {
      "name": "Julian LÃ¼bke",
      "email": "julian.luebke@labforward.io",
      "url": "https://www.laboperator.com/contact/"
    },
    "version": "2.0.0-rc.12",
    "x-logo": {
      "url": "/assets/laboperator_logo-1e698a7d503e3cc860f2aa616ce8d9c1f53ebf02e34deb24e52875785bf81d5d.png",
      "backgroundColor": "#fafafa",
      "altText": "Laboperator logo"
    },
    "description": "This is the Laboperator API documentation bundled with\nyour Laboperator Server. It will reflect the API v2 subversion that\nruns on this instance.\n\n# PRE-RELEASE\nThe current distribution of the API v2 is a pre-realease and as such\nsubject to frequent updates and potentially breaking changes.\n\n# Changlelog\nThis changelog will be kept here for pre-releases only.\n\n## v2.0.0-rc.12\n### Added\n- introduce trait-tags in API V2 documentaion for common query parameters `fields`, `filter`, `sort`, `page`\n\n### Change\n- API V2 data_points endpoints are normalized\n\n## v2.0.0-rc.11\n\n### Added\n- additional endpoints for `jobs`, `views`, `tasks`, `notifications`, `ports`, `schemas`\n- custom rake task `rake spec:api_v2_docs` for running specs along with generation of documentation\n- `filter` fetch parameter accepts and understands comparison operators `gt`, `ge`, `lt`, `le`, `eq`, `ne`, `lk`, `nlk`\n\n### Changed\n- invalid query params are not ignored anymore but throw a 'Bad Request' error\n\n### Fixed\n- ActiveRecord validation errors are handled by JsonApiUtils\n- `fields` specs context and descriptions\n- errors which happen on a middleware level are handled in a JsonApiUtils manner\n\n## v2.0.0-rc.10\n\n### Changed\n- invalid query params are not ignored anymore but throw a 'Bad Request' error\n\n### Fixed\n- ActiveRecord validation errors are handled by JsonApiUtils\n\n## v2.0.0-rc.9\n\n### Changed\n- updated schema structure\n\n### Fixed\n- missing id parameter for device command endpoint\n- minor errors in several response and body schemas\n\n## v2.0.0-rc.8\n\n### Added\n- command execution endpoints\n- devices command endpoint\n\n## v2.0.0-rc.7\n\n### Added\n- protocol rule endpoints\n\n## v2.0.0-rc.6\n\n### Added\n- data points endpoints\n- task include `result`\n- measurement `data_points` documentation\n- measurement `protocol_entries` documentation\n\n### Fixed\n- task type serialization\n\n## v2.0.0-rc.5\n\n### Added\n- support for filters\n- support for sparse field sets\n- Task.parameters documentation\n- custom attributes documentation\n- Job.response\n- Task include option for Measurements\n- added `created_at`, `description`, `end_at`, `protocol_entries`, `start_at`, `status`, `updated_at`, `uuid` to Measurement serializer\n\n### Fixed\n- URLs in links for subtyped entities\n\n### Removed\n- create action for channels\n- `prev` and `next` links without logical relation (most cases as of now)\n\n# Standards\nThe API uses standards (referenced below) and best practices to\nmake the interaction as easy as possible. Not only are standards\na great way of benefitting from the collective experience of a large\ncommunity that develops these standards, but also for users to rely\non a vivid ecosystem of documentation and resources.\n\n## OpenAPI specification\nThis API is documented in the both human- and machine-readable\n[OpenAPI](https://github.com/OAI/OpenAPI-Specification) format.\nYou can download the raw OpenAPI document for this API using the\nbutton on the top of this page.\n\nThe OpenAPI specification originates from the\n[swagger.io](https://swagger.io). There is an active community\naround the standard and many [tools](https://openapi.tools)\navailable for most modern programming environments.\n\n## JSON:API specification\nWhile OpenAPI specifies how to document an API,\n[JSON:API](https://jsonapi.org) is a specification for building APIs in\n[JSON](https://www.json.org). It is mostly a set of conventions that help\nus to build a consistent service. Our developers and users of the API\nalike can build on generalized tooling and a common understanding of\nwhat to expect.\n"
  },
  "externalDocs": {
    "description": "Find out more about Laboperator terminology and resources in general at our helpdesk.\n",
    "url": "https://support.labforward.io"
  },
  "servers": [
    {
      "url": "/api/v2",
      "description": "Default endpoint on the server hosting this documentation."
    },
    {
      "url": "{scheme}://{host}/api/v2/{tenant}",
      "description": "Use this server template to set things up.",
      "variables": {
        "scheme": {
          "enum": [
            "http",
            "https"
          ],
          "description": "The HTTP scheme to use.",
          "default": "http"
        },
        "tenant": {
          "description": "Your tenants domain.",
          "default": "your-tenant"
        },
        "host": {
          "description": "The server hosting your Laboperator instance.",
          "default": "lvh.me"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "All requests against the API need to be authenticated. We use\n[OAuth 2.0](https://oauth.net/2/) to implement different\nauthentication strategies. If you are not familiar with OAuth,\nyet, you can get started with some\n[useful resources](https://oauth.net/articles/) to understand the\nbasics. All OAuth strategies lead to an Access Token being issued\nthat needs to be included in the headers of any API request.\n\nFor example:\n```\nAuthorization: Bearer 6e5ca31a16a1bf3426b33ace25efd07d03afb1c63e5f5c0fb6e82ef8b0293a0d\n```\n\n### Prerequisites\nEvery third-party code that wants to authenticate against the API\nneeds to be registered as an OAuth Client or in the Laboperator\nterminology an Application.\n\nRead more about [how to create an Application](https://support.labforward.io/support/solutions/articles/19000106654-how-to-create-a-new-oauth-client-application)\nfrom your Laboperator admin account.\n\n### OAuth Authorization Flows\nThe Laboperator API supports the following OAuth 2 authorization flows:\n\n  - [Authorization Code](http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.1)\n  - [Client Credentials](https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.4)\n  - [Resource Owner Password](http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.3)\n\nBoth `Authorization Code` and `Resource Owner Password` will authorize requests as the Resource Owner,\nwhile `Client Credentials` flow, will authorize requests as the Application Owner.\n\nMore information on the procedure can be found in the\n[Authentication article](https://support.labforward.io/support/solutions/articles/19000106856-authentication) in the helpdesk.\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          },
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          },
          "password": {
            "tokenUrl": "/oauth/token",
            "refreshUrl": "/oauth/token",
            "scopes": {
              "read": "Read access to resources.",
              "write": "Write access to resources.",
              "delete": "Deleting resources."
            }
          }
        }
      }
    },
    "schemas": {
      "Success": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "Success"
                ]
              }
            }
          }
        }
      },
      "Errors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "title"
              ],
              "properties": {
                "code": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "required": [
          "pageSize",
          "pagesTotal",
          "recordsOrder",
          "recordsTotal"
        ],
        "properties": {
          "pageSize": {
            "type": "number"
          },
          "pagesTotal": {
            "type": "number"
          },
          "recordsOrder": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "recordsTotal": {
            "type": "number"
          }
        }
      },
      "HasManyRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          }
        }
      },
      "HasOneRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Relationship"
          }
        }
      },
      "BelongsToRelationship": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Relationship"
          }
        }
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AddResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "resource"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "resource_type": {
                    "type": "string"
                  },
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "BindDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "port"
                ]
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CommandDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "command"
            ],
            "properties": {
              "command": {
                "type": "string"
              },
              "data": {
                "description": "Device Specific Data"
              }
            }
          }
        }
      },
      "MoveResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "resource"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "collection_id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "RestoreResource": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "minLength": 1,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CustomAttribute": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/BooleanAttribute",
            "date": "#/components/schemas/DateAttribute",
            "datetime": "#/components/schemas/DatetimeAttribute",
            "file": "#/components/schemas/FileAttribute",
            "image": "#/components/schemas/ImageAttribute",
            "number": "#/components/schemas/NumberAttribute",
            "physicalQuantity": "#/components/schemas/PhysicalQuantityAttribute",
            "plot": "#/components/schemas/PlotAttribute",
            "relation": "#/components/schemas/RelationAttribute",
            "string": "#/components/schemas/StringAttribute",
            "text": "#/components/schemas/TextAttribute",
            "duration": "#/components/schemas/DurationAttribute",
            "temperatureCurve": "#/components/schemas/TemperatureCurveAttribute"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BooleanAttribute"
          },
          {
            "$ref": "#/components/schemas/DateAttribute"
          },
          {
            "$ref": "#/components/schemas/DatetimeAttribute"
          },
          {
            "$ref": "#/components/schemas/FileAttribute"
          },
          {
            "$ref": "#/components/schemas/ImageAttribute"
          },
          {
            "$ref": "#/components/schemas/NumberAttribute"
          },
          {
            "$ref": "#/components/schemas/PhysicalQuantityAttribute"
          },
          {
            "$ref": "#/components/schemas/PlotAttribute"
          },
          {
            "$ref": "#/components/schemas/RelationAttribute"
          },
          {
            "$ref": "#/components/schemas/StringAttribute"
          },
          {
            "$ref": "#/components/schemas/TextAttribute"
          },
          {
            "$ref": "#/components/schemas/DurationAttribute"
          },
          {
            "$ref": "#/components/schemas/TemperatureCurveAttribute"
          }
        ]
      },
      "ManualTriggerParams": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "manual"
            ],
            "description": "The type of trigger to signal. As of now only `manual` triggers\nare allowed to be signaled via API.\n"
          },
          "substep": {
            "type": "number",
            "description": "Index of the substep that gives context to this trigger.\n"
          },
          "key": {
            "type": "string",
            "description": "A key that identifies the manual trigger in the context of the\nstep. When definind a behavior the key is passed as an option to\nthe manual trigger definition. The same key can be passed to a\nbutton on a substep. When the button is clicked this key is\npassed with the trigger. The key allows to use multiple manual\ntrigger in the context of the same step or substep.\n"
          }
        }
      },
      "OrganisationSettings": {
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "api_docs",
                "export_to_network_folder",
                "webhooks",
                "workflows"
              ]
            }
          },
          "theme": {
            "type": "object",
            "description": "The theme's primary and secondary colors",
            "properties": {
              "primary": {
                "description": "The theme's primary color",
                "type": "object",
                "properties": {
                  "main": {
                    "type": "string"
                  }
                }
              },
              "secondary": {
                "description": "The theme's secondary color",
                "type": "object",
                "properties": {
                  "main": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "approvedWebhooks": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ProtocolEntries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProtocolEntry"
        }
      },
      "ProtocolEntry": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "datetime",
            "description": "Timestamp of the protocol entry."
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the channel this protocol entry is related to."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the channel."
                },
                "value": {
                  "type": "number",
                  "nullable": true,
                  "description": "The value the channel had at this time."
                },
                "unit": {
                  "type": "string",
                  "description": "The unit of the channel."
                }
              }
            }
          },
          "comment": {
            "type": "string",
            "description": "A comment generated by the protocol rule."
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "definitions": {
            "description": "Schema definition for the various supported attribute types"
          },
          "ui_definitions": {
            "description": "UI component mapping for each supported attribute types"
          },
          "schema": {
            "description": "JSON Schema definition for the requested resource type"
          },
          "ui_schema": {
            "description": "UI template definition for the requested resource type"
          }
        }
      },
      "SmartViewSettings": {
        "type": "object",
        "description": "settings for the smart view",
        "properties": {
          "filters": {
            "description": "filters that will be used in the Smart View",
            "type": "object",
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "contains": {
                "type": "string"
              },
              "statuses": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "collection_id": {
                "type": "number"
              },
              "show_archived": {
                "type": "boolean"
              }
            }
          },
          "sorting": {
            "description": "sorting that will be used in the Smart View",
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "order": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              "order_by": {
                "type": "string"
              },
              "rows_per_page": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        }
      },
      "TriggerSignal": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {}
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "manual": "#/components/schemas/ManualTriggerParams"
              }
            }
          }
        }
      },
      "WorkflowEventAddStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "add_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "uuid",
              "version"
            ],
            "properties": {
              "uuid": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "fields": {
                "type": "object"
              },
              "fieldMapping": {
                "type": "object"
              }
            }
          }
        }
      },
      "WorkflowEventDefinition": {
        "required": [
          "type",
          "payload"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkflowEventAddStep"
          },
          {
            "$ref": "#/components/schemas/WorkflowEventMoveStep"
          },
          {
            "$ref": "#/components/schemas/WorkflowEventRemoveStep"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "add_step": "#/components/schemas/WorkflowEventAddStep",
            "move_step": "#/components/schemas/WorkflowEventMoveStep",
            "remove_step": "#/components/schemas/WorkflowEventRemoveStep"
          }
        }
      },
      "WorkflowEventMoveStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "move_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "from",
              "to"
            ],
            "properties": {
              "from": {
                "type": "string",
                "pattern": "^/flow/"
              },
              "to": {
                "type": "string",
                "pattern": "^/flow/"
              }
            }
          }
        }
      },
      "WorkflowEventRemoveStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "remove_step"
            ]
          },
          "payload": {
            "type": "object",
            "required": [
              "pointer"
            ],
            "properties": {
              "pointer": {
                "type": "string",
                "pattern": "^/flow/"
              }
            }
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "redirect_uri": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Applications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Application"
        }
      },
      "ApplicationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Applications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              },
              "access_token": {
                "type": "string"
              },
              "expires_in": {
                "type": "integer",
                "format": "int64"
              },
              "refresh_token": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Authentications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Authentication"
        }
      },
      "AuthenticationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Authentications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Authentication"
          }
        }
      },
      "Automation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "activated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "active": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Automations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Automation"
        }
      },
      "AutomationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Automations"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "AutomationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Automation"
          }
        }
      },
      "CreateAutomation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "automation"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "active": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UpdateAutomation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "automation"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ChannelsFilter": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "users": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "capability": {
                "type": "integer",
                "format": "int64"
              },
              "interval": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "on_update": {
                "type": "string"
              },
              "status": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "unit": {
                "type": "string"
              },
              "type_sym": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "specific_attributes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "device_class": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "users": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Channels": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Channel"
        }
      },
      "ChannelsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Channels"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ChannelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      },
      "CollectionsFilter": {
        "type": "object",
        "properties": {
          "collections": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "parent": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Collection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "personal": {
                "type": "boolean"
              },
              "secure": {
                "type": "boolean"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "collection_memberships": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "users": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "permissions": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "subcollections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "parent": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Collections": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Collection"
        }
      },
      "CollectionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Collections"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Collection"
          }
        }
      },
      "CreateCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parent_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "parent": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parent_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "parent": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "CommandExecutionsFilter": {
        "type": "object",
        "properties": {
          "command_executions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "confirmed_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "finished_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CommandExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "uuid": {
                "type": "string"
              },
              "parameters": {
                "description": "Any parameters send with the command including the command\nthat was triggered itself.\n",
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "command"
                ],
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "The triggered command"
                  }
                }
              },
              "device_id": {
                "type": "integer",
                "format": "int64"
              },
              "user_id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "string",
                "description": "There are four well defined status values:\n\n- **sent:** The command was send to the device\n- **confirmed:** The command was received by the device and will be processed\n- **success:** The command has successfully been processed\n- **error:** An error has occured whil processing the command\n\nAdditionally there might be other status values the device\nsends after confirming the command and before finishing or\nfailing.\n"
              },
              "confirmed_at": {
                "type": "string",
                "format": "date-time"
              },
              "finished_at": {
                "type": "string",
                "format": "date-time"
              },
              "data": {
                "description": "Any update or result data the device sends back. The\ncontent of this attribute depends on the device type and\nthe command.\n",
                "type": "object",
                "additionalProperties": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "CommandExecutions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CommandExecution"
        }
      },
      "CommandExecutionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommandExecutions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CommandExecutionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommandExecution"
          }
        }
      },
      "CommentsFilter": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "commentable_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "commentable_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "deleted_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "content": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "commentable_type": {
                "type": "string"
              },
              "commentable_id": {
                "type": "integer",
                "format": "int64"
              },
              "content": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "commentable": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Comments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Comment"
        }
      },
      "CommentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Comments"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "CreateComment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "commentable_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "commentable_type": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "commentable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateComment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "commentable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ConnectorsFilter": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": "object",
            "additionalProperties": false
          },
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          },
          "pairings": {
            "type": "object",
            "additionalProperties": false
          },
          "ports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connector_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Connector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "connector_key": {
                "type": "string"
              },
              "serial": {
                "type": "string"
              },
              "last_seen_at": {
                "type": "string",
                "format": "date-time"
              },
              "last_appeared_at": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "enrollment_server": {
                "type": "string"
              },
              "connector_endpoint": {
                "type": "string"
              },
              "last_reported_at": {
                "type": "string",
                "format": "date-time"
              },
              "hardware": {
                "type": "string"
              },
              "platform": {
                "type": "string"
              },
              "last_pairing_button_press_at": {
                "type": "string",
                "format": "date-time"
              },
              "version_modules": {
                "type": "string"
              },
              "cpu_architecture": {
                "type": "string"
              },
              "version_connector": {
                "type": "string"
              },
              "version_build": {
                "type": "string"
              },
              "target_version": {
                "type": "string"
              },
              "connector_key_nice": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "owner_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "slugs": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "internal_ip": {
                "type": "string"
              },
              "external_ip": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "pairings": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "ports": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Connectors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Connector"
        }
      },
      "ConnectorsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Connectors"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ConnectorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Connector"
          }
        }
      },
      "CreateConnector": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enrollment_server": {
                    "type": "string"
                  },
                  "connector_endpoint": {
                    "type": "string"
                  },
                  "connector_key": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "connector_key"
        ]
      },
      "UpdateConnector": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enrollment_server": {
                    "type": "string"
                  },
                  "connector_endpoint": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "slug": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collections": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Dashboards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Dashboard"
        }
      },
      "DashboardsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Dashboards"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DashboardResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Dashboard"
          }
        }
      },
      "CreateDashboard": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "copy_from": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateDashboard": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "DataPointsFilter": {
        "type": "object",
        "properties": {
          "data_points": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "channel_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "timestamp": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channel": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DataPoint": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "integer",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `channel_id`, `timestamp`, `value` and `str_value`.\n\nThe `channel_id` and the `timestamp` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            },
            {
              "type": "string",
              "format": "datetime",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `channel_id`, `timestamp`, `value` and `str_value`.\n\nThe `channel_id` and the `timestamp` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            },
            {
              "type": "number",
              "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `channel_id`, `timestamp`, `value` and `str_value`.\n\nThe `channel_id` and the `timestamp` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
            }
          ]
        },
        "example": [
          12,
          "2017-11-01T00:00:00Z",
          10.6
        ]
      },
      "DataPoints": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DataPoint"
        },
        "description": "For the sake of efficiency the DataPoint entity is not a Resource Object as per the JSON:API specification.\n\nA DataPoint is instead provided as a quadruple Array of `channel_id`, `timestamp`, `value` and `str_value`.\n\nThe `channel_id` and the `timestamp` uniquely identify any data point.\n\nEither `value` and `str_value` will always be `null` depending on the channel type.\n\n**Note:** The order of the items is always as mentioned above,\nwhich can due to limitations of the OpenApi specification not be expressed correctly in the schema.\n"
      },
      "DataPointsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataPoints"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DataPointResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataPoint"
          }
        }
      },
      "DeviceClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceClasses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceClass"
        }
      },
      "DeviceClassesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceClasses"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceClassResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceClass"
          }
        }
      },
      "DeviceDriversFilter": {
        "type": "object",
        "properties": {
          "device_drivers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DeviceDriver": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "releases": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "verified": {
                "type": "boolean"
              },
              "bundle": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceDrivers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceDriver"
        }
      },
      "DeviceDriversResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceDrivers"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceDriverResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceDriver"
          }
        }
      },
      "CreateDeviceDriver": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "device_driver"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "bundle": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device_drivers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          },
          "bundle": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "bundle"
        ]
      },
      "UpdateDeviceDriver": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "device_driver"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "bundle": {
                    "type": "string"
                  },
                  "remove_bundle": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device_drivers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          },
          "bundle": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DeviceTypesFilter": {
        "type": "object",
        "properties": {
          "device_types": {
            "type": "object",
            "additionalProperties": false
          },
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DeviceType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "vendor": {
                "type": "string"
              },
              "device_class": {
                "type": "string"
              },
              "parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "commands": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "device_class_label": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "devices": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "DeviceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeviceType"
        }
      },
      "DeviceTypesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceTypes"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeviceType"
          }
        }
      },
      "DevicesFilter": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "connector": {
            "type": "object",
            "additionalProperties": false
          },
          "users": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "device_type": {
            "type": "object",
            "additionalProperties": false
          },
          "driver": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "driver_parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttribute"
                }
              },
              "vendor": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "device_class": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "device_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "operator_id": {
                "type": "integer",
                "format": "int64"
              },
              "slugs": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "display_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "commands": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "status_channel_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "is_driver_compatible": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "connector": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "driver": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "device_type": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "users": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "channels": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Devices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Device"
        }
      },
      "DevicesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Devices"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DeviceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Device"
          }
        }
      },
      "UpdateDevice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "driver_parameters": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttribute"
                    }
                  },
                  "driver_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "channels_attributes": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "driver": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ExportsFilter": {
        "type": "object",
        "properties": {
          "exports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Export": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "original_filename": {
                "type": "string"
              },
              "status": {
                "type": "integer",
                "format": "int64"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "secure_token": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Exports": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Export"
        }
      },
      "ExportsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exports"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ExportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Export"
          }
        }
      },
      "MeasurementsFilter": {
        "type": "object",
        "properties": {
          "measurements": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "deleted_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "description": {
                "type": "string"
              },
              "end_at": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "protocol_entries": {
                "$ref": "#/components/schemas/ProtocolEntries"
              },
              "scope_params": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttribute"
                }
              },
              "start_at": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "status": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "uuid": {
                "type": "string"
              },
              "container_id": {
                "type": "integer",
                "format": "int64"
              },
              "container_type": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "data_points": {
                "description": "For the sake of efficiency the DataPoint entity is not a\nResource Object as per the JSON:API specification. A\nDataPoint is instead always provided as an Array with the\ntripple of `channel_id`, `timestamp` and `value`. The\n`channel_id` and the `timestamp` uniquely identify any\ndata point.\n\n**Note:** The order of the items is always as mentioned\nabove, which can due to limitations of the OpenApi\nspecification not be expressed correctly in the schema.\n",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataPoint"
                }
              },
              "scope": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "context_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "view": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "channels": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Measurements": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Measurement"
        }
      },
      "MeasurementsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Measurements"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "MeasurementResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Measurement"
          }
        }
      },
      "CreateMeasurement": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "container_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "container_type": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttribute"
                    }
                  },
                  "scope_attributes": {
                    "type": "object",
                    "properties": {
                      "start_at": {
                        "type": "string"
                      },
                      "end_at": {
                        "type": "string"
                      },
                      "channel_ids": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "container": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "scope_attributes"
        ]
      },
      "UpdateMeasurement": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "container_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "container_type": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttribute"
                    }
                  },
                  "scope_attributes": {
                    "type": "object",
                    "properties": {
                      "start_at": {
                        "type": "string"
                      },
                      "end_at": {
                        "type": "string"
                      },
                      "channel_ids": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "container": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationSettingsFilter": {
        "type": "object",
        "properties": {
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "read": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "notification_setting_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "NotificationSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "delivery_methods": {
                "type": "string"
              },
              "active": {
                "type": "boolean"
              },
              "rate_limit": {
                "type": "integer",
                "format": "int64"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "protonotification": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "notifications": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "NotificationSettings": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NotificationSetting"
        }
      },
      "NotificationSettingsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationSettingResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationSetting"
          }
        }
      },
      "CreateNotificationSetting": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "delivery_methods": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "notifications": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateNotificationSetting": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "delivery_methods": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "rate_limit": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "notifications": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationTriggersFilter": {
        "type": "object",
        "properties": {
          "notification_triggers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "NotificationTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "conditions": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "protonotification": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "NotificationTriggers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NotificationTrigger"
        }
      },
      "NotificationTriggersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationTriggers"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationTriggerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationTrigger"
          }
        }
      },
      "CreateNotificationTrigger": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "conditions": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "key"
        ]
      },
      "UpdateNotificationTrigger": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "conditions": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "protonotification": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationsFilter": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "read": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "notification_setting_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "protonotification": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "details": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "read": {
                "type": "boolean"
              },
              "title": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "notification_setting": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "protonotification": {
                "$ref": "#/components/schemas/HasOneRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/HasOneRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Notifications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Notification"
        }
      },
      "NotificationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Notifications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "NotificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Notification"
          }
        }
      },
      "UpdateNotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "read": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "protonotification": {
                    "$ref": "#/components/schemas/HasOneRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/HasOneRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "OrganisationMembershipsFilter": {
        "type": "object",
        "properties": {
          "organisation_memberships": {
            "type": "object",
            "additionalProperties": false
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OrganisationMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "role": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "OrganisationMemberships": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrganisationMembership"
        }
      },
      "OrganisationMembershipsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganisationMemberships"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "OrganisationMembershipResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganisationMembership"
          }
        }
      },
      "UpdateOrganisationMembership": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "user_id": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "OrganisationsFilter": {
        "type": "object",
        "properties": {
          "organisations": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "website": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "settings": {
                "$ref": "#/components/schemas/OrganisationSettings"
              },
              "logo": {
                "type": "object",
                "description": "The respective image size of the different logo versions is 300x300 pixels (medium) and 40x40 pixels (small).",
                "properties": {
                  "url": {
                    "type": "object",
                    "properties": {
                      "medium": {
                        "type": "string",
                        "format": "uri"
                      },
                      "thumb": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Organisations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Organisation"
        }
      },
      "OrganisationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Organisations"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "OrganisationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Organisation"
          }
        }
      },
      "CreateOrganisation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/OrganisationSettings"
                  },
                  "domain": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisations": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        },
        "required": [
          "domain",
          "name"
        ]
      },
      "UpdateOrganisation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/OrganisationSettings"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisations": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "Setting the logo property to 'null' will delete the logo.",
            "format": "binary",
            "nullable": true
          }
        }
      },
      "PermissionsFilter": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "collection_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rules": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "personal_collection": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "search_docs.fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collection": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "resource": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "rules": {
                "type": "object",
                "properties": {
                  "creating": {
                    "type": "boolean"
                  },
                  "deleting": {
                    "type": "boolean"
                  },
                  "executing": {
                    "type": "boolean"
                  },
                  "updating": {
                    "type": "boolean"
                  },
                  "updating_rules": {
                    "type": "boolean"
                  },
                  "updating_structure": {
                    "type": "boolean"
                  }
                }
              },
              "privileged": {
                "type": "boolean"
              },
              "collection_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_type": {
                "type": "string"
              },
              "user_id": {
                "type": "integer",
                "format": "int64"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "collection_owner": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "collection": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Permissions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Permission"
        }
      },
      "PermissionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Permissions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "PermissionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "CreatePermission": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "collection_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_type": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "creating": {
                        "type": "boolean"
                      },
                      "deleting": {
                        "type": "boolean"
                      },
                      "executing": {
                        "type": "boolean"
                      },
                      "updating": {
                        "type": "boolean"
                      },
                      "updating_rules": {
                        "type": "boolean"
                      },
                      "updating_structure": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdatePermission": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "collection_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_type": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "object",
                    "properties": {
                      "creating": {
                        "type": "boolean"
                      },
                      "deleting": {
                        "type": "boolean"
                      },
                      "executing": {
                        "type": "boolean"
                      },
                      "updating": {
                        "type": "boolean"
                      },
                      "updating_rules": {
                        "type": "boolean"
                      },
                      "updating_structure": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "PortsFilter": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connector_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "connector": {
            "type": "object",
            "additionalProperties": false
          },
          "device": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "slug": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "device_type_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "driver_parameters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "simulate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Port": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "position": {
                "type": "string"
              },
              "device_type_simulation": {
                "type": "string"
              },
              "instance": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "driver_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "connector_key_nice": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "connector": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Ports": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Port"
        }
      },
      "PortsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Ports"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "PortResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Port"
          }
        }
      },
      "CreatePort": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "string"
                  },
                  "driver_type": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "device_type_simulation": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "object"
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "device_type": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "connector": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdatePort": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "position": {
                    "type": "string"
                  },
                  "driver_type": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "device_type_simulation": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "object"
                  },
                  "device_type": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "device": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "device_type": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "connector": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ProtocolRulesFilter": {
        "type": "object",
        "properties": {
          "protocol_rules": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "ProtocolRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parameters": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "measurements": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ProtocolRules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProtocolRule"
        }
      },
      "ProtocolRulesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProtocolRules"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ProtocolRuleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProtocolRule"
          }
        }
      },
      "CreateProtocolRule": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "protocolable_id": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "protocolable_type": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "parameters": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "protocolable_id",
          "protocolable_type"
        ]
      },
      "UpdateProtocolRule": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "protocolable_id": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "protocolable_type": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "parameters": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "ProtonotificationsFilter": {
        "type": "object",
        "properties": {
          "protonotifications": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "delivery_methods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "notification_triggers": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "key": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "protonotification_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Protonotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "notification_triggers": {
                "$ref": "#/components/schemas/HasManyRelationship"
              },
              "notification_settings": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Protonotifications": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Protonotification"
        }
      },
      "ProtonotificationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Protonotifications"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ProtonotificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Protonotification"
          }
        }
      },
      "CreateProtonotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "delivery_methods": {
                    "type": "string",
                    "enum": [
                      "ui",
                      "email"
                    ]
                  },
                  "rate_limit": {
                    "description": "How many milliseconds should pass between one notification to the next?",
                    "type": "integer"
                  },
                  "notification_triggers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "conditions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "notification_triggers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdateProtonotification": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "delivery_methods": {
                    "type": "string",
                    "enum": [
                      "ui",
                      "email"
                    ]
                  },
                  "rate_limit": {
                    "description": "How many milliseconds should pass between one notification to the next?",
                    "type": "integer"
                  },
                  "notification_triggers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "conditions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "notification_settings": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "notification_triggers": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "SamplesFilter": {
        "type": "object",
        "properties": {
          "samples": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "Sample": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "custom_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttribute"
                }
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "owner_id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Samples": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Sample"
        }
      },
      "SamplesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Samples"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SampleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Sample"
          }
        }
      },
      "CreateSample": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "identifier": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttribute"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "identifier"
        ]
      },
      "UpdateSample": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "identifier": {
                    "type": "string"
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomAttribute"
                    }
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "SignaturesFilter": {
        "type": "object",
        "properties": {
          "signatures": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "user_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resource_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Signature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "user_id": {
                "type": "integer",
                "format": "int64"
              },
              "resource_type": {
                "type": "string"
              },
              "resource_id": {
                "type": "integer",
                "format": "int64"
              },
              "signature": {
                "description": "The data used to generate the SHA256 signature digest"
              },
              "digest": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Signatures": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Signature"
        }
      },
      "SignaturesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Signatures"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SignatureResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "CreateSignature": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "resource_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "resource_type": {
                    "type": "string"
                  },
                  "signature": {
                    "description": "The data used to generate the SHA256 signature digest"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "resource": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "signature"
        ]
      },
      "SmartViewsFilter": {
        "type": "object",
        "properties": {
          "smart_views": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "collection": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SmartView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              },
              "settings": {
                "$ref": "#/components/schemas/SmartViewSettings"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "SmartViews": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SmartView"
        }
      },
      "SmartViewsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartViews"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SmartViewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartView"
          }
        }
      },
      "CreateSmartView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/SmartViewSettings"
                  },
                  "collection": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "organisation": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "owner": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "name",
          "settings"
        ]
      },
      "UpdateSmartView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/SmartViewSettings"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateRequestsFilter": {
        "type": "object",
        "properties": {
          "update_requests": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "context_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "context_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updatable_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updatable_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "updatable_type": {
                "type": "string"
              },
              "updatable_id": {
                "type": "integer",
                "format": "int64"
              },
              "context_type": {
                "type": "string"
              },
              "context_id": {
                "type": "integer",
                "format": "int64"
              },
              "object_changes": {
                "description": "Changes of an updatable record that require a user confirmation",
                "type": "object"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "patch_changes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateRequests": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UpdateRequest"
        }
      },
      "UpdateRequestsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateRequests"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "UpdateRequestResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateRequest"
          }
        }
      },
      "UpdateUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {}
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "update_requests": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "change_reason": {
                "type": "string",
                "description": "A reason provided by a user who confirms a change of a record"
              }
            }
          }
        }
      },
      "UsersFilter": {
        "type": "object",
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "full_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "slugs": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "position": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "email_link": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "mobile_phone": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "office_phone": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "personal_collection_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "initials": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "first_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "last_name": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "role": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "organisation_membership_id": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "UsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Users"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "users": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "VersionsFilter": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "change_reason": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "item_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "item_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "parent_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "whodunnit": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "item_owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "item_type": {
                "type": "string"
              },
              "item_id": {
                "type": "integer",
                "format": "int64"
              },
              "event": {
                "type": "string"
              },
              "object": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "object_changes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "whodunnit": {
                "type": "string"
              },
              "change_reason": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "display_name": {
                "type": "string"
              },
              "whodunnit_full_name": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "item_owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "parent": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "Versions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Version"
        }
      },
      "VersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Versions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "VersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "layout": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "viewable_type": {
                "type": "string"
              },
              "data_scopes": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "viewable": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "measurements": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "ViewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/View"
          }
        }
      },
      "UpdateView": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "layout": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "viewable": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WebhookLogsFilter": {
        "type": "object",
        "properties": {
          "webhook_logs": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "status": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "container_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WebhookLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "status": {
                "type": "string"
              },
              "response_message": {
                "type": "string"
              },
              "response_body": {
                "type": "string"
              },
              "trigger": {
                "type": "string"
              },
              "payload": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "container_type": {
                "type": "string"
              },
              "container_id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WebhookLogs": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookLog"
        }
      },
      "WebhookLogsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookLogs"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WebhookLogResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookLog"
          }
        }
      },
      "WebhookSubscriptionsFilter": {
        "type": "object",
        "properties": {
          "webhook_subscriptions": {
            "type": "object",
            "additionalProperties": false
          },
          "user": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "WebhookSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "triggers": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "headers": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "user": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WebhookSubscriptions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WebhookSubscription"
        }
      },
      "WebhookSubscriptionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookSubscriptions"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WebhookSubscriptionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookSubscription"
          }
        }
      },
      "CreateWebhookSubscription": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "url": {
                    "type": "string"
                  },
                  "triggers": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "webhook_subscriptions": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        },
        "required": [
          "url"
        ]
      },
      "UpdateWebhookSubscription": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "url": {
                    "type": "string"
                  },
                  "triggers": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "webhook_subscriptions": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "organisation": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowEventsFilter": {
        "type": "object",
        "properties": {
          "workflow_events": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "owner_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "definition": {
                "$ref": "#/components/schemas/WorkflowEventDefinition"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowEvents": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowEvent"
        }
      },
      "WorkflowEventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowEvents"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowEvent"
          }
        }
      },
      "CreateWorkflowEvent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "definition": {
                    "$ref": "#/components/schemas/WorkflowEventDefinition"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_run": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowFieldsFilter": {
        "type": "object",
        "properties": {
          "workflow_fields": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "field_scope_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "field_scope_type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "identifier": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "pointer": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "flow_pointer": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "read_only": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "prepare": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "output": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "deleted_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "field_scope": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "pointer": {
                "type": "string"
              },
              "read_only": {
                "type": "boolean"
              },
              "prepare": {
                "type": "boolean"
              },
              "output": {
                "type": "boolean"
              },
              "schema": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "hidden": {
                "type": "boolean"
              },
              "field_scope_type": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "value_type": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              },
              "value": {
                "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "field_scope": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowField"
        }
      },
      "WorkflowFieldsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowFields"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowFieldResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowField"
          }
        }
      },
      "UpdateWorkflowField": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "workflow_field"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "Correct attributes type could not be automatically inferred. Please refer to the example payloads."
                  },
                  "output": {
                    "type": "boolean"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "workflow_run": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "meta": {
            "type": "object",
            "properties": {
              "change_reason": {
                "type": "string",
                "description": "A reason provided by a user who confirms a change of a workflow field."
              }
            }
          }
        }
      },
      "WorkflowRunsFilter": {
        "type": "object",
        "properties": {
          "workflow_runs": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_template": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowRun": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "state": {
                "type": "integer",
                "format": "int64"
              },
              "run_number": {
                "type": "integer",
                "format": "int64"
              },
              "collaborator_ids": {
                "description": "List of IDs from users who collaborate on the Workflow Run execution",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "template": {
                "description": "The template schema used by this run",
                "type": "object"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_template": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "workflow_steps": {
                "$ref": "#/components/schemas/HasManyRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowRuns": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowRun"
        }
      },
      "WorkflowRunsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowRuns"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowRunResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowRun"
          }
        }
      },
      "CreateWorkflowRun": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_template": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateWorkflowRun": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "workflow_template": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowStepTemplatesFilter": {
        "type": "object",
        "properties": {
          "workflow_step_templates": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "updated_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "deleted_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "WorkflowStepTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "template_version": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "template": {
                "description": "The JSON schema that will be used",
                "type": "object"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowStepTemplates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowStepTemplate"
        }
      },
      "WorkflowStepTemplatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStepTemplates"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowStepTemplateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStepTemplate"
          }
        }
      },
      "CreateWorkflowStepTemplate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_step_template"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "WorkflowStepsFilter": {
        "type": "object",
        "properties": {
          "workflow_steps": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_run_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "completed_at": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "workflow_run": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "workflow_template_id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowStep": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string"
              },
              "flow_pointer": {
                "type": "string"
              },
              "step_number": {
                "type": "integer",
                "format": "int64"
              },
              "current_substep": {
                "type": "integer",
                "format": "int64"
              },
              "snapshots": {
                "description": "Snapshots of data used when displaying markdown content within this step",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object"
                    },
                    "tables": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "children": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "children": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "children": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "children": {
                                              "description": "Anything that can be stringify"
                                            },
                                            "properties": {
                                              "type": "object"
                                            }
                                          }
                                        }
                                      },
                                      "properties": {
                                        "type": "object",
                                        "properties": {
                                          "pointer": {
                                            "type": "string"
                                          },
                                          "selectable": {
                                            "type": "boolean"
                                          },
                                          "selected": {
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "caption": {
                                      "type": "string"
                                    },
                                    "columns": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "align": {
                                            "type": "string",
                                            "enum": [
                                              "left",
                                              "right",
                                              "inherit",
                                              "center"
                                            ]
                                          },
                                          "label": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "label": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "alternatingRowColor": {
                                "type": "boolean"
                              },
                              "borders": {
                                "type": "boolean"
                              },
                              "data": {
                                "type": "string"
                              },
                              "dense": {
                                "type": "boolean"
                              },
                              "textWrapping": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "completed_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "workflow_run": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowSteps": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowStep"
        }
      },
      "WorkflowStepsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowSteps"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowStepResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowStep"
          }
        }
      },
      "UpdateWorkflowStep": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "completed_at": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "current_substep": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "workflow_steps": {
                    "$ref": "#/components/schemas/HasManyRelationship"
                  },
                  "workflow_run": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          }
        }
      },
      "WorkflowTemplatesFilter": {
        "type": "object",
        "properties": {
          "workflow_templates": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "uuid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "template_version": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "email": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "organisation": {
            "type": "object",
            "additionalProperties": false
          }
        }
      },
      "WorkflowTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "template_version": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "template": {
                "description": "The uploaded template schema",
                "type": "object"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              },
              "organisation": {
                "$ref": "#/components/schemas/BelongsToRelationship"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "WorkflowTemplates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkflowTemplate"
        }
      },
      "WorkflowTemplatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowTemplates"
          },
          "meta": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "WorkflowTemplateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkflowTemplate"
          }
        }
      },
      "CreateWorkflowTemplate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_template"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  },
                  "collection": {
                    "$ref": "#/components/schemas/BelongsToRelationship"
                  }
                }
              }
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "BooleanAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "boolean",
            "default": false,
            "nullable": true
          }
        }
      },
      "DateAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DatetimeAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FileAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "file": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "ImageAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "nullable": true
          }
        }
      },
      "NumberAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "PhysicalQuantityAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "number": {
                "type": "number"
              },
              "unit": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "PlotAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "properties": {
              "data": {
                "items": {
                  "properties": {
                    "x": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "y": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "default": [
                  {
                    "x": [
                      0,
                      60000
                    ],
                    "y": [
                      0,
                      0
                    ],
                    "fill": "tozeroy",
                    "line": {
                      "shape": "hv"
                    }
                  }
                ]
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "RelationAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "id": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        }
                      ]
                    }
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object",
            "nullable": true
          }
        }
      },
      "StringAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "TextAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DurationAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "TemperatureCurveAttribute": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name and identifier of the attribute."
          },
          "type": {
            "type": "string",
            "description": "The type defines the required structure of the `value` property."
          },
          "options": {
            "type": "object"
          },
          "value": {
            "items": {
              "properties": {
                "mode": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "nullable": true
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "content_type": {
                "type": "string"
              },
              "original_filename": {
                "type": "string"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "AttachmentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Attachment"
          }
        }
      }
    }
  },
  "paths": {
    "/applications": {
      "get": {
        "description": "Get a list of registerd OAuth 2 Applications.",
        "operationId": "getApplications",
        "summary": "List of registerd OAuth 2 Applications",
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsResponse"
                },
                "examples": {
                  "List of Applications": {
                    "summary": "List of Applications",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "application",
                          "attributes": {
                            "name": "Domainer",
                            "redirect_uri": "urn:ietf:wg:oauth:2.0:oob"
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/applications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/applications/{id}": {
      "get": {
        "description": "Get a single Application by its id.",
        "operationId": "getApplication",
        "summary": "Get Application",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Application to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Application attributes to be included in response."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "application",
                        "attributes": {
                          "name": "Domainer",
                          "redirect_uri": "urn:ietf:wg:oauth:2.0:oob"
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/applications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/authentications": {
      "get": {
        "description": "Get a list of user Authentications.",
        "operationId": "getAuthentications",
        "summary": "Get Authentications",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Authentication attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsResponse"
                },
                "examples": {
                  "List of Authentications": {
                    "summary": "List of Authentications",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "authentication",
                          "attributes": {
                            "provider": "openid_connect",
                            "uid": "ruby_ebert-11@hamill.co",
                            "access_token": "b32acfd821320cca584cb4f753e2a125",
                            "expires_in": 3600,
                            "refresh_token": "eff243bb956baf10e0c3804b3c44637a",
                            "created_at": "2021-03-31T07:00:01.038Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/authentications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for authentications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "authentications"
        ]
      }
    },
    "/authentications/{id}": {
      "get": {
        "description": "Get a single Authentication by its id.",
        "operationId": "getAuthentication",
        "summary": "Get Authentication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "An encoded id of the Authentication to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Authentication attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "Authentication": {
                    "summary": "Authentication",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "authentication",
                        "attributes": {
                          "provider": "openid_connect",
                          "uid": "ruby_ebert-17@hamill.co",
                          "access_token": "adcdd72ee8ba557c6266aadf105f2839",
                          "expires_in": 3600,
                          "refresh_token": "ab487192f939ee7143e501212c0ee9fc",
                          "created_at": "2021-03-31T07:00:02.977Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/authentications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for authentications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "authentications"
        ]
      }
    },
    "/automations": {
      "get": {
        "description": "Get a list of existing Automations.",
        "operationId": "getAutomations",
        "summary": "Get Automations",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Automation attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `organisation`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationsResponse"
                },
                "examples": {
                  "List of Automations": {
                    "summary": "List of Automations",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "automation",
                          "attributes": {
                            "id": 1,
                            "name": "Bourbon County Stout #1",
                            "activated_at": null,
                            "created_at": "2021-03-31T07:00:06.787Z",
                            "updated_at": "2021-03-31T07:00:06.787Z",
                            "active": false
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/automations/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "automation",
                          "attributes": {
                            "id": 2,
                            "name": "Orval Trappist Ale #2",
                            "activated_at": null,
                            "created_at": "2021-03-31T07:00:06.800Z",
                            "updated_at": "2021-03-31T07:00:06.800Z",
                            "active": false
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/automations/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for automations given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for automations given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "automations"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutomation"
              }
            }
          }
        },
        "description": "Create a Automation.",
        "operationId": "createAutomation",
        "summary": "Create Automation",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation": {
                    "summary": "Automation",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "automation",
                        "attributes": {
                          "id": 2,
                          "name": "Orval Trappist Ale #10",
                          "created_at": "2021-03-31T07:00:11.532Z",
                          "updated_at": "2021-03-31T07:00:11.532Z",
                          "active": false
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/automations/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for automation: `file`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "automations"
        ]
      }
    },
    "/automations/{id}/download": {
      "get": {
        "description": "Download a previously uploaded automation file.",
        "operationId": "downloadAutomation",
        "summary": "Download Automation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Automation with a file to download."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation download": {
                    "summary": "Automation download",
                    "value": "when:\n  RESOURCE_OPEN:\n    type: smart_view\nand: |\n  AND(\n    resource.data.attributes.settings.filters.contains = 'workflow-template-uuid',\n    AND(\n      resource.data.attributes.settings.filters.types[0] = 'workflow_run',\n      resource.data.attributes.settings.filters.statuses[0] = 1\n    )\n  )\ndo:\n  webhook:\n    url: http://localhost:5000/__cypress__/webhook?status=200&body={{resource.data.attributes.settings.filters.contains}}\n    method: post\n    headers:\n      authorization: \"Bearer {{signal.auth_token.openid_connect}}\"\n      content-type: application/json\n    body: |\n      {\n        \"automation_id\": {{automation.data.id}}\n      }\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "automations"
        ]
      }
    },
    "/automations/{id}": {
      "patch": {
        "description": "Update a Automation.",
        "operationId": "updateAutomation",
        "summary": "Update Automation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Automation to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationResponse"
                },
                "examples": {
                  "Automation": {
                    "summary": "Automation",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "automation",
                        "attributes": {
                          "id": 1,
                          "name": "Orval Trappist Ale #25",
                          "created_at": "2021-03-31T07:00:16.801Z",
                          "updated_at": "2021-03-31T07:00:16.949Z",
                          "active": false
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/automations/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "automations"
        ],
        "requestBody": {
          "description": "Update a Automation.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAutomation"
              },
              "example": {
                "data": {
                  "type": "automation",
                  "attributes": {
                    "name": "Orval Trappist Ale #25"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Automation.",
        "operationId": "deleteAutomation",
        "summary": "Delete Automation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Automation to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Forbidden Error": {
                    "summary": "Forbidden Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden Error because of a missed scope": {
                    "summary": "Forbidden Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "automations"
        ]
      }
    },
    "/channels": {
      "get": {
        "description": "Get a list of existing Channels.",
        "operationId": "getChannels",
        "summary": "List of existing Channels",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Channel attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ChannelsFilter"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted channels."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `users`, `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelsResponse"
                },
                "examples": {
                  "List of Channels": {
                    "summary": "List of Channels",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "channel",
                          "attributes": {
                            "capability": null,
                            "interval": null,
                            "name": "weight",
                            "on_update": null,
                            "status": "online",
                            "unit": "mg",
                            "type_sym": "float",
                            "specific_attributes": {
                              "name": "weight",
                              "unit": "mg",
                              "description": ""
                            },
                            "device_class": "25"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/channels/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "channel",
                          "attributes": {
                            "capability": null,
                            "interval": null,
                            "name": "display_weight",
                            "on_update": null,
                            "status": "online",
                            "unit": "mg",
                            "type_sym": "float",
                            "specific_attributes": {
                              "name": "display_weight",
                              "unit": "mg",
                              "description": ""
                            },
                            "device_class": "25"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/channels/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "channel",
                          "attributes": {
                            "capability": null,
                            "interval": null,
                            "name": "status",
                            "on_update": null,
                            "status": "online",
                            "unit": null,
                            "type_sym": "string",
                            "specific_attributes": {},
                            "device_class": "25"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/channels/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "channel",
                          "attributes": {
                            "capability": null,
                            "interval": null,
                            "name": "channel-1",
                            "on_update": null,
                            "status": "online",
                            "unit": "A",
                            "type_sym": "float",
                            "specific_attributes": {},
                            "device_class": "25"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/channels/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 4,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "recordsTotal": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "channels"
        ]
      }
    },
    "/channels/{id}": {
      "get": {
        "description": "Get a single Channel by its id.",
        "operationId": "getChannel",
        "summary": "Get Channel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Channel to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Channel attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `device`, `users`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                },
                "examples": {
                  "Channel": {
                    "summary": "Channel",
                    "value": {
                      "data": {
                        "id": "4",
                        "type": "channel",
                        "attributes": {
                          "name": "channel-5",
                          "status": "online",
                          "unit": "A",
                          "type_sym": "float",
                          "specific_attributes": {},
                          "device_class": "25"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/channels/4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for channels given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "channels"
        ]
      }
    },
    "/collections": {
      "get": {
        "description": "Get a list of existing Collections.",
        "operationId": "getCollections",
        "summary": "Get Collections",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Collection attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted collections."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CollectionsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `parent`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponse"
                },
                "examples": {
                  "List of Collections": {
                    "summary": "List of Collections",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "collection",
                          "attributes": {
                            "name": "default-collection-1",
                            "personal": true,
                            "secure": false,
                            "updated_at": "2021-03-31T07:00:32.603Z",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:00:32.603Z"
                          },
                          "relationships": {
                            "collection_memberships": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "permission"
                                }
                              ]
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "permissions": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "permission"
                                },
                                {
                                  "id": "10",
                                  "type": "permission"
                                }
                              ]
                            },
                            "subcollections": {
                              "data": []
                            },
                            "parent": {
                              "data": null
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/collections/2"
                          }
                        },
                        {
                          "id": "4",
                          "type": "collection",
                          "attributes": {
                            "name": "Lightweight Copper Watch",
                            "personal": false,
                            "secure": false,
                            "updated_at": "2021-03-31T07:00:32.756Z",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:00:32.756Z"
                          },
                          "relationships": {
                            "collection_memberships": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "permission"
                                }
                              ]
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "permissions": {
                              "data": [
                                {
                                  "id": "7",
                                  "type": "permission"
                                },
                                {
                                  "id": "8",
                                  "type": "permission"
                                }
                              ]
                            },
                            "subcollections": {
                              "data": [
                                {
                                  "id": "8",
                                  "type": "collection"
                                }
                              ]
                            },
                            "parent": {
                              "data": null
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/collections/4"
                          }
                        },
                        {
                          "id": "8",
                          "type": "collection",
                          "attributes": {
                            "name": "Lightweight Rubber Bottle",
                            "personal": false,
                            "secure": false,
                            "updated_at": "2021-03-31T07:00:33.012Z",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:00:33.012Z"
                          },
                          "relationships": {
                            "collection_memberships": {
                              "data": [
                                {
                                  "id": "8",
                                  "type": "permission"
                                },
                                {
                                  "id": "7",
                                  "type": "permission"
                                }
                              ]
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                },
                                {
                                  "id": "4",
                                  "type": "user"
                                }
                              ]
                            },
                            "permissions": {
                              "data": []
                            },
                            "subcollections": {
                              "data": []
                            },
                            "parent": {
                              "data": {
                                "id": "4",
                                "type": "collection"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/collections/8"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 3,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2,
                          4,
                          8
                        ],
                        "recordsTotal": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong collections attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for collections given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "post": {
        "description": "Create a Collection.",
        "operationId": "createCollection",
        "summary": "Create Collection",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "10",
                        "type": "collection",
                        "attributes": {
                          "name": "Test collection",
                          "personal": false,
                          "secure": false,
                          "updated_at": "2021-03-31T07:00:42.351Z",
                          "created_at": "2021-03-31T07:00:42.351Z"
                        },
                        "relationships": {
                          "collection_memberships": {
                            "data": [
                              {
                                "id": "11",
                                "type": "permission"
                              }
                            ]
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "permissions": {
                            "data": []
                          },
                          "subcollections": {
                            "data": []
                          },
                          "parent": {},
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/collections/10"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for collection: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Create a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollection"
              },
              "example": {
                "data": {
                  "type": "collection",
                  "attributes": {
                    "name": "Test collection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collections/{id}": {
      "get": {
        "description": "Get a single Collection by its id.",
        "operationId": "getCollection",
        "summary": "Get Collection",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Collection to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Collection attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `parent`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "4",
                        "type": "collection",
                        "attributes": {
                          "name": "Lightweight Copper Watch",
                          "personal": false,
                          "secure": false,
                          "updated_at": "2021-03-31T07:00:36.853Z",
                          "created_at": "2021-03-31T07:00:36.853Z"
                        },
                        "relationships": {
                          "collection_memberships": {
                            "data": [
                              {
                                "id": "3",
                                "type": "permission"
                              }
                            ]
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "permissions": {
                            "data": [
                              {
                                "id": "7",
                                "type": "permission"
                              },
                              {
                                "id": "8",
                                "type": "permission"
                              }
                            ]
                          },
                          "subcollections": {
                            "data": [
                              {
                                "id": "8",
                                "type": "collection"
                              }
                            ]
                          },
                          "parent": {},
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/collections/4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for collections given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "patch": {
        "description": "Update a Collection.",
        "operationId": "updateCollection",
        "summary": "Update Collection",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                },
                "examples": {
                  "Collection": {
                    "summary": "Collection",
                    "value": {
                      "data": {
                        "id": "4",
                        "type": "collection",
                        "attributes": {
                          "name": "Test collection updated",
                          "personal": false,
                          "secure": false,
                          "updated_at": "2021-03-31T07:00:49.365Z",
                          "created_at": "2021-03-31T07:00:48.808Z"
                        },
                        "relationships": {
                          "collection_memberships": {
                            "data": [
                              {
                                "id": "3",
                                "type": "permission"
                              }
                            ]
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "permissions": {
                            "data": [
                              {
                                "id": "7",
                                "type": "permission"
                              },
                              {
                                "id": "8",
                                "type": "permission"
                              }
                            ]
                          },
                          "subcollections": {
                            "data": [
                              {
                                "id": "8",
                                "type": "collection"
                              }
                            ]
                          },
                          "parent": {},
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/collections/4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Update a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCollection"
              },
              "example": {
                "data": {
                  "type": "collection",
                  "attributes": {
                    "name": "Test collection updated"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Collection.",
        "operationId": "deleteCollection",
        "summary": "Delete Collection",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/collections/restore": {
      "patch": {
        "description": "Restore a Collection.",
        "operationId": "restoreCollection",
        "summary": "Restore Collection",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "10",
                          "type": "collection",
                          "attributes": {
                            "name": "Synergistic Silk Keyboard",
                            "personal": false,
                            "secure": false,
                            "updated_at": "2021-03-31T07:01:02.547Z",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:01:02.372Z"
                          },
                          "relationships": {
                            "collection_memberships": {
                              "data": [
                                {
                                  "id": "11",
                                  "type": "permission"
                                }
                              ]
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "permissions": {
                              "data": []
                            },
                            "subcollections": {
                              "data": []
                            },
                            "parent": {
                              "data": null
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/collections/10"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Restore a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/command_executions": {
      "get": {
        "description": "Get a list of existing CommandExecutions.",
        "operationId": "getCommandExecutions",
        "summary": "Get Command Executions",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CommandExecution attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommandExecutionsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionsResponse"
                },
                "examples": {
                  "List of CommandExecutions": {
                    "summary": "List of CommandExecutions",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "command_execution",
                          "attributes": {
                            "id": 1,
                            "uuid": "73bb9114-05e3-4479-bbe1-0cd31870c7b3",
                            "parameters": null,
                            "device_id": 1,
                            "user_id": 1,
                            "status": "sent",
                            "confirmed_at": null,
                            "finished_at": null,
                            "data": null,
                            "created_at": "2021-03-31T07:01:06.460Z",
                            "updated_at": "2021-03-31T07:01:06.460Z"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/command_executions/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "command_execution",
                          "attributes": {
                            "id": 2,
                            "uuid": "db6831e7-dbd2-4242-87ef-570fce49adc6",
                            "parameters": null,
                            "device_id": 1,
                            "user_id": 3,
                            "status": "sent",
                            "confirmed_at": null,
                            "finished_at": null,
                            "data": null,
                            "created_at": "2021-03-31T07:01:06.594Z",
                            "updated_at": "2021-03-31T07:01:06.594Z"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/command_executions/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong command_executions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "command_executions"
        ]
      }
    },
    "/command_executions/{id}": {
      "get": {
        "description": "Get a single CommandExecution by its id.",
        "operationId": "getCommandExecution",
        "summary": "Get Command Execution",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of CommandExecution to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of CommandExecution attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `device`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                },
                "examples": {
                  "CommandExecution": {
                    "summary": "CommandExecution",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "command_execution",
                        "attributes": {
                          "id": 1,
                          "uuid": "0865426e-189e-4317-b235-f5873ca02ac5",
                          "device_id": 1,
                          "user_id": 1,
                          "status": "sent",
                          "created_at": "2021-03-31T07:01:11.155Z",
                          "updated_at": "2021-03-31T07:01:11.155Z"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/command_executions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for command_executions given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "command_executions"
        ]
      }
    },
    "/comments": {
      "get": {
        "description": "Get a list of existing Comments.",
        "operationId": "getComments",
        "summary": "Get Comments",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Comment attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: owner."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CommentsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted comments."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsResponse"
                },
                "examples": {
                  "List of Comments": {
                    "summary": "List of Comments",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "comment",
                          "attributes": {
                            "commentable_type": "WorkflowStep",
                            "commentable_id": 1,
                            "content": "Atque qui temporibus praesentium.",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:01:18.140Z",
                            "updated_at": "2021-03-31T07:01:18.140Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "5",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/comments/3"
                          }
                        },
                        {
                          "id": "2",
                          "type": "comment",
                          "attributes": {
                            "commentable_type": "WorkflowStep",
                            "commentable_id": 1,
                            "content": "Fuga libero modi reiciendis.",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:01:18.024Z",
                            "updated_at": "2021-03-31T07:01:18.024Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/comments/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "comment",
                          "attributes": {
                            "commentable_type": "WorkflowStep",
                            "commentable_id": 1,
                            "content": "Eaque vitae in at.",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:01:17.883Z",
                            "updated_at": "2021-03-31T07:01:17.883Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/comments/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 3,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          3,
                          2,
                          1
                        ],
                        "recordsTotal": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong comments attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "commentable filter is missing": {
                    "summary": "commentable filter is missing",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for comments: filter[comments][commentable_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "commentable type is wrong": {
                    "summary": "commentable type is wrong",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Invalid values: Wierd given for comments commentable_type.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "commentable doesn't exist": {
                    "summary": "commentable doesn't exist",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ]
      },
      "post": {
        "description": "Create a Comment.",
        "operationId": "createComment",
        "summary": "Create Comment",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "comment",
                        "attributes": {
                          "commentable_type": "WorkflowStep",
                          "commentable_id": 1,
                          "content": "Test info",
                          "created_at": "2021-03-31T07:01:41.663Z",
                          "updated_at": "2021-03-31T07:01:41.663Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/comments/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for comment: `content`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "content": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ],
        "requestBody": {
          "description": "Create a Comment.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              },
              "example": {
                "data": {
                  "type": "comment",
                  "attributes": {
                    "content": "Test info",
                    "owner_id": "1"
                  },
                  "relationships": {
                    "commentable": {
                      "data": {
                        "id": "1",
                        "type": "WorkflowStep"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "description": "Get a single Comment by its id.",
        "operationId": "getComment",
        "summary": "Get Comment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Comment to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Comment attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "comment",
                        "attributes": {
                          "commentable_type": "WorkflowStep",
                          "commentable_id": 1,
                          "content": "Eaque vitae in at.",
                          "created_at": "2021-03-31T07:01:31.567Z",
                          "updated_at": "2021-03-31T07:01:31.567Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/comments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for comments given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ]
      },
      "patch": {
        "description": "Update a Comment.",
        "operationId": "updateComment",
        "summary": "Update Comment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Comment to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                },
                "examples": {
                  "Comment": {
                    "summary": "Comment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "comment",
                        "attributes": {
                          "commentable_type": "WorkflowStep",
                          "commentable_id": 1,
                          "content": "Other info",
                          "created_at": "2021-03-31T07:01:54.984Z",
                          "updated_at": "2021-03-31T07:01:55.298Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "commentable": {
                            "data": {
                              "id": "1",
                              "type": "workflow_step"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/comments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ],
        "requestBody": {
          "description": "Update a Comment.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComment"
              },
              "example": {
                "data": {
                  "type": "comment",
                  "attributes": {
                    "content": "Other info"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Comment.",
        "operationId": "deleteComment",
        "summary": "Delete Comment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Comment to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ]
      }
    },
    "/comments/restore": {
      "patch": {
        "description": "Restore a Comment.",
        "operationId": "restoreComment",
        "summary": "Restore Comment",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "comment",
                          "attributes": {
                            "commentable_type": "WorkflowStep",
                            "commentable_id": 1,
                            "content": "Sunt ipsum reprehenderit omnis.",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:02:20.054Z",
                            "updated_at": "2021-03-31T07:02:20.243Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "commentable": {
                              "data": {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/comments/3"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ],
        "requestBody": {
          "description": "Restore a Comment.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/connectors": {
      "get": {
        "description": "Get a list of existing Connectors.",
        "operationId": "getConnectors",
        "summary": "Get Connectors",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Connector attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted connectors."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ConnectorsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`, `organisation`, `pairings`, `ports`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsResponse"
                },
                "examples": {
                  "List of Connectors": {
                    "summary": "List of Connectors",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "384959617971",
                            "serial": "cbfc85f1-e0ac-47ce-9503-86a119a2e509",
                            "last_seen_at": "2021-03-29T07:02:26.114Z",
                            "last_appeared_at": "2021-03-29T07:02:26.114Z",
                            "status": "offline",
                            "name": "3849-5961-7971",
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:26.285Z",
                            "created_at": "2021-03-31T07:02:26.154Z",
                            "enrollment_server": null,
                            "connector_endpoint": null,
                            "last_reported_at": "2021-03-29T07:02:26.114Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "target_version": "",
                            "connector_key_nice": "3849-5961-7971",
                            "owner_id": 1,
                            "slugs": [
                              "3849-5961-7971"
                            ],
                            "internal_ip": "e70e:bd:fbbd:4aae:8bbd:d232:76b:de36",
                            "external_ip": "4f3:7b3f:c5f8:2c82:de4:f32:a286:7814"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "port"
                                },
                                {
                                  "id": "2",
                                  "type": "port"
                                },
                                {
                                  "id": "3",
                                  "type": "port"
                                },
                                {
                                  "id": "4",
                                  "type": "port"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/connectors/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "100975406789",
                            "serial": "41c7eb10-c31b-4707-b872-b20c810aa3d0",
                            "last_seen_at": "2021-03-29T07:02:26.382Z",
                            "last_appeared_at": "2021-03-29T07:02:26.382Z",
                            "status": "offline",
                            "name": "1009-7540-6789",
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:26.463Z",
                            "created_at": "2021-03-31T07:02:26.398Z",
                            "enrollment_server": null,
                            "connector_endpoint": null,
                            "last_reported_at": "2021-03-29T07:02:26.382Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "target_version": "",
                            "connector_key_nice": "1009-7540-6789",
                            "owner_id": 1,
                            "slugs": [
                              "1009-7540-6789"
                            ],
                            "internal_ip": "67a3:631:f67:5d83:4c01:3fd:2d85:aa35",
                            "external_ip": "3469:cf03:9f35:25dc:b2be:f991:1ad9:162b"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "9",
                                  "type": "port"
                                },
                                {
                                  "id": "10",
                                  "type": "port"
                                },
                                {
                                  "id": "11",
                                  "type": "port"
                                },
                                {
                                  "id": "12",
                                  "type": "port"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/connectors/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of found Connectors": {
                    "summary": "List of found Connectors",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "395539819134",
                            "serial": "bdf2af69-416b-4a58-8b0a-6aef24dd87e6",
                            "last_seen_at": "2021-03-29T07:02:27.133Z",
                            "last_appeared_at": "2021-03-29T07:02:27.133Z",
                            "status": "offline",
                            "name": "3955-3981-9134",
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:27.203Z",
                            "created_at": "2021-03-31T07:02:27.146Z",
                            "enrollment_server": null,
                            "connector_endpoint": null,
                            "last_reported_at": "2021-03-29T07:02:27.133Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "target_version": "",
                            "connector_key_nice": "3955-3981-9134",
                            "owner_id": 1,
                            "slugs": [
                              "3955-3981-9134"
                            ],
                            "internal_ip": "e70e:bd:fbbd:4aae:8bbd:d232:76b:de36",
                            "external_ip": "4f3:7b3f:c5f8:2c82:de4:f32:a286:7814"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "port"
                                },
                                {
                                  "id": "2",
                                  "type": "port"
                                },
                                {
                                  "id": "3",
                                  "type": "port"
                                },
                                {
                                  "id": "4",
                                  "type": "port"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/connectors/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ]
      },
      "post": {
        "description": "Create a Connector.",
        "operationId": "createConnector",
        "summary": "Create Connector",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "321232123212",
                          "serial": "ead92197-dea7-45e5-be22-f4febd50a90a",
                          "last_seen_at": "2021-03-29T07:02:28.930Z",
                          "last_appeared_at": "2021-03-29T07:02:28.930Z",
                          "status": "offline",
                          "name": "3212-3212-3212",
                          "updated_at": "2021-03-31T07:02:29.179Z",
                          "created_at": "2021-03-31T07:02:28.946Z",
                          "last_reported_at": "2021-03-29T07:02:28.930Z",
                          "platform": "linux",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "target_version": "",
                          "connector_key_nice": "3212-3212-3212",
                          "owner_id": 1,
                          "slugs": [
                            "3212-3212-3212"
                          ],
                          "internal_ip": "2983:2258:a93b:a80d:20f1:a7f9:2b08:5d59",
                          "external_ip": "a34:db81:e553:d85b:d56e:5bbb:e5c6:bdab"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "3",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "5",
                                "type": "port"
                              },
                              {
                                "id": "6",
                                "type": "port"
                              },
                              {
                                "id": "7",
                                "type": "port"
                              },
                              {
                                "id": "8",
                                "type": "port"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/connectors/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for connector: `connector_key`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "target_collection": [
                                "can't be blank"
                              ],
                              "connector_key": [
                                "can't be blank"
                              ],
                              "version_modules": [
                                "can't be blank"
                              ],
                              "platform": [
                                "can't be blank"
                              ],
                              "cpu_architecture": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ],
        "requestBody": {
          "description": "Create a Connector.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnector"
              },
              "example": {
                "data": {
                  "type": "connector",
                  "attributes": {
                    "connector_key": "321232123212"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/{id}": {
      "get": {
        "description": "Get a single Connector by its id.",
        "operationId": "getConnector",
        "summary": "Get Connector",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Connector to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Connector attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`, `organisation`, `pairings`, `ports`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "147754428990",
                          "serial": "56ee69cd-fd8d-497c-af34-fd13fdb3b0b6",
                          "last_seen_at": "2021-03-29T07:02:34.533Z",
                          "last_appeared_at": "2021-03-29T07:02:34.533Z",
                          "status": "offline",
                          "name": "1477-5442-8990",
                          "updated_at": "2021-03-31T07:02:34.620Z",
                          "created_at": "2021-03-31T07:02:34.549Z",
                          "last_reported_at": "2021-03-29T07:02:34.533Z",
                          "platform": "linux",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "target_version": "",
                          "connector_key_nice": "1477-5442-8990",
                          "owner_id": 1,
                          "slugs": [
                            "1477-5442-8990"
                          ],
                          "internal_ip": "e70e:bd:fbbd:4aae:8bbd:d232:76b:de36",
                          "external_ip": "4f3:7b3f:c5f8:2c82:de4:f32:a286:7814"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "1",
                                "type": "port"
                              },
                              {
                                "id": "2",
                                "type": "port"
                              },
                              {
                                "id": "3",
                                "type": "port"
                              },
                              {
                                "id": "4",
                                "type": "port"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/connectors/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ]
      },
      "patch": {
        "description": "Update a Connector.",
        "operationId": "updateConnector",
        "summary": "Update Connector",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Connector to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                },
                "examples": {
                  "Connector": {
                    "summary": "Connector",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "connector",
                        "attributes": {
                          "connector_key": "296044080660",
                          "serial": "b91186e2-2391-4831-abb1-64a2ff5cb4df",
                          "last_seen_at": "2021-03-29T07:02:37.722Z",
                          "last_appeared_at": "2021-03-29T07:02:37.722Z",
                          "status": "offline",
                          "name": "Connector's name",
                          "updated_at": "2021-03-31T07:02:38.077Z",
                          "created_at": "2021-03-31T07:02:37.739Z",
                          "last_reported_at": "2021-03-29T07:02:37.722Z",
                          "platform": "linux",
                          "version_modules": "72",
                          "cpu_architecture": "armv7",
                          "version_connector": "3.1.0",
                          "version_build": "3.1.0",
                          "target_version": "",
                          "connector_key_nice": "2960-4408-0660",
                          "owner_id": 1,
                          "slugs": [
                            "connector-s-name",
                            "2960-4408-0660"
                          ],
                          "internal_ip": "e70e:bd:fbbd:4aae:8bbd:d232:76b:de36",
                          "external_ip": "4f3:7b3f:c5f8:2c82:de4:f32:a286:7814"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "pairings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "pairing"
                              }
                            ]
                          },
                          "ports": {
                            "data": [
                              {
                                "id": "1",
                                "type": "port"
                              },
                              {
                                "id": "2",
                                "type": "port"
                              },
                              {
                                "id": "3",
                                "type": "port"
                              },
                              {
                                "id": "4",
                                "type": "port"
                              }
                            ]
                          },
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/connectors/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ],
        "requestBody": {
          "description": "Update a Connector.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConnector"
              },
              "example": {
                "data": {
                  "type": "connector",
                  "attributes": {
                    "name": "Connector's name"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Connector.",
        "operationId": "deleteConnector",
        "summary": "Delete Connector",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Connector to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ]
      }
    },
    "/connectors/{id}/reset_drivers": {
      "put": {
        "description": "Force reset the driver for all connected devices.",
        "operationId": "reset_driversConnector",
        "summary": "Reset Drivers Connector",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Connector to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Accepted": {
                    "summary": "Accepted",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ]
      }
    },
    "/connectors/restore": {
      "patch": {
        "description": "Restore a Connector.",
        "operationId": "restoreConnector",
        "summary": "Restore Connector",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "connector",
                          "attributes": {
                            "connector_key": "298811117857",
                            "serial": "d7efbd17-84a7-420f-9329-c527aaddc15d",
                            "last_seen_at": "2021-03-29T07:02:51.951Z",
                            "last_appeared_at": "2021-03-29T07:02:51.951Z",
                            "status": "offline",
                            "name": "2988-1111-7857",
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:52.295Z",
                            "created_at": "2021-03-31T07:02:51.980Z",
                            "enrollment_server": null,
                            "connector_endpoint": null,
                            "last_reported_at": "2021-03-29T07:02:51.952Z",
                            "hardware": null,
                            "platform": "linux",
                            "last_pairing_button_press_at": null,
                            "version_modules": "72",
                            "cpu_architecture": "armv7",
                            "version_connector": "3.1.0",
                            "version_build": "3.1.0",
                            "target_version": "",
                            "connector_key_nice": "2988-1111-7857",
                            "owner_id": 1,
                            "slugs": [],
                            "internal_ip": "67a3:631:f67:5d83:4c01:3fd:2d85:aa35",
                            "external_ip": "3469:cf03:9f35:25dc:b2be:f991:1ad9:162b"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "pairings": {
                              "data": [
                                {
                                  "id": "3",
                                  "type": "pairing"
                                }
                              ]
                            },
                            "ports": {
                              "data": [
                                {
                                  "id": "12",
                                  "type": "port"
                                },
                                {
                                  "id": "9",
                                  "type": "port"
                                },
                                {
                                  "id": "10",
                                  "type": "port"
                                },
                                {
                                  "id": "11",
                                  "type": "port"
                                }
                              ]
                            },
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/connectors/3"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "connectors"
        ],
        "requestBody": {
          "description": "Restore a Connector.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "description": "Get a list of existing Dashboards.",
        "operationId": "getDashboards",
        "summary": "Get Dashboards",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Dashboard attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted dashboards."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardsResponse"
                },
                "examples": {
                  "List of Dashboards": {
                    "summary": "List of Dashboards",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Lightweight Copper Watch",
                            "created_at": "2021-03-31T07:02:55.776Z",
                            "slug": null,
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:55.776Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "prev": "",
                            "self": "https://localhost/api/v2/laboperator/dashboards/1",
                            "next": "https://localhost/api/v2/laboperator/dashboards/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Gorgeous Wool Table",
                            "created_at": "2021-03-31T07:02:56.306Z",
                            "slug": null,
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:56.306Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "3",
                                "type": "view"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "prev": "https://localhost/api/v2/laboperator/dashboards/2",
                            "self": "https://localhost/api/v2/laboperator/dashboards/3",
                            "next": ""
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of found Dashboards": {
                    "summary": "List of found Dashboards",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Lightweight Copper Watch",
                            "created_at": "2021-03-31T07:02:57.289Z",
                            "slug": null,
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:02:57.289Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "prev": "",
                            "self": "https://localhost/api/v2/laboperator/dashboards/1",
                            "next": "https://localhost/api/v2/laboperator/dashboards/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong dashboards attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for dashboards given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ]
      },
      "post": {
        "description": "Create a Dashboard.",
        "operationId": "createDashboard",
        "summary": "Create Dashboard",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name 2",
                          "created_at": "2021-03-31T07:03:07.424Z",
                          "updated_at": "2021-03-31T07:03:07.424Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "prev": "https://localhost/api/v2/laboperator/dashboards/2",
                          "self": "https://localhost/api/v2/laboperator/dashboards/3",
                          "next": ""
                        }
                      }
                    }
                  },
                  "Create a Dashboard copy": {
                    "summary": "Create a Dashboard copy",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name 2",
                          "created_at": "2021-03-31T07:03:08.545Z",
                          "updated_at": "2021-03-31T07:03:08.545Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "prev": "https://localhost/api/v2/laboperator/dashboards/2",
                          "self": "https://localhost/api/v2/laboperator/dashboards/3",
                          "next": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for dashboard: `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Layout exemplar is forbidden": {
                    "summary": "Layout exemplar is forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Layout exemplar does not exist": {
                    "summary": "Layout exemplar does not exist",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "Dashboard exemplar with the ID that you passed does not exist or it has been archived",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ],
        "requestBody": {
          "description": "Create a Dashboard.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDashboard"
              },
              "example": {
                "data": {
                  "type": "dashboard",
                  "attributes": {
                    "name": "Test name 2",
                    "copy_from": "1"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dashboards/{id}": {
      "get": {
        "description": "Get a single Dashboard by its id.",
        "operationId": "getDashboard",
        "summary": "Get Dashboard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Dashboard to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Dashboard attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `organisation`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Lightweight Copper Watch",
                          "created_at": "2021-03-31T07:03:01.969Z",
                          "updated_at": "2021-03-31T07:03:01.969Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "prev": "",
                          "self": "https://localhost/api/v2/laboperator/dashboards/1",
                          "next": "https://localhost/api/v2/laboperator/dashboards/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for dashboards given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ]
      },
      "patch": {
        "description": "Update a Dashboard.",
        "operationId": "updateDashboard",
        "summary": "Update Dashboard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Dashboard to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponse"
                },
                "examples": {
                  "Dashboard": {
                    "summary": "Dashboard",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "dashboard",
                        "attributes": {
                          "name": "Test name updated",
                          "created_at": "2021-03-31T07:03:17.193Z",
                          "updated_at": "2021-03-31T07:03:17.671Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "collections": {
                            "data": [
                              {
                                "id": "2",
                                "type": "collection"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "prev": "",
                          "self": "https://localhost/api/v2/laboperator/dashboards/1",
                          "next": "https://localhost/api/v2/laboperator/dashboards/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ],
        "requestBody": {
          "description": "Update a Dashboard.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboard"
              },
              "example": {
                "data": {
                  "type": "dashboard",
                  "attributes": {
                    "name": "Test name updated"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Dashboard.",
        "operationId": "deleteDashboard",
        "summary": "Delete Dashboard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Dashboard to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ]
      }
    },
    "/dashboards/restore": {
      "patch": {
        "description": "Restore a Dashboard.",
        "operationId": "restoreDashboard",
        "summary": "Restore Dashboard",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "dashboard",
                          "attributes": {
                            "name": "Gorgeous Wool Table",
                            "created_at": "2021-03-31T07:03:31.639Z",
                            "slug": null,
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:03:31.821Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "collections": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "collection"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "3",
                                "type": "view"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "prev": "https://localhost/api/v2/laboperator/dashboards/2",
                            "self": "https://localhost/api/v2/laboperator/dashboards/3",
                            "next": ""
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dashboards"
        ],
        "requestBody": {
          "description": "Restore a Dashboard.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/data_points": {
      "get": {
        "description": "Get a list of existing DataPoints.",
        "operationId": "getDataPoints",
        "summary": "Get Data Points",
        "parameters": [
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DataPointsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related channels to include. Allowed value is: `channel`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPointsResponse"
                },
                "examples": {
                  "List of DataPoints": {
                    "summary": "List of DataPoints",
                    "value": {
                      "data": [
                        [
                          4,
                          "2017-11-01T00:00:00.000Z",
                          10.6,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-02T00:00:00.000Z",
                          20.7,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-03T00:00:00.000Z",
                          30.8,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-04T00:00:00.000Z",
                          40.9,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-05T00:00:00.000Z",
                          50.1,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-06T00:00:00.000Z",
                          60.11,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-07T00:00:00.000Z",
                          70.12,
                          "abc"
                        ],
                        [
                          4,
                          "2017-11-08T00:00:00.000Z",
                          80.13,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-01T00:00:00.000Z",
                          10,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-02T00:00:00.000Z",
                          20,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-03T00:00:00.000Z",
                          30,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-04T00:00:00.000Z",
                          40,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-05T00:00:00.000Z",
                          50,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-06T00:00:00.000Z",
                          60,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-07T00:00:00.000Z",
                          70,
                          "abc"
                        ],
                        [
                          5,
                          "2017-12-08T00:00:00.000Z",
                          80,
                          "abc"
                        ]
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for data_points: filter[data_points][channel_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You are not allowed to access this resource.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "data_points"
        ]
      }
    },
    "/device_classes": {
      "get": {
        "description": "Get a list of existing Device Classes.",
        "operationId": "getDeviceClasses",
        "summary": "Get Device Classes",
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceClassesResponse"
                },
                "examples": {
                  "List of Device Classes": {
                    "summary": "List of Device Classes",
                    "value": {
                      "data": [
                        {
                          "id": "8",
                          "type": "device_class",
                          "attributes": {
                            "label": "Incubator"
                          }
                        },
                        {
                          "id": "20",
                          "type": "device_class",
                          "attributes": {
                            "label": "Heating/Cooling Unit"
                          }
                        },
                        {
                          "id": "24",
                          "type": "device_class",
                          "attributes": {
                            "label": "Evaporator"
                          }
                        },
                        {
                          "id": "25",
                          "type": "device_class",
                          "attributes": {
                            "label": "Balance"
                          }
                        },
                        {
                          "id": "26",
                          "type": "device_class",
                          "attributes": {
                            "label": "Pump (liquid)"
                          }
                        },
                        {
                          "id": "27",
                          "type": "device_class",
                          "attributes": {
                            "label": "Vacuum Pump"
                          }
                        },
                        {
                          "id": "31",
                          "type": "device_class",
                          "attributes": {
                            "label": "Camera"
                          }
                        },
                        {
                          "id": "1000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Custom Device Class"
                          }
                        },
                        {
                          "id": "1050",
                          "type": "device_class",
                          "attributes": {
                            "label": "Developer Console"
                          }
                        },
                        {
                          "id": "2000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Power Meter"
                          }
                        },
                        {
                          "id": "3000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Soil Moisture Sensor"
                          }
                        },
                        {
                          "id": "3100",
                          "type": "device_class",
                          "attributes": {
                            "label": "Probe"
                          }
                        },
                        {
                          "id": "4000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Analyzer"
                          }
                        },
                        {
                          "id": "5000",
                          "type": "device_class",
                          "attributes": {
                            "label": "Heat Control"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_classes"
        ]
      }
    },
    "/device_drivers": {
      "get": {
        "description": "Get a list of existing Device Drivers.",
        "operationId": "getDeviceDrivers",
        "summary": "Get Device Drivers",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Driver attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeviceDriversFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriversResponse"
                },
                "examples": {
                  "List of Device Drivers": {
                    "summary": "List of Device Drivers",
                    "value": {
                      "data": [
                        {
                          "id": "31",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-mix",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/31"
                          }
                        },
                        {
                          "id": "37",
                          "type": "device_driver",
                          "attributes": {
                            "name": "2mag-stirring-hotplate",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/37"
                          }
                        },
                        {
                          "id": "54",
                          "type": "device_driver",
                          "attributes": {
                            "name": "astmserial",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": "driver-astmserial-0.0.1.zip",
                            "schema": "parameters_schema.json"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/54"
                          }
                        },
                        {
                          "id": "41",
                          "type": "device_driver",
                          "attributes": {
                            "name": "barcode-hid",
                            "version": "0.1.3",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/41"
                          }
                        },
                        {
                          "id": "14",
                          "type": "device_driver",
                          "attributes": {
                            "name": "barcode-serial",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/14"
                          }
                        },
                        {
                          "id": "15",
                          "type": "device_driver",
                          "attributes": {
                            "name": "buechi-b545",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/15"
                          }
                        },
                        {
                          "id": "12",
                          "type": "device_driver",
                          "attributes": {
                            "name": "eppendorf-innova",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/12"
                          }
                        },
                        {
                          "id": "19",
                          "type": "device_driver",
                          "attributes": {
                            "name": "heidolph-connect",
                            "version": "0.0.2",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/19"
                          }
                        },
                        {
                          "id": "43",
                          "type": "device_driver",
                          "attributes": {
                            "name": "heidolph-rzr",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/43"
                          }
                        },
                        {
                          "id": "48",
                          "type": "device_driver",
                          "attributes": {
                            "name": "heidolph-torque",
                            "version": "0.0.4",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/48"
                          }
                        },
                        {
                          "id": "22",
                          "type": "device_driver",
                          "attributes": {
                            "name": "heidolph-vap",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/22"
                          }
                        },
                        {
                          "id": "46",
                          "type": "device_driver",
                          "attributes": {
                            "name": "huber-ministat",
                            "version": "1.0.0",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/46"
                          }
                        },
                        {
                          "id": "44",
                          "type": "device_driver",
                          "attributes": {
                            "name": "huber-unistat",
                            "version": "develop",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/44"
                          }
                        },
                        {
                          "id": "10",
                          "type": "device_driver",
                          "attributes": {
                            "name": "idle",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/10"
                          }
                        },
                        {
                          "id": "32",
                          "type": "device_driver",
                          "attributes": {
                            "name": "ika-eurostar",
                            "version": "1.0.0",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/32"
                          }
                        },
                        {
                          "id": "1",
                          "type": "device_driver",
                          "attributes": {
                            "name": "ika-retcontrol",
                            "version": "0.0.5",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/1"
                          }
                        },
                        {
                          "id": "51",
                          "type": "device_driver",
                          "attributes": {
                            "name": "integra-viaflo",
                            "version": "1.0.0",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/51"
                          }
                        },
                        {
                          "id": "40",
                          "type": "device_driver",
                          "attributes": {
                            "name": "julabo-lc",
                            "version": "1.0.0",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/40"
                          }
                        },
                        {
                          "id": "5",
                          "type": "device_driver",
                          "attributes": {
                            "name": "kds-legato",
                            "version": "0.0.1",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/5"
                          }
                        },
                        {
                          "id": "45",
                          "type": "device_driver",
                          "attributes": {
                            "name": "kern-abj",
                            "version": "0.0.2",
                            "releases": [
                              "v46-any-any"
                            ],
                            "verified": false,
                            "bundle": null,
                            "schema": null
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_drivers/45"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 20,
                        "pagesTotal": 3,
                        "recordsOrder": [
                          31,
                          37,
                          54,
                          41,
                          14,
                          15,
                          12,
                          19,
                          43,
                          48,
                          22,
                          46,
                          44,
                          10,
                          32,
                          1,
                          51,
                          40,
                          5,
                          45
                        ],
                        "recordsTotal": 54
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong device_drivers attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_drivers"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeviceDriver"
              }
            }
          }
        },
        "description": "Create a DeviceDriver.",
        "operationId": "createDeviceDriver",
        "summary": "Create Device Driver",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "55",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.2",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "bundle": "driver-astmserial-0.0.2.zip",
                          "schema": "parameters_schema.json"
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/device_drivers/55"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_drivers"
        ]
      }
    },
    "/device_drivers/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceDriver"
              }
            }
          }
        },
        "description": "Update a DeviceDriver.",
        "operationId": "updateDeviceDriver",
        "summary": "Update Device Driver",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a DeviceDriver to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "54",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "bundle": "driver-astmserial-0.0.1.zip",
                          "schema": "parameters_schema.json"
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/device_drivers/54"
                        }
                      }
                    }
                  },
                  "removing a file": {
                    "summary": "removing a file",
                    "value": {
                      "data": {
                        "id": "54",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [],
                          "verified": false,
                          "schema": "parameters_schema.json"
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/device_drivers/54"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_drivers"
        ]
      },
      "get": {
        "description": "Get a single DeviceDriver by its id.",
        "operationId": "getDeviceDriver",
        "summary": "Get Device Driver",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of the DeviceDriver to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of DeviceDriver attributes to be included in the response."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDriverResponse"
                },
                "examples": {
                  "DeviceDriver": {
                    "summary": "DeviceDriver",
                    "value": {
                      "data": {
                        "id": "54",
                        "type": "device_driver",
                        "attributes": {
                          "name": "astmserial",
                          "version": "0.0.1",
                          "releases": [
                            "v46-any-any"
                          ],
                          "verified": false,
                          "bundle": "driver-astmserial-0.0.1.zip",
                          "schema": "parameters_schema.json"
                        },
                        "relationships": {
                          "devices": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/device_drivers/54"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for device_drivers given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for device_drivers given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_drivers"
        ]
      },
      "delete": {
        "description": "Delete a DeviceDriver.",
        "operationId": "deleteDeviceDriver",
        "summary": "Delete Device Driver",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a DeviceDriver to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Delete Restriction Error": {
                    "summary": "Delete Restriction Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent devices",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_drivers"
        ]
      }
    },
    "/device_types": {
      "get": {
        "description": "Get a list of existing Device Types.",
        "operationId": "getDeviceTypes",
        "summary": "Get Device Types",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Types attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeviceTypesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypesResponse"
                },
                "examples": {
                  "List of Device Types": {
                    "summary": "List of Device Types",
                    "value": {
                      "data": [
                        {
                          "id": "9050",
                          "type": "device_type",
                          "attributes": {
                            "name": "MIXdrive",
                            "vendor": "2mag",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9050"
                          }
                        },
                        {
                          "id": "9051",
                          "type": "device_type",
                          "attributes": {
                            "name": "Stirring Hotplate 6",
                            "vendor": "2mag",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              },
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_heater_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9051"
                          }
                        },
                        {
                          "id": "9982",
                          "type": "device_type",
                          "attributes": {
                            "name": "MK-5800",
                            "vendor": "AlBaSca",
                            "device_class": "31",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "simulate_input",
                                "label": "simulate_input"
                              }
                            ],
                            "device_class_label": "Camera"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9982"
                          }
                        },
                        {
                          "id": "3700",
                          "type": "device_type",
                          "attributes": {
                            "name": "TMD-56",
                            "vendor": "Amprobe",
                            "device_class": "3100",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 19200,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [],
                            "device_class_label": "Probe"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/3700"
                          }
                        },
                        {
                          "id": "9980",
                          "type": "device_type",
                          "attributes": {
                            "name": "USB Barcode Scanner",
                            "vendor": "Aplic",
                            "device_class": "31",
                            "parameters": {
                              "hid": {
                                "dummy": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "simulate_input",
                                "label": "simulate_input"
                              }
                            ],
                            "device_class_label": "Camera"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9980"
                          }
                        },
                        {
                          "id": "3110",
                          "type": "device_type",
                          "attributes": {
                            "name": "Multichannel",
                            "vendor": "Arduino",
                            "device_class": "3100",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              },
                              "configuration": {
                                "offset_pressure1": 0,
                                "offset_pressure2": 0,
                                "offset_pressure3": 0,
                                "offset_temperature1": 0,
                                "offset_temperature2": 0,
                                "offset_temperature3": 0
                              }
                            },
                            "commands": [],
                            "device_class_label": "Probe"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/3110"
                          }
                        },
                        {
                          "id": "9941",
                          "type": "device_type",
                          "attributes": {
                            "name": "Safety Storage Cabinet",
                            "vendor": "Asecos",
                            "device_class": "1000",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 19200,
                                "databits": 8,
                                "stopbits": 2
                              }
                            },
                            "commands": [],
                            "device_class_label": "Custom Device Class"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9941"
                          }
                        },
                        {
                          "id": "3200",
                          "type": "device_type",
                          "attributes": {
                            "name": "HYTELOG",
                            "vendor": "B+B Thermo-Technik GmbH",
                            "device_class": "3100",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 4800,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [],
                            "device_class_label": "Probe"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/3200"
                          }
                        },
                        {
                          "id": "4800",
                          "type": "device_type",
                          "attributes": {
                            "name": "B-545",
                            "vendor": "BÃ¼chi",
                            "device_class": "1000",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "Start",
                                "label": "Start"
                              },
                              {
                                "title": "Stop",
                                "label": "Stop"
                              },
                              {
                                "title": "SetSample",
                                "description": "Set Sample",
                                "label": "Set Sample"
                              }
                            ],
                            "device_class_label": "Custom Device Class"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/4800"
                          }
                        },
                        {
                          "id": "4300",
                          "type": "device_type",
                          "attributes": {
                            "name": "S/SI Summit",
                            "vendor": "Denver Instruments",
                            "device_class": "25",
                            "parameters": {
                              "usb_serial": {
                                "parity": "odd",
                                "baudrate": 1200,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "get_weight",
                                "label": "print"
                              }
                            ],
                            "device_class_label": "Balance"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/4300"
                          }
                        },
                        {
                          "id": "8000",
                          "type": "device_type",
                          "attributes": {
                            "name": "Innova 42",
                            "vendor": "Eppendorf",
                            "device_class": "8",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 19200,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              }
                            ],
                            "device_class_label": "Incubator"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/8000"
                          }
                        },
                        {
                          "id": "9300",
                          "type": "device_type",
                          "attributes": {
                            "name": "Hei-Connect",
                            "vendor": "Heidolph",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 9600,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "reset",
                                "label": "reset"
                              },
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_heater_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              },
                              {
                                "title": "set_temperature_mode",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "int",
                                  "ext"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9300"
                          }
                        },
                        {
                          "id": "9310",
                          "type": "device_type",
                          "attributes": {
                            "name": "Hei-TORQUE Precision 100",
                            "vendor": "Heidolph",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 9600,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9310"
                          }
                        },
                        {
                          "id": "6000",
                          "type": "device_type",
                          "attributes": {
                            "name": "Hei-VAP",
                            "vendor": "Heidolph",
                            "device_class": "24",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 115200,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [],
                            "device_class_label": "Evaporator"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/6000"
                          }
                        },
                        {
                          "id": "9311",
                          "type": "device_type",
                          "attributes": {
                            "name": "RZR control",
                            "vendor": "Heidolph",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9311"
                          }
                        },
                        {
                          "id": "8200",
                          "type": "device_type",
                          "attributes": {
                            "name": "Ministat",
                            "vendor": "Huber",
                            "device_class": "5000",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_operation_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heat Control"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/8200"
                          }
                        },
                        {
                          "id": "8201",
                          "type": "device_type",
                          "attributes": {
                            "name": "Unistat 410W",
                            "vendor": "Huber",
                            "device_class": "5000",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_operation_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heat Control"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/8201"
                          }
                        },
                        {
                          "id": "9001",
                          "type": "device_type",
                          "attributes": {
                            "name": "C-MAG HS 7 control",
                            "vendor": "IKA",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 9600,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "set_temperature_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_heater_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9001"
                          }
                        },
                        {
                          "id": "9201",
                          "type": "device_type",
                          "attributes": {
                            "name": "EUROSTAR 100 control",
                            "vendor": "IKA",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 9600,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "reset",
                                "label": "reset"
                              },
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9201"
                          }
                        },
                        {
                          "id": "9200",
                          "type": "device_type",
                          "attributes": {
                            "name": "EUROSTAR 60 control",
                            "vendor": "IKA",
                            "device_class": "20",
                            "parameters": {
                              "usb_serial": {
                                "parity": "even",
                                "baudrate": 9600,
                                "databits": 7,
                                "stopbits": 1
                              }
                            },
                            "commands": [
                              {
                                "title": "reset",
                                "label": "reset"
                              },
                              {
                                "title": "set_rotation_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_stirrer_status",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "device_class_label": "Heating/Cooling Unit"
                          },
                          "relationships": {
                            "devices": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/device_types/9200"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 20,
                        "pagesTotal": 5,
                        "recordsOrder": [
                          9050,
                          9051,
                          9982,
                          3700,
                          9980,
                          3110,
                          9941,
                          3200,
                          4800,
                          4300,
                          8000,
                          9300,
                          9310,
                          6000,
                          9311,
                          8200,
                          8201,
                          9001,
                          9201,
                          9200
                        ],
                        "recordsTotal": 90
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_types"
        ]
      }
    },
    "/device_types/{id}": {
      "get": {
        "description": "Get a single Device Type by its id.",
        "operationId": "getDeviceType",
        "summary": "Get Device Type",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Device Type to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device Type attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `devices`"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypeResponse"
                },
                "examples": {
                  "Device Type": {
                    "summary": "Device Type",
                    "value": {
                      "data": {
                        "id": "9050",
                        "type": "device_type",
                        "attributes": {
                          "name": "MIXdrive",
                          "vendor": "2mag",
                          "device_class": "20",
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "commands": [
                            {
                              "title": "set_rotation_setpoint",
                              "type": "number"
                            },
                            {
                              "title": "set_stirrer_status",
                              "enum": [
                                0,
                                1
                              ],
                              "enumLabels": [
                                "off",
                                "on"
                              ]
                            }
                          ],
                          "device_class_label": "Heating/Cooling Unit"
                        },
                        "relationships": {
                          "devices": {
                            "data": [
                              {
                                "id": "1",
                                "type": "device"
                              },
                              {
                                "id": "2",
                                "type": "device"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/device_types/9050"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "device_types"
        ]
      }
    },
    "/devices": {
      "get": {
        "description": "Get a list of existing Devices.",
        "operationId": "getDevices",
        "summary": "Get Devices",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Devices attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DevicesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `admin`, `channels`, `connector`, `users`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted devices."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResponse"
                },
                "examples": {
                  "List of Devices": {
                    "summary": "List of Devices",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "device",
                          "attributes": {
                            "name": "Lightweight Copper Watch",
                            "status": "online",
                            "slug": "lightweight-copper-watch",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "custom_attributes": [],
                            "vendor": "Mettler Toledo",
                            "device_class": "25",
                            "created_at": "2021-03-31T07:04:06.241Z",
                            "updated_at": "2021-03-31T07:04:06.241Z",
                            "deleted_at": null,
                            "device_type": {
                              "id": 4401,
                              "device_class": "25",
                              "name": "AX26",
                              "vendor": "Mettler Toledo",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2021-03-31T06:59:53.633Z",
                              "updated_at": "2021-03-31T06:59:53.633Z",
                              "plugnplay": {
                                "usb_id": "universalserial",
                                "passive_detection": false
                              },
                              "driver_type": {
                                "name": "driver-sicsserial",
                                "version": "1.0.1"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "slugs": [
                              "lightweight-copper-watch"
                            ],
                            "display_name": "Lightweight Copper Watch",
                            "commands": [
                              {
                                "title": "get_weight",
                                "label": "print"
                              },
                              {
                                "title": "set_zero",
                                "label": "zero"
                              }
                            ],
                            "status_channel_id": 3,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": null
                            },
                            "driver": {
                              "data": {
                                "id": "9",
                                "type": "driver"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "4401",
                                "type": "device_type"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "channel"
                                },
                                {
                                  "id": "2",
                                  "type": "channel"
                                },
                                {
                                  "id": "3",
                                  "type": "channel"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "1",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/devices/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "device",
                          "attributes": {
                            "name": "Mediocre Concrete Pants",
                            "status": "offline",
                            "slug": "mediocre-concrete-pants",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "custom_attributes": [],
                            "vendor": "Mettler Toledo",
                            "device_class": "25",
                            "created_at": "2021-03-31T07:04:06.402Z",
                            "updated_at": "2021-03-31T07:04:06.749Z",
                            "deleted_at": null,
                            "device_type": {
                              "id": 4401,
                              "device_class": "25",
                              "name": "AX26",
                              "vendor": "Mettler Toledo",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2021-03-31T06:59:53.633Z",
                              "updated_at": "2021-03-31T06:59:53.633Z",
                              "plugnplay": {
                                "usb_id": "universalserial",
                                "passive_detection": false
                              },
                              "driver_type": {
                                "name": "driver-sicsserial",
                                "version": "1.0.1"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "slugs": [
                              "mediocre-concrete-pants"
                            ],
                            "display_name": "Mediocre Concrete Pants",
                            "commands": [
                              {
                                "title": "get_weight",
                                "label": "print"
                              },
                              {
                                "title": "set_zero",
                                "label": "zero"
                              }
                            ],
                            "status_channel_id": 6,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "9",
                                "type": "driver"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "4401",
                                "type": "device_type"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "4",
                                  "type": "channel"
                                },
                                {
                                  "id": "5",
                                  "type": "channel"
                                },
                                {
                                  "id": "6",
                                  "type": "channel"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "2",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/devices/2"
                          }
                        },
                        {
                          "id": "4",
                          "type": "device",
                          "attributes": {
                            "name": "Heavy Duty Aluminum Keyboard",
                            "status": "offline",
                            "slug": "heavy-duty-aluminum-keyboard",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "custom_attributes": [],
                            "vendor": "KNF",
                            "device_class": "26",
                            "created_at": "2021-03-31T07:04:07.073Z",
                            "updated_at": "2021-03-31T07:04:07.299Z",
                            "deleted_at": null,
                            "device_type": {
                              "id": 5000,
                              "device_class": "26",
                              "name": "SIMDOS 02",
                              "vendor": "KNF",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2021-03-31T06:59:53.349Z",
                              "updated_at": "2021-03-31T06:59:53.349Z",
                              "plugnplay": {
                                "usb_id": "universalserial",
                                "passive_detection": false
                              },
                              "driver_type": {
                                "name": "driver-knf-simdos02",
                                "version": "0.0.2"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "slugs": [
                              "heavy-duty-aluminum-keyboard"
                            ],
                            "display_name": "Heavy Duty Aluminum Keyboard",
                            "commands": [
                              {
                                "title": "set_flowrate_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_pump_engine",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "status_channel_id": 12,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "2",
                                "type": "connector"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "29",
                                "type": "driver"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "5000",
                                "type": "device_type"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "10",
                                  "type": "channel"
                                },
                                {
                                  "id": "11",
                                  "type": "channel"
                                },
                                {
                                  "id": "12",
                                  "type": "channel"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/devices/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 3,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          4
                        ],
                        "recordsTotal": 3
                      }
                    }
                  },
                  "List of found Devices": {
                    "summary": "List of found Devices",
                    "value": {
                      "data": [
                        {
                          "id": "4",
                          "type": "device",
                          "attributes": {
                            "name": "Heavy Duty Aluminum Keyboard",
                            "status": "offline",
                            "slug": "heavy-duty-aluminum-keyboard",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "custom_attributes": [],
                            "vendor": "KNF",
                            "device_class": "26",
                            "created_at": "2021-03-31T07:04:08.841Z",
                            "updated_at": "2021-03-31T07:04:09.108Z",
                            "deleted_at": null,
                            "device_type": {
                              "id": 5000,
                              "device_class": "26",
                              "name": "SIMDOS 02",
                              "vendor": "KNF",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 9600,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2021-03-31T06:59:53.349Z",
                              "updated_at": "2021-03-31T06:59:53.349Z",
                              "plugnplay": {
                                "usb_id": "universalserial",
                                "passive_detection": false
                              },
                              "driver_type": {
                                "name": "driver-knf-simdos02",
                                "version": "0.0.2"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "slugs": [
                              "heavy-duty-aluminum-keyboard"
                            ],
                            "display_name": "Heavy Duty Aluminum Keyboard",
                            "commands": [
                              {
                                "title": "set_flowrate_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_pump_engine",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              }
                            ],
                            "status_channel_id": 12,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "2",
                                "type": "connector"
                              }
                            },
                            "driver": {
                              "data": {
                                "id": "29",
                                "type": "driver"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "5000",
                                "type": "device_type"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "10",
                                  "type": "channel"
                                },
                                {
                                  "id": "11",
                                  "type": "channel"
                                },
                                {
                                  "id": "12",
                                  "type": "channel"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/devices/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          4
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}": {
      "get": {
        "description": "Get a single Device by its id.",
        "operationId": "getDevice",
        "summary": "Get Device",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Device to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Device attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resources to include. Allowed values are: `channels`, `users`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                },
                "examples": {
                  "Device": {
                    "summary": "Device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "device",
                        "attributes": {
                          "name": "Lightweight Copper Watch",
                          "status": "online",
                          "slug": "lightweight-copper-watch",
                          "driver_parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "custom_attributes": [],
                          "vendor": "Mettler Toledo",
                          "device_class": "25",
                          "created_at": "2021-03-31T07:04:11.274Z",
                          "updated_at": "2021-03-31T07:04:11.274Z",
                          "device_type": {
                            "id": 4401,
                            "device_class": "25",
                            "name": "AX26",
                            "vendor": "Mettler Toledo",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "created_at": "2021-03-31T06:59:53.633Z",
                            "updated_at": "2021-03-31T06:59:53.633Z",
                            "plugnplay": {
                              "usb_id": "universalserial",
                              "passive_detection": false
                            },
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "1.0.1"
                            },
                            "capabilities": []
                          },
                          "slugs": [
                            "lightweight-copper-watch"
                          ],
                          "display_name": "Lightweight Copper Watch",
                          "commands": [
                            {
                              "title": "get_weight",
                              "label": "print"
                            },
                            {
                              "title": "set_zero",
                              "label": "zero"
                            }
                          ],
                          "status_channel_id": 3,
                          "is_driver_compatible": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "connector": {},
                          "driver": {
                            "data": {
                              "id": "9",
                              "type": "driver"
                            }
                          },
                          "device_type": {
                            "data": {
                              "id": "4401",
                              "type": "device_type"
                            }
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "1",
                                "type": "channel"
                              },
                              {
                                "id": "2",
                                "type": "channel"
                              },
                              {
                                "id": "3",
                                "type": "channel"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/devices/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ]
      },
      "patch": {
        "description": "Update a Device.",
        "operationId": "updateDevice",
        "summary": "Update Device",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                },
                "examples": {
                  "Device": {
                    "summary": "Device",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "device",
                        "attributes": {
                          "name": "Device's name",
                          "status": "online",
                          "slug": "device-s-name",
                          "driver_parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "custom_attributes": [],
                          "vendor": "Mettler Toledo",
                          "device_class": "25",
                          "created_at": "2021-03-31T07:04:16.955Z",
                          "updated_at": "2021-03-31T07:04:17.905Z",
                          "device_type": {
                            "id": 4401,
                            "device_class": "25",
                            "name": "AX26",
                            "vendor": "Mettler Toledo",
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "created_at": "2021-03-31T06:59:53.633Z",
                            "updated_at": "2021-03-31T06:59:53.633Z",
                            "plugnplay": {
                              "usb_id": "universalserial",
                              "passive_detection": false
                            },
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "1.0.1"
                            },
                            "capabilities": []
                          },
                          "slugs": [
                            "device-s-name",
                            "lightweight-copper-watch"
                          ],
                          "display_name": "Device's name",
                          "commands": [
                            {
                              "title": "get_weight",
                              "label": "print"
                            },
                            {
                              "title": "set_zero",
                              "label": "zero"
                            }
                          ],
                          "status_channel_id": 3,
                          "is_driver_compatible": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "connector": {},
                          "driver": {
                            "data": {
                              "id": "9",
                              "type": "driver"
                            }
                          },
                          "device_type": {
                            "data": {
                              "id": "4401",
                              "type": "device_type"
                            }
                          },
                          "users": {
                            "data": [
                              {
                                "id": "1",
                                "type": "user"
                              }
                            ]
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "1",
                                "type": "channel"
                              },
                              {
                                "id": "2",
                                "type": "channel"
                              },
                              {
                                "id": "3",
                                "type": "channel"
                              }
                            ]
                          },
                          "view": {
                            "data": {
                              "id": "1",
                              "type": "view"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/devices/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ],
        "requestBody": {
          "description": "Update a Device.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDevice"
              },
              "example": {
                "data": {
                  "type": "device",
                  "attributes": {
                    "name": "Device's name"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Device.",
        "operationId": "deleteDevice",
        "summary": "Delete Device",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/command": {
      "put": {
        "description": "Send a command to a device.",
        "operationId": "commandDevice",
        "summary": "Command Device",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the Device that should execute the command."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                },
                "examples": {
                  "Command Execution": {
                    "summary": "Command Execution",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "command_execution",
                        "attributes": {
                          "id": 1,
                          "uuid": "1876a637-30a2-4348-845a-fadc2d65457e",
                          "parameters": {
                            "command": "get_weight"
                          },
                          "device_id": 1,
                          "user_id": 1,
                          "status": "sent",
                          "created_at": "2021-03-31T07:04:26.707Z",
                          "updated_at": "2021-03-31T07:04:26.707Z"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "1",
                              "type": "device"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/command_executions/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Invalid Command Error": {
                    "summary": "Invalid Command Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Device Type 4401 does not have a command 'invalid_command'.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Device Not Ready Error": {
                    "summary": "Device Not Ready Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Device is not ready. Current status: offline.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ],
        "requestBody": {
          "description": "Command a Device.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandDevice"
              },
              "example": {
                "data": {
                  "command": "get_weight"
                }
              }
            }
          }
        }
      }
    },
    "/devices/restore": {
      "patch": {
        "description": "Restore a Device.",
        "operationId": "restoreDevice",
        "summary": "Restore Device",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "4",
                          "type": "device",
                          "attributes": {
                            "name": "Heavy Duty Aluminum Keyboard",
                            "status": "online",
                            "slug": "heavy-duty-aluminum-keyboard",
                            "driver_parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 19200,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "custom_attributes": [],
                            "vendor": "Vacuubrand",
                            "device_class": "27",
                            "created_at": "2021-03-31T07:04:40.200Z",
                            "updated_at": "2021-03-31T07:04:40.621Z",
                            "deleted_at": null,
                            "device_type": {
                              "id": 2000,
                              "device_class": "27",
                              "name": "PC 3001",
                              "vendor": "Vacuubrand",
                              "parameters": {
                                "usb_serial": {
                                  "parity": "none",
                                  "baudrate": 19200,
                                  "databits": 8,
                                  "stopbits": 1
                                }
                              },
                              "created_at": "2021-03-31T06:59:53.304Z",
                              "updated_at": "2021-03-31T06:59:53.304Z",
                              "plugnplay": {
                                "usb_id": "universalserial",
                                "passive_detection": false
                              },
                              "driver_type": {
                                "name": "driver-vacuubrand",
                                "version": "0.0.1"
                              },
                              "capabilities": []
                            },
                            "operator_id": null,
                            "slugs": [],
                            "display_name": "Heavy Duty Aluminum Keyboard",
                            "commands": [
                              {
                                "title": "set_pressure_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_speed_setpoint",
                                "type": "number"
                              },
                              {
                                "title": "set_pump_engine",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "off",
                                  "on"
                                ]
                              },
                              {
                                "title": "set_operation_mode",
                                "enum": [
                                  1,
                                  2
                                ],
                                "enumLabels": [
                                  "pump_down",
                                  "vac_control"
                                ]
                              },
                              {
                                "title": "set_in_line_valve",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "closed",
                                  "open"
                                ]
                              },
                              {
                                "title": "set_coolant_valve",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "closed",
                                  "open"
                                ]
                              },
                              {
                                "title": "set_venting_valve",
                                "enum": [
                                  0,
                                  1
                                ],
                                "enumLabels": [
                                  "closed",
                                  "open"
                                ]
                              }
                            ],
                            "status_channel_id": 20,
                            "is_driver_compatible": true
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "connector": {
                              "data": null
                            },
                            "driver": {
                              "data": {
                                "id": "23",
                                "type": "driver"
                              }
                            },
                            "device_type": {
                              "data": {
                                "id": "2000",
                                "type": "device_type"
                              }
                            },
                            "users": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "user"
                                }
                              ]
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "10",
                                  "type": "channel"
                                },
                                {
                                  "id": "11",
                                  "type": "channel"
                                },
                                {
                                  "id": "12",
                                  "type": "channel"
                                },
                                {
                                  "id": "13",
                                  "type": "channel"
                                },
                                {
                                  "id": "14",
                                  "type": "channel"
                                },
                                {
                                  "id": "15",
                                  "type": "channel"
                                },
                                {
                                  "id": "16",
                                  "type": "channel"
                                },
                                {
                                  "id": "17",
                                  "type": "channel"
                                },
                                {
                                  "id": "18",
                                  "type": "channel"
                                },
                                {
                                  "id": "19",
                                  "type": "channel"
                                },
                                {
                                  "id": "20",
                                  "type": "channel"
                                }
                              ]
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/devices/4"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "devices"
        ],
        "requestBody": {
          "description": "Restore a Device.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/exports": {
      "get": {
        "description": "Get a list of existing Exports.",
        "operationId": "getExports",
        "summary": "Get Exports",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Export attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted exports."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ExportsFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsResponse"
                },
                "examples": {
                  "List of Exports": {
                    "summary": "List of Exports",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "export",
                          "attributes": {
                            "created_at": "2021-03-31T07:04:45.898Z",
                            "updated_at": "2021-03-31T07:04:45.898Z",
                            "original_filename": "export.xlsx",
                            "status": "processing",
                            "deleted_at": null,
                            "secure_token": "b46ba3d4-734b-40b6-9cdb-9510a1df1c2e"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/exports/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "export",
                          "attributes": {
                            "created_at": "2021-03-31T07:04:46.236Z",
                            "updated_at": "2021-03-31T07:04:46.236Z",
                            "original_filename": "export.xlsx",
                            "status": "processing",
                            "deleted_at": null,
                            "secure_token": "e65671bd-0a3c-4f73-8631-da26f97ebec3"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/exports/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for exports given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "exports"
        ]
      }
    },
    "/exports/{id}": {
      "get": {
        "description": "Get a single Export by its id.",
        "operationId": "getExport",
        "summary": "Get Export",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Export to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Export attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                },
                "examples": {
                  "Export": {
                    "summary": "Export",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "export",
                        "attributes": {
                          "created_at": "2021-03-31T07:04:49.092Z",
                          "updated_at": "2021-03-31T07:04:49.092Z",
                          "original_filename": "export.xlsx",
                          "status": "processing",
                          "secure_token": "a7dac641-302b-4e10-b6d2-cbffd548b326"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/exports/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for exports given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "exports"
        ]
      },
      "delete": {
        "description": "Delete a Export.",
        "operationId": "deleteExport",
        "summary": "Delete Export",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Export to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "exports"
        ]
      }
    },
    "/exports/restore": {
      "patch": {
        "description": "Restore a Export.",
        "operationId": "restoreExport",
        "summary": "Restore Export",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "export",
                          "attributes": {
                            "created_at": "2021-03-31T07:04:59.914Z",
                            "updated_at": "2021-03-31T07:05:00.123Z",
                            "original_filename": "export.xlsx",
                            "status": "processing",
                            "deleted_at": null,
                            "secure_token": "a743f40a-4406-48aa-9665-9e6fddbd4f47"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/exports/3"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "exports"
        ],
        "requestBody": {
          "description": "Restore a Export.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/measurements": {
      "get": {
        "description": "Get a list of existing Measurements.",
        "operationId": "getMeasurements",
        "summary": "Get Measurements",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Measurement attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MeasurementsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `channels`, `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "data_points",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the data points related to this measurement will be included as the `data_points` attribute."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted measuremnts."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementsResponse"
                },
                "examples": {
                  "List of Measurements": {
                    "summary": "List of Measurements",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "measurement",
                          "attributes": {
                            "created_at": "2021-03-31T07:05:04.767Z",
                            "description": "Incredible Wooden Chair",
                            "end_at": "2021-03-31T07:00:04.369Z",
                            "protocol_entries": [],
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2021-03-31T06:05:04.368Z",
                                "2021-03-31T07:00:04.369Z"
                              ]
                            },
                            "custom_attributes": [],
                            "start_at": "2021-03-31T06:05:04.368Z",
                            "status": "finished",
                            "updated_at": "2021-03-31T07:05:04.767Z",
                            "uuid": "cf8ee20e-f14a-4227-adff-ef6af0536b63",
                            "container_id": null,
                            "container_type": null,
                            "deleted_at": null,
                            "scope": {
                              "id": 1,
                              "start_at": "2021-03-31T06:05:04.368Z",
                              "end_at": "2021-03-31T07:00:04.369Z",
                              "channel_ids": [
                                12,
                                24
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "3",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "12",
                                  "type": "channel"
                                },
                                {
                                  "id": "24",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/measurements/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "measurement",
                          "attributes": {
                            "created_at": "2021-03-31T07:05:06.171Z",
                            "description": "Practical Copper Computer",
                            "end_at": "2021-03-31T07:00:05.846Z",
                            "protocol_entries": [],
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2021-03-31T06:05:05.846Z",
                                "2021-03-31T07:00:05.846Z"
                              ]
                            },
                            "custom_attributes": [],
                            "start_at": "2021-03-31T06:05:05.846Z",
                            "status": "finished",
                            "updated_at": "2021-03-31T07:05:06.171Z",
                            "uuid": "9b90e2b2-082b-4e0f-8e51-48c3ea966dfa",
                            "container_id": null,
                            "container_type": null,
                            "deleted_at": null,
                            "scope": {
                              "id": 2,
                              "start_at": "2021-03-31T06:05:05.846Z",
                              "end_at": "2021-03-31T07:00:05.846Z",
                              "channel_ids": [
                                36,
                                48
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "6",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "36",
                                  "type": "channel"
                                },
                                {
                                  "id": "48",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/measurements/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of found Measurements": {
                    "summary": "List of found Measurements",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "measurement",
                          "attributes": {
                            "created_at": "2021-03-31T07:05:09.690Z",
                            "description": "Practical Copper Computer",
                            "end_at": "2021-03-31T07:00:09.345Z",
                            "protocol_entries": [],
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2021-03-31T06:05:09.345Z",
                                "2021-03-31T07:00:09.345Z"
                              ]
                            },
                            "custom_attributes": [],
                            "start_at": "2021-03-31T06:05:09.345Z",
                            "status": "finished",
                            "updated_at": "2021-03-31T07:05:09.690Z",
                            "uuid": "1725d1e0-857d-4765-b8f5-055f79e57731",
                            "container_id": null,
                            "container_type": null,
                            "deleted_at": null,
                            "scope": {
                              "id": 2,
                              "start_at": "2021-03-31T06:05:09.345Z",
                              "end_at": "2021-03-31T07:00:09.345Z",
                              "channel_ids": [
                                36,
                                48
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "6",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "36",
                                  "type": "channel"
                                },
                                {
                                  "id": "48",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/measurements/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ]
      },
      "post": {
        "description": "Create a Measurement.",
        "operationId": "createMeasurement",
        "summary": "Create Measurement",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "measurement",
                        "attributes": {
                          "created_at": "2021-03-31T07:05:17.835Z",
                          "description": "Desc",
                          "protocol_entries": [],
                          "scope_params": {
                            "type": "open_range",
                            "params": [
                              "2021-03-31T07:05:17.000Z"
                            ]
                          },
                          "custom_attributes": [],
                          "start_at": "2021-03-31T07:05:17.000Z",
                          "status": "running",
                          "updated_at": "2021-03-31T07:05:17.835Z",
                          "uuid": "b9deed60-59ab-4402-8f9a-e7c43c1ea350",
                          "container_id": 1,
                          "container_type": "View",
                          "scope": {
                            "id": 1,
                            "start_at": "2021-03-31T07:05:17.000Z",
                            "channel_ids": [
                              1,
                              2,
                              3,
                              4,
                              5,
                              7,
                              10
                            ]
                          },
                          "context_type": "Device",
                          "context_id": 1,
                          "context_name": "Incredible Wooden Chair"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "2",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "1",
                                "type": "channel"
                              },
                              {
                                "id": "2",
                                "type": "channel"
                              },
                              {
                                "id": "3",
                                "type": "channel"
                              },
                              {
                                "id": "4",
                                "type": "channel"
                              },
                              {
                                "id": "5",
                                "type": "channel"
                              },
                              {
                                "id": "7",
                                "type": "channel"
                              },
                              {
                                "id": "10",
                                "type": "channel"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/measurements/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ],
        "requestBody": {
          "description": "Create a Measurement.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMeasurement"
              },
              "example": {
                "data": {
                  "type": "measurement",
                  "attributes": {
                    "description": "Desc",
                    "scope_attributes": {
                      "start_at": "2021-03-31 07:05:17 UTC"
                    }
                  },
                  "relationships": {
                    "container": {
                      "data": {
                        "id": "1",
                        "type": "View"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/measurements/{id}": {
      "get": {
        "description": "Get a single Measurement by its id.",
        "operationId": "getMeasurement",
        "summary": "Get Measurement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Measurement to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Measurement attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          },
          {
            "name": "data_points",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the data_points will be included as an attribute."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "measurement",
                        "attributes": {
                          "created_at": "2021-03-31T07:05:12.113Z",
                          "description": "Incredible Wooden Chair",
                          "end_at": "2021-03-31T07:00:11.790Z",
                          "protocol_entries": [],
                          "scope_params": {
                            "type": "range",
                            "params": [
                              "2021-03-31T06:05:11.790Z",
                              "2021-03-31T07:00:11.790Z"
                            ]
                          },
                          "custom_attributes": [],
                          "start_at": "2021-03-31T06:05:11.790Z",
                          "status": "finished",
                          "updated_at": "2021-03-31T07:05:12.113Z",
                          "uuid": "9e311e09-047d-4943-ac4e-56cd686848ce",
                          "scope": {
                            "id": 1,
                            "start_at": "2021-03-31T06:05:11.790Z",
                            "end_at": "2021-03-31T07:00:11.790Z",
                            "channel_ids": [
                              12,
                              24
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "12",
                                "type": "channel"
                              },
                              {
                                "id": "24",
                                "type": "channel"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/measurements/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ]
      },
      "patch": {
        "description": "Update a Measurement.",
        "operationId": "updateMeasurement",
        "summary": "Update Measurement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Measurement to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResponse"
                },
                "examples": {
                  "Measurement": {
                    "summary": "Measurement",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "measurement",
                        "attributes": {
                          "created_at": "2021-03-31T07:05:22.606Z",
                          "description": "New Desc",
                          "end_at": "2021-03-31T07:00:22.217Z",
                          "protocol_entries": [],
                          "scope_params": {
                            "type": "range",
                            "params": [
                              "2021-03-31T06:05:22.217Z",
                              "2021-03-31T07:00:22.217Z"
                            ]
                          },
                          "custom_attributes": [],
                          "start_at": "2021-03-31T06:05:22.217Z",
                          "status": "finished",
                          "updated_at": "2021-03-31T07:05:23.500Z",
                          "uuid": "1cb0eb8e-f41d-4d5f-9d8e-303cec241b5a",
                          "scope": {
                            "id": 1,
                            "start_at": "2021-03-31T06:05:22.217Z",
                            "end_at": "2021-03-31T07:00:22.217Z",
                            "channel_ids": [
                              12,
                              24
                            ]
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "view": {
                            "data": {
                              "id": "3",
                              "type": "view"
                            }
                          },
                          "channels": {
                            "data": [
                              {
                                "id": "12",
                                "type": "channel"
                              },
                              {
                                "id": "24",
                                "type": "channel"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/measurements/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ],
        "requestBody": {
          "description": "Update a Measurement.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeasurement"
              },
              "example": {
                "data": {
                  "type": "measurement",
                  "attributes": {
                    "description": "New Desc"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Measurement.",
        "operationId": "deleteMeasurement",
        "summary": "Delete Measurement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Measurement to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ]
      }
    },
    "/measurements/restore": {
      "patch": {
        "description": "Restore a Measurement.",
        "operationId": "restoreMeasurement",
        "summary": "Restore Measurement",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "measurement",
                          "attributes": {
                            "created_at": "2021-03-31T07:05:51.409Z",
                            "description": "Incredible Wooden Chair",
                            "end_at": "2021-03-31T07:00:50.691Z",
                            "protocol_entries": [],
                            "scope_params": {
                              "type": "range",
                              "params": [
                                "2021-03-31T06:05:50.690Z",
                                "2021-03-31T07:00:50.691Z"
                              ]
                            },
                            "custom_attributes": [],
                            "start_at": "2021-03-31T06:05:50.690Z",
                            "status": "finished",
                            "updated_at": "2021-03-31T07:05:53.481Z",
                            "uuid": "b1d9a2f9-804d-484a-bf5c-f5d896b0ba1b",
                            "container_id": null,
                            "container_type": null,
                            "deleted_at": null,
                            "scope": {
                              "id": 1,
                              "start_at": "2021-03-31T06:05:50.690Z",
                              "end_at": "2021-03-31T07:00:50.691Z",
                              "channel_ids": [
                                12,
                                24
                              ]
                            },
                            "context_type": null,
                            "context_id": null,
                            "context_name": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "view": {
                              "data": {
                                "id": "4",
                                "type": "view"
                              }
                            },
                            "channels": {
                              "data": [
                                {
                                  "id": "12",
                                  "type": "channel"
                                },
                                {
                                  "id": "24",
                                  "type": "channel"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/measurements/1"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "measurements"
        ],
        "requestBody": {
          "description": "Restore a Measurement.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/notification_settings": {
      "get": {
        "description": "Get a list of existing NotificationSettings.",
        "operationId": "getNotificationSettings",
        "summary": "Get Notification Settings",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationSetting attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationSettingsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `protonotification`, `user`, `notifications`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsResponse"
                },
                "examples": {
                  "List of NotificationSettings": {
                    "summary": "List of NotificationSettings",
                    "value": {
                      "data": [
                        {
                          "id": "4",
                          "type": "notification_setting",
                          "attributes": {
                            "delivery_methods": [
                              "ui"
                            ],
                            "active": true,
                            "rate_limit": 600000,
                            "created_at": "2021-03-31T07:06:05.861Z",
                            "updated_at": "2021-03-31T07:06:05.861Z"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "2",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "notifications": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notification_settings/4"
                          }
                        },
                        {
                          "id": "2",
                          "type": "notification_setting",
                          "attributes": {
                            "delivery_methods": [
                              "ui"
                            ],
                            "active": true,
                            "rate_limit": 600000,
                            "created_at": "2021-03-31T07:06:05.746Z",
                            "updated_at": "2021-03-31T07:06:05.746Z"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "notifications": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notification_settings/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          4,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notification_settings attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_settings"
        ]
      },
      "post": {
        "description": "Create a NotificationSetting.",
        "operationId": "createNotificationSetting",
        "summary": "Create Notification Setting",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "4",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": true,
                          "rate_limit": 600000,
                          "created_at": "2021-03-31T07:06:12.875Z",
                          "updated_at": "2021-03-31T07:06:12.875Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "2",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "2",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notification_settings/4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: User must exist",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "user": [
                                "must exist"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_settings"
        ],
        "requestBody": {
          "description": "Create a NotificationSetting.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationSetting"
              },
              "example": {
                "data": {
                  "type": "notification_setting",
                  "attributes": {
                    "active": "true"
                  },
                  "relationships": {
                    "protonotification": {
                      "data": {
                        "type": "protonotifications",
                        "id": "2"
                      }
                    },
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "2"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification_settings/{id}": {
      "get": {
        "description": "Get a single NotificationSetting by its id.",
        "operationId": "getNotificationSetting",
        "summary": "Get Notification Setting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of NotificationSetting to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationSetting attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": true,
                          "rate_limit": 600000,
                          "created_at": "2021-03-31T07:06:08.923Z",
                          "updated_at": "2021-03-31T07:06:08.923Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notification_settings/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_settings"
        ]
      },
      "patch": {
        "description": "Update user's NotificationSetting.",
        "operationId": "updateNotificationSetting",
        "summary": "Update Notification Setting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationSetting to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                },
                "examples": {
                  "NotificationSetting": {
                    "summary": "NotificationSetting",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "notification_setting",
                        "attributes": {
                          "delivery_methods": [
                            "ui"
                          ],
                          "active": false,
                          "rate_limit": 600000,
                          "created_at": "2021-03-31T07:06:19.492Z",
                          "updated_at": "2021-03-31T07:06:19.686Z"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "notifications": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notification_settings/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_settings"
        ],
        "requestBody": {
          "description": "Update a NotificationSetting.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationSetting"
              },
              "example": {
                "data": {
                  "type": "notification_setting",
                  "attributes": {
                    "active": "false"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a NotificationSetting.",
        "operationId": "deleteNotificationSetting",
        "summary": "Delete Notification Setting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationSetting to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_settings"
        ]
      }
    },
    "/notification_triggers": {
      "get": {
        "description": "Get a list of existing NotificationTriggers.",
        "operationId": "getNotificationTriggers",
        "summary": "Get Notification Triggers",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of NotificationTrigger attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationTriggersFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `protonotification`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggersResponse"
                },
                "examples": {
                  "List of NotificationTriggers": {
                    "summary": "List of NotificationTriggers",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "notification_trigger",
                          "attributes": {
                            "key": "high_temperature",
                            "conditions": "{}"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notification_triggers/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "notification_trigger",
                          "attributes": {
                            "key": "high_temperature",
                            "conditions": "{}"
                          },
                          "relationships": {
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notification_triggers/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notification_triggers attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_triggers"
        ]
      },
      "post": {
        "description": "Create a NotificationTrigger.",
        "operationId": "createNotificationTrigger",
        "summary": "Create Notification Trigger",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggerResponse"
                },
                "examples": {
                  "NotificationTrigger": {
                    "summary": "NotificationTrigger",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "notification_trigger",
                        "attributes": {
                          "key": "High Temperature",
                          "conditions": "{}"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notification_triggers/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You are not allowed to access this resource.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_triggers"
        ],
        "requestBody": {
          "description": "Create a NotificationTrigger.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTrigger"
              },
              "example": {
                "data": {
                  "type": "notification_trigger",
                  "attributes": {
                    "key": "High Temperature"
                  },
                  "relationships": {
                    "protonotification": {
                      "data": {
                        "type": "protonotifications",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notification_triggers/{id}": {
      "patch": {
        "description": "Update NotificationTrigger.",
        "operationId": "updateNotificationTrigger",
        "summary": "Update Notification Trigger",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationTrigger to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTriggerResponse"
                },
                "examples": {
                  "NotificationTrigger": {
                    "summary": "NotificationTrigger",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification_trigger",
                        "attributes": {
                          "key": "New Key",
                          "conditions": "{}"
                        },
                        "relationships": {
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notification_triggers/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_triggers"
        ],
        "requestBody": {
          "description": "Update a NotificationTrigger.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationTrigger"
              },
              "example": {
                "data": {
                  "type": "notification_trigger",
                  "attributes": {
                    "key": "New Key"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a NotificationTrigger.",
        "operationId": "deleteNotificationTrigger",
        "summary": "Delete Notification Trigger",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a NotificationTrigger to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notification_triggers"
        ]
      }
    },
    "/notifications": {
      "get": {
        "description": "Get a list of existing Notifications.",
        "operationId": "getNotifications",
        "summary": "Get Notifications",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Notification attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `notification_settings`, `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsResponse"
                },
                "examples": {
                  "List of Notifications": {
                    "summary": "List of Notifications",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "notification",
                          "attributes": {
                            "details": "{}",
                            "read": false,
                            "title": "Esse reprehenderit rerum.",
                            "message": "Eos veritatis est et.",
                            "created_at": "2021-03-31T07:06:42.756Z",
                            "updated_at": "2021-03-31T07:06:42.756Z"
                          },
                          "relationships": {
                            "notification_setting": {
                              "data": {
                                "id": "2",
                                "type": "notification_setting"
                              }
                            },
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notifications/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "notification",
                          "attributes": {
                            "details": "{}",
                            "read": false,
                            "title": "Eaque vitae in.",
                            "message": "Quia et et et.",
                            "created_at": "2021-03-31T07:06:42.747Z",
                            "updated_at": "2021-03-31T07:06:42.747Z"
                          },
                          "relationships": {
                            "notification_setting": {
                              "data": {
                                "id": "2",
                                "type": "notification_setting"
                              }
                            },
                            "protonotification": {
                              "data": {
                                "id": "1",
                                "type": "protonotification"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/notifications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong notifications attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{id}": {
      "patch": {
        "description": "Update a Notification.",
        "operationId": "updateNotification",
        "summary": "Update Notification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Notification to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponse"
                },
                "examples": {
                  "Notification": {
                    "summary": "Notification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "notification",
                        "attributes": {
                          "details": "{}",
                          "read": true,
                          "title": "Eaque vitae in.",
                          "message": "Quia et et et.",
                          "created_at": "2021-03-31T07:06:46.057Z",
                          "updated_at": "2021-03-31T07:06:46.259Z"
                        },
                        "relationships": {
                          "notification_setting": {
                            "data": {
                              "id": "2",
                              "type": "notification_setting"
                            }
                          },
                          "protonotification": {
                            "data": {
                              "id": "1",
                              "type": "protonotification"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/notifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "requestBody": {
          "description": "Update a Notification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotification"
              },
              "example": {
                "data": {
                  "type": "notification",
                  "attributes": {
                    "read": "true"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Notification.",
        "operationId": "deleteNotification",
        "summary": "Delete Notification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Notification to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/organisation_memberships": {
      "get": {
        "description": "Get a list of existing OrganisationMemberships.",
        "operationId": "getOrganisationMemberships",
        "summary": "Get Organisation Memberships",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of OrganisationMembership attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted organisation_memberships."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrganisationMembershipsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembershipsResponse"
                },
                "examples": {
                  "List of OrganisationMemberships": {
                    "summary": "List of OrganisationMemberships",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2021-03-31T07:06:57.639Z",
                            "role": "admin"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisation_memberships/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2021-03-31T07:06:57.805Z",
                            "role": "admin"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "2",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisation_memberships/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2021-03-31T07:06:57.892Z",
                            "role": "member"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisation_memberships/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "organisation_membership",
                          "attributes": {
                            "created_at": "2021-03-31T07:06:58.034Z",
                            "role": "member"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "4",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisation_memberships/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 4,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "recordsTotal": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisation_memberships"
        ]
      }
    },
    "/organisation_memberships/{id}": {
      "get": {
        "description": "Get a single OrganisationMembership by its id.",
        "operationId": "getOrganisationMembership",
        "summary": "Get Organisation Membership",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of OrganisationMembership to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of OrganisationMembership attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `users`"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembershipResponse"
                },
                "examples": {
                  "OrganisationMembership": {
                    "summary": "OrganisationMembership",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "organisation_membership",
                        "attributes": {
                          "created_at": "2021-03-31T07:06:59.958Z",
                          "role": "admin"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/organisation_memberships/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisation_memberships"
        ]
      },
      "patch": {
        "description": "Update a OrganisationMembership.",
        "operationId": "updateOrganisationMembership",
        "summary": "Update Organisation Membership",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a OrganisationMembership to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembershipResponse"
                },
                "examples": {
                  "OrganisationMembership": {
                    "summary": "OrganisationMembership",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "organisation_membership",
                        "attributes": {
                          "created_at": "2021-03-31T07:07:03.881Z",
                          "role": "member"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/organisation_memberships/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisation_memberships"
        ],
        "requestBody": {
          "description": "Update a OrganisationMembership.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisationMembership"
              },
              "example": {
                "data": {
                  "type": "organisation_membership",
                  "attributes": {
                    "role": "member"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a OrganisationMemberships.",
        "operationId": "deleteOrganisationMembership",
        "summary": "Delete Organisation Membership",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a OrganisationMembership to delete."
          },
          {
            "name": "heir_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of an heir."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Missing heir error": {
                    "summary": "Missing heir error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "An heir is missing",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Last admin error": {
                    "summary": "Last admin error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "An heir is missing",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisation_memberships"
        ]
      }
    },
    "/organisations": {
      "get": {
        "description": "Get a list of existing Organisations.",
        "operationId": "getOrganisations",
        "summary": "Get Organisations",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Organisation attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrganisationsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationsResponse"
                },
                "examples": {
                  "List of Organisations": {
                    "summary": "List of Organisations",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "organisation",
                          "attributes": {
                            "name": "Laboperator",
                            "description": "Laboriosam vitae sit nihil.",
                            "location": null,
                            "website": null,
                            "domain": "laboperator",
                            "settings": {
                              "theme": {},
                              "features": [],
                              "security": {
                                "approvedWebhooks": [
                                  "webhook.laboperator.com"
                                ]
                              }
                            },
                            "logo": {
                              "url": {
                                "medium": null,
                                "thumb": null
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisations/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "organisation",
                          "attributes": {
                            "name": "Jacobson, Welch and Hilpert #2",
                            "description": "Dolores iusto ut adipisci.",
                            "location": null,
                            "website": null,
                            "domain": "breitenberg-russel-2",
                            "settings": {
                              "theme": {},
                              "features": [],
                              "security": {
                                "approvedWebhooks": []
                              }
                            },
                            "logo": {
                              "url": {
                                "medium": "http://localhost:5000/api/v2/breitenberg-russel-2/organisations/2-1617174437/logo?version=medium",
                                "thumb": "http://localhost:5000/api/v2/breitenberg-russel-2/organisations/2-1617174437/logo?version=thumb"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/organisations/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisations"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisation"
              }
            }
          }
        },
        "description": "Create a Organisation.",
        "operationId": "createOrganisation",
        "summary": "Create Organisation",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "organisation",
                        "attributes": {
                          "name": "labpolt",
                          "domain": "labpoltava",
                          "settings": {
                            "features": []
                          },
                          "logo": {
                            "url": {
                              "medium": "http://localhost:5000/api/v2/labpoltava/organisations/3-1617174440/logo?version=medium",
                              "thumb": "http://localhost:5000/api/v2/labpoltava/organisations/3-1617174440/logo?version=thumb"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2//organisations/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for organisation: `domain`, `name`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ],
                              "domain": [
                                "can't be blank",
                                "is too short (minimum is 3 characters)"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisations"
        ]
      }
    },
    "/organisations/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisation"
              }
            }
          }
        },
        "description": "Update a Organisation.",
        "operationId": "updateOrganisation",
        "summary": "Update Organisation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Organisation to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "organisation",
                        "attributes": {
                          "name": "Jacobson, Welch and Hilpert #15",
                          "description": "Dolores iusto ut adipisci.",
                          "domain": "breitenberg-russel-15",
                          "settings": {
                            "theme": {
                              "primary": {
                                "main": "#ffad00"
                              },
                              "secondary": {
                                "main": "#ff2210"
                              }
                            },
                            "features": [],
                            "security": {
                              "approvedWebhooks": []
                            }
                          },
                          "logo": {
                            "url": {}
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/organisations/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisations"
        ]
      },
      "get": {
        "description": "Get a single Organisation by its id.",
        "operationId": "getOrganisation",
        "summary": "Get Organisation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Organisation to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Organisation attributes to be included in response."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                },
                "examples": {
                  "Organisation": {
                    "summary": "Organisation",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "organisation",
                        "attributes": {
                          "name": "Jacobson, Welch and Hilpert #11",
                          "description": "Dolores iusto ut adipisci.",
                          "domain": "breitenberg-russel-11",
                          "settings": {
                            "theme": {},
                            "features": [],
                            "security": {
                              "approvedWebhooks": []
                            }
                          },
                          "logo": {
                            "url": {
                              "medium": "http://localhost:5000/api/v2/breitenberg-russel-11/organisations/2-1617174448/logo?version=medium",
                              "thumb": "http://localhost:5000/api/v2/breitenberg-russel-11/organisations/2-1617174448/logo?version=thumb"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/organisations/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "organisations"
        ]
      }
    },
    "/permissions": {
      "get": {
        "description": "Get a list of existing Permissions.",
        "operationId": "getPermissions",
        "summary": "Get Permissions",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Permission attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PermissionsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted samples."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "distinct_for_search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Distinct"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsResponse"
                },
                "examples": {
                  "List of Permissions": {
                    "summary": "List of Permissions",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": true,
                              "deleting": true,
                              "updating": true,
                              "executing": true,
                              "updating_rules": true,
                              "updating_structure": true
                            },
                            "privileged": false,
                            "collection_id": 1,
                            "resource_id": 2,
                            "resource_type": "Collection",
                            "user_id": 1,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:39.110Z",
                            "updated_at": "2021-03-31T07:07:39.110Z",
                            "collection_owner": true,
                            "name": "default-collection-1"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "1",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/1"
                          }
                        },
                        {
                          "id": "5",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": true,
                              "deleting": true,
                              "updating": true,
                              "executing": true,
                              "updating_rules": true,
                              "updating_structure": true
                            },
                            "privileged": false,
                            "collection_id": 4,
                            "resource_id": 6,
                            "resource_type": "Collection",
                            "user_id": 3,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:39.561Z",
                            "updated_at": "2021-03-31T07:07:39.561Z",
                            "collection_owner": true,
                            "name": "collection"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "4",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/5"
                          }
                        },
                        {
                          "id": "9",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": true,
                              "deleting": true,
                              "updating": true,
                              "executing": true,
                              "updating_rules": true,
                              "updating_structure": true
                            },
                            "privileged": false,
                            "collection_id": 9,
                            "resource_id": 1,
                            "resource_type": "Sample",
                            "user_id": 5,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:39.833Z",
                            "updated_at": "2021-03-31T07:07:39.833Z",
                            "collection_owner": false,
                            "name": "krypton 8ec73315-3695-422b-9451-aa787c88f06c"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "5",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "9",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/9"
                          }
                        },
                        {
                          "id": "10",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": false,
                              "deleting": false,
                              "updating": false,
                              "executing": false,
                              "updating_rules": false,
                              "updating_structure": false
                            },
                            "privileged": false,
                            "collection_id": 2,
                            "resource_id": 6,
                            "resource_type": "Collection",
                            "user_id": 1,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:39.865Z",
                            "updated_at": "2021-03-31T07:07:39.865Z",
                            "collection_owner": false,
                            "name": "collection"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "2",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/10"
                          }
                        },
                        {
                          "id": "11",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": false,
                              "deleting": false,
                              "updating": false,
                              "executing": false,
                              "updating_rules": false,
                              "updating_structure": false
                            },
                            "privileged": false,
                            "collection_id": 6,
                            "resource_id": 1,
                            "resource_type": "Sample",
                            "user_id": 1,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:39.884Z",
                            "updated_at": "2021-03-31T07:07:39.884Z",
                            "collection_owner": false,
                            "name": "krypton 8ec73315-3695-422b-9451-aa787c88f06c"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "6",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/11"
                          }
                        },
                        {
                          "id": "19",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": true,
                              "deleting": true,
                              "updating": true,
                              "executing": true,
                              "updating_rules": true,
                              "updating_structure": true
                            },
                            "privileged": false,
                            "collection_id": 14,
                            "resource_id": 3,
                            "resource_type": "Sample",
                            "user_id": 8,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:40.400Z",
                            "updated_at": "2021-03-31T07:07:40.400Z",
                            "collection_owner": false,
                            "name": "tantalum ef9933c4-59f6-40c5-b349-c6a2321ebd4b"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "8",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "14",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/19"
                          }
                        },
                        {
                          "id": "20",
                          "type": "permission",
                          "attributes": {
                            "rules": {
                              "creating": true,
                              "deleting": true,
                              "updating": true,
                              "executing": true,
                              "updating_rules": true,
                              "updating_structure": true
                            },
                            "privileged": false,
                            "collection_id": 2,
                            "resource_id": 15,
                            "resource_type": "Collection",
                            "user_id": 1,
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:07:40.436Z",
                            "updated_at": "2021-03-31T07:07:40.436Z",
                            "collection_owner": true,
                            "name": "collection search"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "collection": {
                              "data": {
                                "id": "2",
                                "type": "collection"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/permissions/20"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 7,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          5,
                          9,
                          10,
                          11,
                          19,
                          20
                        ],
                        "recordsTotal": 7
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong permissions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for permissions given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "post": {
        "description": "Create a Permission.",
        "operationId": "createPermission",
        "summary": "Create Permission",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                },
                "examples": {
                  "Permission": {
                    "summary": "Permission",
                    "value": {
                      "data": {
                        "id": "23",
                        "type": "permission",
                        "attributes": {
                          "rules": {
                            "creating": true,
                            "deleting": true,
                            "updating": true,
                            "executing": true,
                            "updating_rules": true,
                            "updating_structure": true
                          },
                          "privileged": false,
                          "collection_id": 2,
                          "resource_id": 3,
                          "resource_type": "Sample",
                          "user_id": 1,
                          "created_at": "2021-03-31T07:07:56.113Z",
                          "updated_at": "2021-03-31T07:07:56.113Z",
                          "collection_owner": false,
                          "name": "tantalum 141c90a2-be26-4bea-b5cf-ed15ded31280"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "2",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/permissions/23"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "description": "Create a Permission.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermission"
              },
              "example": {
                "data": {
                  "type": "permission",
                  "relationships": {
                    "user": {
                      "data": {
                        "id": "1"
                      }
                    },
                    "collection": {
                      "data": {
                        "id": "2"
                      }
                    },
                    "resource": {
                      "data": {
                        "id": "3",
                        "type": "Sample"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "description": "Get a single Permission by its id.",
        "operationId": "getPermission",
        "summary": "Get Permission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Permission to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Permission attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `user`, `collection`, `resource`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                },
                "examples": {
                  "Permission": {
                    "summary": "Permission",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "permission",
                        "attributes": {
                          "rules": {
                            "creating": false,
                            "deleting": false,
                            "updating": false,
                            "executing": false,
                            "updating_rules": false,
                            "updating_structure": false
                          },
                          "privileged": false,
                          "collection_id": 6,
                          "resource_id": 1,
                          "resource_type": "Sample",
                          "user_id": 1,
                          "created_at": "2021-03-31T07:07:47.691Z",
                          "updated_at": "2021-03-31T07:07:47.691Z",
                          "collection_owner": false,
                          "name": "krypton 76780515-f06c-410e-9b01-9d0eb0eb98a0"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "6",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/permissions/11"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for permissions given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "patch": {
        "description": "Update a Permission.",
        "operationId": "updatePermission",
        "summary": "Update Permission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Permission to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                },
                "examples": {
                  "Permission": {
                    "summary": "Permission",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "permission",
                        "attributes": {
                          "rules": {
                            "deleting": "false",
                            "updating": "true",
                            "executing": "false"
                          },
                          "privileged": true,
                          "collection_id": 6,
                          "resource_id": 3,
                          "resource_type": "Sample",
                          "user_id": 1,
                          "created_at": "2021-03-31T07:08:05.634Z",
                          "updated_at": "2021-03-31T07:08:06.249Z",
                          "collection_owner": false,
                          "name": "krypton 9ef9fd6f-1e0e-42d7-8d36-9d36aec7e3fa"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "6",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/permissions/11"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "description": "Update a Permission.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermission"
              },
              "example": {
                "data": {
                  "type": "permission",
                  "attributes": {
                    "user_id": "1",
                    "collection_id": "6",
                    "resource_id": "3",
                    "resource_type": "Sample",
                    "rules": {
                      "updating": "true",
                      "deleting": "false",
                      "executing": "false"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Permission.",
        "operationId": "deletePermission",
        "summary": "Delete Permission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Permission to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/ports": {
      "get": {
        "description": "Get a list of existing Ports.",
        "operationId": "getPorts",
        "summary": "Get Ports",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Ports attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PortsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `connector`, `device`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted ports."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortsResponse"
                },
                "examples": {
                  "List of Ports": {
                    "summary": "List of Ports",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-top-left",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                            },
                            "parameters": {
                              "usb_serial": {
                                "parity": "none",
                                "baudrate": 9600,
                                "databits": 8,
                                "stopbits": 1
                              }
                            },
                            "driver_type": {
                              "name": "driver-sicsserial",
                              "version": "1.0.1"
                            },
                            "connector_key_nice": "2370-8400-7284"
                          },
                          "relationships": {
                            "device": {
                              "data": {
                                "id": "1",
                                "type": "device"
                              }
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/ports/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-top-right",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_4_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2370-8400-7284"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/ports/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-bottom-left",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_3_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2370-8400-7284"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/ports/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "port",
                          "attributes": {
                            "status": "attached",
                            "position": "usb-port-bottom-right",
                            "device_type_simulation": "",
                            "instance": {
                              "external_id": "usb_platform_3f980000_usb_usb_0_1_5_1_0"
                            },
                            "parameters": {},
                            "driver_type": {},
                            "connector_key_nice": "2370-8400-7284"
                          },
                          "relationships": {
                            "device": {
                              "data": null
                            },
                            "connector": {
                              "data": {
                                "id": "1",
                                "type": "connector"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/ports/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 4,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "recordsTotal": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      },
      "post": {
        "description": "Create a Port.",
        "operationId": "createPort",
        "summary": "Create Port",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Binding new Device to Port": {
                    "summary": "Binding new Device to Port",
                    "value": {
                      "data": {
                        "id": "41",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_444eab542b23ac46877cf0b0efe749d5"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "even",
                              "baudrate": 9600,
                              "databits": 7,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-ika-retcontrol",
                            "version": "0.0.5"
                          },
                          "connector_key_nice": "1414-3725-4145"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "11",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "11",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/41"
                        }
                      }
                    }
                  },
                  "Binding exiting Device to Port": {
                    "summary": "Binding exiting Device to Port",
                    "value": {
                      "data": {
                        "id": "50",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_ace7a1d290a0a55796cfc04bbb0b08e6"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "9801-1524-9720"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "12",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "14",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/50"
                        }
                      }
                    }
                  },
                  "Physical connector": {
                    "summary": "Physical connector",
                    "value": {
                      "data": {
                        "id": "59",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "virtual",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "virtual_d042cb105dc1adf6222c561dc63324a1"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "4239-8196-6671"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "14",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "15",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/59"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Device is forbidden": {
                    "summary": "Device is forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Connector box v1 does not support virtual ports": {
                    "summary": "Connector box v1 does not support virtual ports",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ],
        "requestBody": {
          "description": "Create a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePort"
              },
              "example": {
                "data": {
                  "type": "port",
                  "attributes": {
                    "position": "virtual"
                  },
                  "relationships": {
                    "device": {
                      "data": {
                        "id": "14",
                        "type": "devices"
                      }
                    },
                    "connector": {
                      "data": {
                        "id": "15",
                        "type": "connectors"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ports/{id}": {
      "get": {
        "description": "Get a single Port by its id.",
        "operationId": "getPort",
        "summary": "Get Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Port to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Port attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `connector`, `device`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "128",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "6447-0587-5103"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "32",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "36",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/128"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      },
      "patch": {
        "description": "Update a Port.",
        "operationId": "updatePort",
        "summary": "Update Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "176",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-right",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "9834-6223-3420"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "44",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "48",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/176"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ],
        "requestBody": {
          "description": "Update a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePort"
              },
              "example": {
                "data": {
                  "type": "port",
                  "attributes": {
                    "position": "usb-port-top-right"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Destroy a virtual Port.",
        "operationId": "deletePort",
        "summary": "Delete Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      }
    },
    "/ports/{id}/unbind_device": {
      "delete": {
        "description": "Unbind device from the given Port.",
        "operationId": "unbind_devicePort",
        "summary": "Unbind Device Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "278",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {},
                          "driver_type": {},
                          "connector_key_nice": "4813-6325-4713"
                        },
                        "relationships": {
                          "device": {},
                          "connector": {
                            "data": {
                              "id": "78",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/278"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error: port has no bounde device": {
                    "summary": "Bad Request Error: port has no bounde device",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "No device is bound to the port.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      }
    },
    "/ports/{id}/bind_device": {
      "post": {
        "description": "Bind device to the given Port.",
        "operationId": "bind_devicePort",
        "summary": "Bind Device Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Binding an existing device": {
                    "summary": "Binding an existing device",
                    "value": {
                      "data": {
                        "id": "328",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "3487-2176-3044"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "82",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "92",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/328"
                        }
                      }
                    }
                  },
                  "Binding a new device": {
                    "summary": "Binding a new device",
                    "value": {
                      "data": {
                        "id": "336",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 19200,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-vacuubrand",
                            "version": "0.0.1"
                          },
                          "connector_key_nice": "1233-2950-5883"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "85",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "94",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/336"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ],
        "requestBody": {
          "description": "BindDevice a Port.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/BindDevice"
              },
              "example": {
                "data": {
                  "type": "port",
                  "relationships": {
                    "device_type": {
                      "data": {
                        "id": "2000",
                        "name": "New Device Name"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ports/{id}/reset": {
      "delete": {
        "description": "Resets the given Port.",
        "operationId": "resetPort",
        "summary": "Reset Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "368",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "7548-4212-8794"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "92",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "102",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/368"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      }
    },
    "/ports/{id}/manual_override": {
      "put": {
        "description": "Prepares a Port for manual overrides.",
        "operationId": "manual_overridePort",
        "summary": "Manual Override Port",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Port."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                },
                "examples": {
                  "Port": {
                    "summary": "Port",
                    "value": {
                      "data": {
                        "id": "400",
                        "type": "port",
                        "attributes": {
                          "status": "attached",
                          "position": "usb-port-top-left",
                          "device_type_simulation": "",
                          "instance": {
                            "external_id": "usb_platform_3f980000_usb_usb_0_1_2_1_0"
                          },
                          "parameters": {
                            "usb_serial": {
                              "parity": "none",
                              "baudrate": 9600,
                              "databits": 8,
                              "stopbits": 1
                            }
                          },
                          "driver_type": {
                            "name": "driver-sicsserial",
                            "version": "1.0.1"
                          },
                          "connector_key_nice": "4887-3527-7593"
                        },
                        "relationships": {
                          "device": {
                            "data": {
                              "id": "100",
                              "type": "device"
                            }
                          },
                          "connector": {
                            "data": {
                              "id": "110",
                              "type": "connector"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/ports/400"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ports"
        ]
      }
    },
    "/protocol_rules": {
      "get": {
        "description": "Get a list of existing ProtocolRules.",
        "operationId": "getProtocolRules",
        "summary": "Get Protocol Rules",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Protocol Rules attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProtocolRulesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `organisation`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolRulesResponse"
                },
                "examples": {
                  "List of ProtocolRules": {
                    "summary": "List of ProtocolRules",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "protocol_rule",
                          "attributes": {
                            "id": 1,
                            "type": null,
                            "name": "Nienow",
                            "parameters": {
                              "default": {}
                            },
                            "created_at": "2021-03-31T07:09:24.320Z",
                            "updated_at": "2021-03-31T07:09:24.320Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "measurements": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/protocol_rules/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "protocol_rule",
                          "attributes": {
                            "id": 2,
                            "type": null,
                            "name": "Collins",
                            "parameters": {
                              "default": {}
                            },
                            "created_at": "2021-03-31T07:09:24.325Z",
                            "updated_at": "2021-03-31T07:09:24.325Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "measurements": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/protocol_rules/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "protocol_rule",
                          "attributes": {
                            "id": 3,
                            "type": null,
                            "name": "Renner",
                            "parameters": {
                              "default": {}
                            },
                            "created_at": "2021-03-31T07:09:24.329Z",
                            "updated_at": "2021-03-31T07:09:24.329Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "measurements": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/protocol_rules/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 3,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          3
                        ],
                        "recordsTotal": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong protocol_rules attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protocol_rules given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protocol_rules given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protocol_rules"
        ]
      },
      "post": {
        "description": "Create a ProtocolRule.",
        "operationId": "createProtocolRule",
        "summary": "Create Protocol Rule",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolRuleResponse"
                },
                "examples": {
                  "ProtocolRule": {
                    "summary": "ProtocolRule",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "protocol_rule",
                        "attributes": {
                          "id": 3,
                          "type": "ProtocolRules::Comment",
                          "parameters": {
                            "timestamp": "1550928330",
                            "comment": "Text"
                          },
                          "created_at": "2021-03-31T07:09:46.433Z",
                          "updated_at": "2021-03-31T07:09:46.433Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "measurements": {
                            "data": [
                              {
                                "id": "1",
                                "type": "measurement"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protocol_rules/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for protocol_rule: `type`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protocol_rules"
        ],
        "requestBody": {
          "description": "Create a ProtocolRule.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProtocolRule"
              },
              "example": {
                "data": {
                  "type": "protocol_rule",
                  "attributes": {
                    "type": "ProtocolRules::Comment",
                    "parameters": {
                      "timestamp": "1550928330",
                      "comment": "Text"
                    },
                    "protocolable_id": "1",
                    "protocolable_type": "Measurement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/protocol_rules/{id}": {
      "get": {
        "description": "Get a single ProtocolRule by its id.",
        "operationId": "getProtocolRule",
        "summary": "Get Protocol Rule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of ProtocolRule to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of ProtocolRule attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `organisation`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolRuleResponse"
                },
                "examples": {
                  "ProtocolRule": {
                    "summary": "ProtocolRule",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protocol_rule",
                        "attributes": {
                          "id": 1,
                          "name": "Nienow",
                          "parameters": {
                            "default": {}
                          },
                          "created_at": "2021-03-31T07:09:34.176Z",
                          "updated_at": "2021-03-31T07:09:34.176Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protocol_rules/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protocol_rules given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protocol_rules given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protocol_rules"
        ]
      },
      "patch": {
        "description": "Update a ProtocolRule.",
        "operationId": "updateProtocolRule",
        "summary": "Update Protocol Rule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a ProtocolRule to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolRuleResponse"
                },
                "examples": {
                  "ProtocolRule": {
                    "summary": "ProtocolRule",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protocol_rule",
                        "attributes": {
                          "id": 1,
                          "type": "ProtocolRules::Comment",
                          "name": "Nienow",
                          "parameters": {
                            "timestamp": "1550928330",
                            "comment": "Text"
                          },
                          "created_at": "2021-03-31T07:10:02.779Z",
                          "updated_at": "2021-03-31T07:10:02.899Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protocol_rules/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protocol_rules"
        ],
        "requestBody": {
          "description": "Update a ProtocolRule.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProtocolRule"
              },
              "example": {
                "data": {
                  "type": "protocol_rule",
                  "attributes": {
                    "type": "ProtocolRules::Comment",
                    "parameters": {
                      "timestamp": "1550928330",
                      "comment": "Text"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a ProtocolRule.",
        "operationId": "deleteProtocolRule",
        "summary": "Delete Protocol Rule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a ProtocolRule to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protocol_rules"
        ]
      }
    },
    "/protonotifications": {
      "get": {
        "description": "Get a list of existing Protonotifications.",
        "operationId": "getProtonotifications",
        "summary": "Get Protonotifications",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of protonotification attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProtonotificationsFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationsResponse"
                },
                "examples": {
                  "List of Protonotifications": {
                    "summary": "List of Protonotifications",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "protonotification",
                          "attributes": {
                            "title": "High temperature",
                            "message": "Test message",
                            "created_at": "2021-03-31T07:10:23.529Z",
                            "updated_at": "2021-03-31T07:10:23.529Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "owner"
                              }
                            },
                            "notification_triggers": {
                              "data": []
                            },
                            "notification_settings": {
                              "data": [
                                {
                                  "id": "2",
                                  "type": "notification_setting"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/protonotifications/2"
                          }
                        },
                        {
                          "id": "1",
                          "type": "protonotification",
                          "attributes": {
                            "title": "First",
                            "message": "Test message",
                            "created_at": "2021-03-31T07:10:23.515Z",
                            "updated_at": "2021-03-31T07:10:23.515Z"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "owner"
                              }
                            },
                            "notification_triggers": {
                              "data": []
                            },
                            "notification_settings": {
                              "data": [
                                {
                                  "id": "1",
                                  "type": "notification_setting"
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/protonotifications/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2,
                          1
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong protonotifications attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protonotifications"
        ]
      },
      "post": {
        "description": "Create a Protonotification.",
        "operationId": "createProtonotification",
        "summary": "Create Protonotification",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "Protonotification": {
                    "summary": "Protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "title": "High Temperature",
                          "created_at": "2021-03-31T07:10:30.798Z",
                          "updated_at": "2021-03-31T07:10:30.798Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_trigger"
                              }
                            ]
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for protonotification: `title`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "title": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protonotifications"
        ],
        "requestBody": {
          "description": "Create a Protonotification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProtonotification"
              },
              "example": {
                "data": {
                  "type": "protonotification",
                  "attributes": {
                    "title": "High Temperature",
                    "delivery_methods": [
                      "email"
                    ],
                    "notification_triggers": [
                      {
                        "key": "high_temperature"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/protonotifications/{id}": {
      "get": {
        "description": "Get a single protonotification by its id.",
        "operationId": "getProtonotification",
        "summary": "Get Protonotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of protonotification to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of protonotification attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `notification_settings`, `notification_triggers`, `owner`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "protonotification": {
                    "summary": "protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "title": "First",
                          "message": "Test message",
                          "created_at": "2021-03-31T07:10:26.497Z",
                          "updated_at": "2021-03-31T07:10:26.497Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": []
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for protonotifications given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protonotifications"
        ]
      },
      "patch": {
        "description": "Update a Protonotification.",
        "operationId": "updateProtonotification",
        "summary": "Update Protonotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Protonotification to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtonotificationResponse"
                },
                "examples": {
                  "Protonotification": {
                    "summary": "Protonotification",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "protonotification",
                        "attributes": {
                          "title": "New Title",
                          "message": "New Message",
                          "created_at": "2021-03-31T07:10:34.983Z",
                          "updated_at": "2021-03-31T07:10:35.131Z"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "owner"
                            }
                          },
                          "notification_triggers": {
                            "data": []
                          },
                          "notification_settings": {
                            "data": [
                              {
                                "id": "1",
                                "type": "notification_setting"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/protonotifications/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protonotifications"
        ],
        "requestBody": {
          "description": "Update a Protonotification.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProtonotification"
              },
              "example": {
                "data": {
                  "type": "protonotification",
                  "attributes": {
                    "title": "New Title",
                    "message": "New Message"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Protonotification.",
        "operationId": "deleteProtonotification",
        "summary": "Delete Protonotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Protonotification to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "protonotifications"
        ]
      }
    },
    "/collections/{id}/resources": {
      "post": {
        "description": "Add a Resource to a Collection.",
        "operationId": "addCollectionResource",
        "summary": "Add Collection Resource",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "10",
                        "type": "permission",
                        "attributes": {
                          "rules": {
                            "creating": true,
                            "deleting": true,
                            "updating": true,
                            "executing": true,
                            "updating_rules": true,
                            "updating_structure": true
                          },
                          "privileged": false,
                          "collection_id": 4,
                          "resource_id": 1,
                          "resource_type": "Sample",
                          "user_id": 1,
                          "created_at": "2021-03-31T07:10:43.113Z",
                          "updated_at": "2021-03-31T07:10:43.113Z",
                          "collection_owner": false,
                          "name": "selenium 6e2524b5-4a27-48ce-b7e7-45d265c282b5"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "4",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/permissions/10"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Create a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AddResource"
              },
              "example": {
                "data": {
                  "type": "resource",
                  "attributes": {
                    "resource_id": "1",
                    "resource_type": "sample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collections/{id}/resources/{resource_type}/{resource_id}": {
      "patch": {
        "description": "Move a Resource to a Collection.",
        "operationId": "moveCollectionResource",
        "summary": "Move Collection Resource",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": {
                        "id": "9",
                        "type": "permission",
                        "attributes": {
                          "rules": {
                            "creating": true,
                            "deleting": true,
                            "updating": true,
                            "executing": true,
                            "updating_rules": true,
                            "updating_structure": true
                          },
                          "privileged": false,
                          "collection_id": 4,
                          "resource_id": 1,
                          "resource_type": "Sample",
                          "user_id": 1,
                          "created_at": "2021-03-31T07:10:47.551Z",
                          "updated_at": "2021-03-31T07:10:47.731Z",
                          "collection_owner": false,
                          "name": "selenium bb85e434-8646-479f-919f-30f69fe99377"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "collection": {
                            "data": {
                              "id": "4",
                              "type": "collection"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/permissions/9"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ],
        "requestBody": {
          "description": "Update a Collection.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/MoveResource"
              },
              "example": {
                "data": {
                  "type": "resource",
                  "attributes": {
                    "collection_id": "4"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Resource from a Collection.",
        "operationId": "deleteCollectionResource",
        "summary": "Delete Collection Resource",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Collection."
          },
          {
            "name": "resource_type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type of a Resource."
          },
          {
            "name": "resource_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Resource."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/samples": {
      "get": {
        "description": "Get a list of existing Samples.",
        "operationId": "getSamples",
        "summary": "Get Samples",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Sample attributes to be included in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted samples."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SamplesFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `organisation`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SamplesResponse"
                },
                "examples": {
                  "List of Samples": {
                    "summary": "List of Samples",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "sample",
                          "attributes": {
                            "name": "Phosphorus",
                            "identifier": "53b38de4-ca30-4a6f-98bb-20b8dd8ff8c2",
                            "custom_attributes": [],
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:10:56.080Z",
                            "created_at": "2021-03-31T07:10:56.080Z",
                            "owner_id": 1
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/samples/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "sample",
                          "attributes": {
                            "name": "Carbon",
                            "identifier": "dadbef48-704e-4502-b31d-1cb2dac07dac",
                            "custom_attributes": [],
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:10:56.504Z",
                            "created_at": "2021-03-31T07:10:56.504Z",
                            "owner_id": 5
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/samples/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of found Samples": {
                    "summary": "List of found Samples",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "sample",
                          "attributes": {
                            "name": "Phosphorus",
                            "identifier": "d36ee5b7-b539-449b-a298-390a76b4e6d5",
                            "custom_attributes": [],
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:10:57.107Z",
                            "created_at": "2021-03-31T07:10:57.107Z",
                            "owner_id": 1
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/samples/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ]
      },
      "post": {
        "description": "Create a Sample.",
        "operationId": "createSample",
        "summary": "Create Sample",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "sample",
                        "attributes": {
                          "identifier": "Test",
                          "custom_attributes": [],
                          "updated_at": "2021-03-31T07:11:02.818Z",
                          "created_at": "2021-03-31T07:11:02.818Z",
                          "owner_id": 1
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/samples/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for sample: `identifier`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "identifier": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ],
        "requestBody": {
          "description": "Create a Sample.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSample"
              },
              "example": {
                "data": {
                  "type": "sample",
                  "attributes": {
                    "identifier": "Test"
                  },
                  "relationships": {
                    "collection": {
                      "data": {
                        "type": "collections",
                        "id": "7"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/samples/{id}": {
      "get": {
        "description": "Get a single Sample by its id.",
        "operationId": "getSample",
        "summary": "Get Sample",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Sample to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Sample attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `organisation`"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "sample",
                        "attributes": {
                          "name": "Phosphorus",
                          "identifier": "05fab5d0-eb79-45c0-ae2e-99b83c3905e6",
                          "custom_attributes": [],
                          "updated_at": "2021-03-31T07:10:58.973Z",
                          "created_at": "2021-03-31T07:10:58.973Z",
                          "owner_id": 1
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/samples/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ]
      },
      "patch": {
        "description": "Update a Sample.",
        "operationId": "updateSample",
        "summary": "Update Sample",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Sample to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResponse"
                },
                "examples": {
                  "Sample": {
                    "summary": "Sample",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "sample",
                        "attributes": {
                          "name": "Test",
                          "identifier": "4717fd26-fc79-4615-a914-a918b890e2cf",
                          "custom_attributes": [],
                          "updated_at": "2021-03-31T07:11:09.270Z",
                          "created_at": "2021-03-31T07:11:08.744Z",
                          "owner_id": 1
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/samples/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ],
        "requestBody": {
          "description": "Update a Sample.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSample"
              },
              "example": {
                "data": {
                  "type": "sample",
                  "attributes": {
                    "name": "Test"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Sample.",
        "operationId": "deleteSample",
        "summary": "Delete Sample",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Sample to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ]
      }
    },
    "/samples/restore": {
      "patch": {
        "description": "Restore a Sample.",
        "operationId": "restoreSample",
        "summary": "Restore Sample",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SamplesResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "3",
                          "type": "sample",
                          "attributes": {
                            "name": "Carbon",
                            "identifier": "7e1c1e02-310e-4817-addf-38b2708b386e",
                            "custom_attributes": [],
                            "deleted_at": null,
                            "updated_at": "2021-03-31T07:11:20.431Z",
                            "created_at": "2021-03-31T07:11:20.230Z",
                            "owner_id": 1
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/samples/3"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "samples"
        ],
        "requestBody": {
          "description": "Restore a Sample.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/schemas/attribute_types": {
      "get": {
        "description": "Fetch schema for list of valid attribute type.",
        "operationId": "getAttributeTypesSchema",
        "summary": "Get Attribute Types Schema",
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for list of valid AttributeType": {
                    "summary": "Schema for list of valid AttributeType",
                    "value": {
                      "definitions": {
                        "boolean": {
                          "type": "boolean",
                          "default": false
                        },
                        "date": {
                          "type": "string"
                        },
                        "datetime": {
                          "type": "string"
                        },
                        "file": {
                          "properties": {
                            "file": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "file": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        },
                        "number": {
                          "type": "number"
                        },
                        "physicalQuantity": {
                          "properties": {
                            "number": {
                              "type": "number"
                            },
                            "unit": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "plot": {
                          "properties": {
                            "data": {
                              "items": {
                                "properties": {
                                  "x": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "y": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "default": [
                                {
                                  "x": [
                                    0,
                                    60000
                                  ],
                                  "y": [
                                    0,
                                    0
                                  ],
                                  "fill": "tozeroy",
                                  "line": {
                                    "shape": "hv"
                                  }
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "relation": {
                          "required": [
                            "id",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "oneOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "integer"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ]
                                }
                              ]
                            },
                            "type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "string": {
                          "maxLength": 100,
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        },
                        "duration": {
                          "type": "number"
                        },
                        "temperatureCurve": {
                          "items": {
                            "properties": {
                              "mode": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "ui_definitions": {
                        "string": {
                          "ui:field": "CustomStringField"
                        },
                        "number": {
                          "ui:field": "CustomNumberField"
                        },
                        "boolean": {
                          "ui:field": "CheckboxField"
                        },
                        "datetime": {
                          "ui:field": "DateTimePickerField"
                        },
                        "date": {
                          "ui:field": "DatePickerField"
                        },
                        "text": {
                          "ui:field": "CustomTextField",
                          "ui:options": {
                            "rows": 6
                          }
                        },
                        "relation": {
                          "ui:field": "RelationField"
                        },
                        "physicalQuantity": {
                          "ui:field": "PhysicalQuantityField"
                        },
                        "plot": {
                          "ui:field": "PlotField"
                        },
                        "image": {
                          "ui:field": "FileAttributeField",
                          "ui:options": {
                            "accepted": "image/*"
                          }
                        },
                        "file": {
                          "ui:field": "FileAttributeField"
                        },
                        "duration": {
                          "ui:field": "DurationField"
                        },
                        "temperatureCurve": {
                          "ui:field": "TemperatureCurveField"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "schemas"
        ]
      }
    },
    "/schemas/device_drivers/{id}": {
      "get": {
        "description": "Fetch schema for device driver with certain id.",
        "operationId": "getDeviceDriverSchema",
        "summary": "Get Device Driver Schema",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a Device Driver."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for Device Driver": {
                    "summary": "Schema for Device Driver",
                    "value": {
                      "schema": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "title": "Parameters for driver-mitutoyo-idf",
                        "type": "object",
                        "required": [
                          "hid"
                        ],
                        "properties": {
                          "hid": {
                            "type": "object",
                            "properties": {
                              "dummy": {
                                "type": "number",
                                "enum": [
                                  1
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "schemas"
        ]
      }
    },
    "/schemas/types/{type}": {
      "get": {
        "description": "Fetch schema for element type :type.",
        "operationId": "getTypesSchema",
        "summary": "Get Types Schema",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Type name."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "Schema for Element Type": {
                    "summary": "Schema for Element Type",
                    "value": {
                      "schema": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "title": "Button",
                        "description": "Button to send a command to a device with or without parameters.",
                        "category": "controls",
                        "type": "object",
                        "required": [
                          "type",
                          "parameterizedCommand"
                        ],
                        "properties": {
                          "type": {
                            "enum": [
                              "Button"
                            ],
                            "type": "string"
                          },
                          "parameterizedCommand": {
                            "type": "object",
                            "required": [
                              "device",
                              "title"
                            ],
                            "properties": {
                              "device": {
                                "type": "number"
                              },
                              "title": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "defaults": {
                          "w": {
                            "default": 1
                          },
                          "h": {
                            "default": 1
                          },
                          "minW": {
                            "enum": [
                              1
                            ],
                            "default": 1
                          },
                          "minH": {
                            "enum": [
                              1
                            ],
                            "default": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "schemas"
        ]
      }
    },
    "/signatures": {
      "get": {
        "description": "Get a list of existing Signatures.",
        "operationId": "getSignatures",
        "summary": "Get Signatures",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Signature attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted samples."
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SignaturesFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignaturesResponse"
                },
                "examples": {
                  "List of Signatures": {
                    "summary": "List of Signatures",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "signature",
                          "attributes": {
                            "id": 1,
                            "user_id": 1,
                            "resource_type": "WorkflowRun",
                            "resource_id": 1,
                            "signature": {
                              "signatures": [],
                              "user_id": 1,
                              "user_full_name": "Reed McGlynn",
                              "resource": [
                                {}
                              ]
                            },
                            "digest": "99dd9487d9f7238ce2837cc6a255dcd51c65b26107dc087c5294361511ccc177",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:11:29.215Z",
                            "updated_at": "2021-03-31T07:11:29.215Z"
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/signatures/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong signatures attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "signatures"
        ]
      },
      "post": {
        "description": "Create a Signature.",
        "operationId": "createSignature",
        "summary": "Create Signature",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResponse"
                },
                "examples": {
                  "Signature": {
                    "summary": "Signature",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "signature",
                        "attributes": {
                          "id": 1,
                          "user_id": 1,
                          "resource_type": "WorkflowRun",
                          "resource_id": 1,
                          "signature": {
                            "comment": "alles gut",
                            "timestamp": "2021-03-31T07:11:42Z",
                            "signatures": [],
                            "user_id": 1,
                            "user_full_name": "Reed McGlynn",
                            "resource": [
                              {}
                            ]
                          },
                          "digest": "b34137c463ca161ba408aa191315fc875bb513d0478f0d9dd72907f694251fa1",
                          "created_at": "2021-03-31T07:11:43.817Z",
                          "updated_at": "2021-03-31T07:11:43.817Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/signatures/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for signature: `signature`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "resource": [
                                "must exist"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Signature Authentication Missing": {
                    "summary": "Signature Authentication Missing",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "signatures"
        ],
        "requestBody": {
          "description": "Create a Signature.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignature"
              },
              "example": {
                "data": {
                  "type": "signature",
                  "attributes": {
                    "signature": {
                      "comment": "alles gut",
                      "timestamp": "2021-03-31T07:11:42Z"
                    }
                  },
                  "relationships": {
                    "resource": {
                      "data": {
                        "id": "1",
                        "type": "WorkflowRun"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signatures/{id}": {
      "get": {
        "description": "Get a single Signature by its id.",
        "operationId": "getSignature",
        "summary": "Get Signature",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Signature to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Signature attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureResponse"
                },
                "examples": {
                  "Signature": {
                    "summary": "Signature",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "signature",
                        "attributes": {
                          "id": 1,
                          "user_id": 1,
                          "resource_type": "WorkflowRun",
                          "resource_id": 1,
                          "signature": {
                            "signatures": [],
                            "user_id": 1,
                            "user_full_name": "Reed McGlynn",
                            "resource": [
                              {}
                            ]
                          },
                          "digest": "99dd9487d9f7238ce2837cc6a255dcd51c65b26107dc087c5294361511ccc177",
                          "created_at": "2021-03-31T07:11:35.478Z",
                          "updated_at": "2021-03-31T07:11:35.478Z"
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/signatures/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Query parameter(s) `include` is not allowed for this resource.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for signatures given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "signatures"
        ]
      }
    },
    "/smart_views": {
      "get": {
        "description": "Get a list of existing SmartViews.",
        "operationId": "getSmartViews",
        "summary": "Get Smart Views",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of SmartView attributes to be included in the response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include soft deleted smart views."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SmartViewsFilter"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewsResponse"
                },
                "examples": {
                  "List of SmartViews": {
                    "summary": "List of SmartViews",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "smart_view",
                          "attributes": {
                            "id": 1,
                            "name": "Smart View",
                            "settings": {
                              "filters": {
                                "types": [],
                                "contains": "Sample",
                                "statuses": [],
                                "collection_id": 2,
                                "show_archived": false
                              },
                              "sorting": {
                                "page": 0,
                                "order": "desc",
                                "order_by": "search_docs.name",
                                "rows_per_page": "auto"
                              }
                            },
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:11:55.399Z",
                            "updated_at": "2021-03-31T07:11:55.399Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/smart_views/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "smart_view",
                          "attributes": {
                            "id": 2,
                            "name": "Smart View 2",
                            "settings": {
                              "filters": {
                                "types": [],
                                "contains": "Sample",
                                "statuses": [],
                                "collection_id": 2,
                                "show_archived": false
                              },
                              "sorting": {
                                "page": 0,
                                "order": "desc",
                                "order_by": "search_docs.name",
                                "rows_per_page": "auto"
                              }
                            },
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:11:55.624Z",
                            "updated_at": "2021-03-31T07:11:55.624Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "3",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/smart_views/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong smart_views attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ]
      },
      "post": {
        "description": "Create a SmartView.",
        "operationId": "createSmartView",
        "summary": "Create Smart View",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "smart_view",
                        "attributes": {
                          "id": 3,
                          "name": "My Smart View",
                          "settings": {
                            "filters": {
                              "statuses": [
                                ""
                              ],
                              "show_archived": "false",
                              "contains": "My Sample",
                              "types": [
                                "sample"
                              ]
                            }
                          },
                          "created_at": "2021-03-31T07:12:04.623Z",
                          "updated_at": "2021-03-31T07:12:04.623Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/smart_views/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for smart_view: `settings`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "name": [
                                "can't be blank"
                              ],
                              "settings": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ],
        "requestBody": {
          "description": "Create a SmartView.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartView"
              },
              "example": {
                "data": {
                  "type": "smart_view",
                  "attributes": {
                    "name": "My Smart View",
                    "settings": {
                      "filters": {
                        "statuses": [
                          ""
                        ],
                        "show_archived": "false",
                        "contains": "My Sample",
                        "types": [
                          "sample"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smart_views/{id}": {
      "get": {
        "description": "Get a single SmartView by its id.",
        "operationId": "getSmartView",
        "summary": "Get Smart View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of SmartView to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of SmartView attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `collection`, `organisation`, `owner`."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "smart_view",
                        "attributes": {
                          "id": 1,
                          "name": "Smart View",
                          "settings": {
                            "filters": {
                              "types": [],
                              "contains": "Sample",
                              "statuses": [],
                              "collection_id": 2,
                              "show_archived": false
                            },
                            "sorting": {
                              "page": 0,
                              "order": "desc",
                              "order_by": "search_docs.name",
                              "rows_per_page": "auto"
                            }
                          },
                          "created_at": "2021-03-31T07:11:59.781Z",
                          "updated_at": "2021-03-31T07:11:59.781Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/smart_views/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for smart_views given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ]
      },
      "patch": {
        "description": "Update a SmartView.",
        "operationId": "updateSmartView",
        "summary": "Update Smart View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a SmartView to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewResponse"
                },
                "examples": {
                  "SmartView": {
                    "summary": "SmartView",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "smart_view",
                        "attributes": {
                          "id": 1,
                          "name": "My new name",
                          "settings": {
                            "filters": {
                              "types": [],
                              "contains": "Sample",
                              "statuses": [],
                              "collection_id": 2,
                              "show_archived": false
                            },
                            "sorting": {
                              "page": 0,
                              "order": "desc",
                              "order_by": "search_docs.name",
                              "rows_per_page": "auto"
                            }
                          },
                          "created_at": "2021-03-31T07:12:11.128Z",
                          "updated_at": "2021-03-31T07:12:11.540Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/smart_views/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ],
        "requestBody": {
          "description": "Update a SmartView.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmartView"
              },
              "example": {
                "data": {
                  "type": "smart_view",
                  "attributes": {
                    "name": "My new name"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a SmartView.",
        "operationId": "deleteSmartView",
        "summary": "Delete Smart View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a SmartView to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ]
      }
    },
    "/smart_views/restore": {
      "patch": {
        "description": "Restore a SmartView.",
        "operationId": "restoreSmartView",
        "summary": "Restore Smart View",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartViewsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "smart_view",
                          "attributes": {
                            "id": 1,
                            "name": "Smart View",
                            "settings": {
                              "filters": {
                                "types": [],
                                "contains": "Sample",
                                "statuses": [],
                                "collection_id": 2,
                                "show_archived": false
                              },
                              "sorting": {
                                "page": 0,
                                "order": "desc",
                                "order_by": "search_docs.name",
                                "rows_per_page": "auto"
                              }
                            },
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:12:22.377Z",
                            "updated_at": "2021-03-31T07:12:22.663Z"
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/smart_views/1"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Unauthorized Error": {
                    "summary": "Ignore Unauthorized Error",
                    "value": {
                      "data": []
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_views"
        ],
        "requestBody": {
          "description": "Restore a SmartView.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/update_requests": {
      "get": {
        "description": "Get a list of existing UpdateRequests.",
        "operationId": "getUpdateRequests",
        "summary": "Get Update Requests",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of UpdateRequest attributes to be included in the response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UpdateRequestsFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestsResponse"
                },
                "examples": {
                  "List of UpdateRequests filtered by updatable": {
                    "summary": "List of UpdateRequests filtered by updatable",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "update_request",
                          "attributes": {
                            "id": 1,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2021-03-31T07:12:27.664Z",
                            "updated_at": "2021-03-31T07:12:27.664Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/update_requests/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "update_request",
                          "attributes": {
                            "id": 3,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2021-03-31T07:12:27.677Z",
                            "updated_at": "2021-03-31T07:12:27.677Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/update_requests/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of UpdateRequests filtered by context": {
                    "summary": "List of UpdateRequests filtered by context",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "update_request",
                          "attributes": {
                            "id": 1,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2021-03-31T07:12:29.768Z",
                            "updated_at": "2021-03-31T07:12:29.768Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/update_requests/1"
                          }
                        },
                        {
                          "id": "3",
                          "type": "update_request",
                          "attributes": {
                            "id": 3,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 11,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2021-03-31T07:12:29.785Z",
                            "updated_at": "2021-03-31T07:12:29.785Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/update_requests/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "update_request",
                          "attributes": {
                            "id": 4,
                            "updatable_type": "WorkflowField",
                            "updatable_id": 12,
                            "context_type": "WorkflowRun",
                            "context_id": 1,
                            "object_changes": {
                              "value": "10mg"
                            },
                            "created_at": "2021-03-31T07:12:29.790Z",
                            "updated_at": "2021-03-31T07:12:29.790Z",
                            "patch_changes": []
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/update_requests/4"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 3,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          3,
                          4
                        ],
                        "recordsTotal": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong update_requests attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Missing parent attribute": {
                    "summary": "Missing parent attribute",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for update_requests: filter[update_requests][context_id] || filter[update_requests][updatable_id].",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Not a single parent attribute": {
                    "summary": "Not a single parent attribute",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong update_requests attributes given for filtering: context_id, updatable_id.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "update_requests"
        ]
      }
    },
    "/update_requests/{id}": {
      "get": {
        "description": "Get a single UpdateRequest by its id.",
        "operationId": "getUpdateRequest",
        "summary": "Get Update Request",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of UpdateRequest to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of UpdateRequest attributes to be included in the response."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequestResponse"
                },
                "examples": {
                  "UpdateRequest": {
                    "summary": "UpdateRequest",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "update_request",
                        "attributes": {
                          "id": 1,
                          "updatable_type": "WorkflowField",
                          "updatable_id": 11,
                          "context_type": "WorkflowRun",
                          "context_id": 1,
                          "object_changes": {
                            "value": "10mg"
                          },
                          "created_at": "2021-03-31T07:12:47.392Z",
                          "updated_at": "2021-03-31T07:12:47.392Z",
                          "patch_changes": []
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/update_requests/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for update_requests given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "update_requests"
        ]
      },
      "patch": {
        "description": "Confirm an UpdateRequest.",
        "operationId": "updateUpdateRequest",
        "summary": "Update Update Request",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of an UpdateRequest to confirm."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "UpdateRequest": {
                    "summary": "UpdateRequest",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  },
                  "UpdateRequest is updated with a provided reason": {
                    "summary": "UpdateRequest is updated with a provided reason",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Change reason does not match the required pattern: ^(?!^(\\S)(?:\\s*\\1)+$)(?:[ \\t]*\\S[ \\t]*){5,}$",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "update_requests"
        ],
        "requestBody": {
          "description": "Update a UpdateRequest.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUpdateRequest"
              },
              "example": {
                "data": {
                  "type": "update_request"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an UpdateRequest.",
        "operationId": "deleteUpdateRequest",
        "summary": "Delete Update Request",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a UpdateRequest to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "update_requests"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Get a list of existing Users.",
        "operationId": "getUsers",
        "summary": "Get Users",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of User attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UsersFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                },
                "examples": {
                  "List of Users": {
                    "summary": "List of Users",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "user",
                          "attributes": {
                            "username": "Terry-2347",
                            "email": "ruby_ebert-2347@hamill.co",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:13:20.707Z",
                            "full_name": "Arturio Mueller",
                            "slugs": [
                              "arturio-mueller",
                              "terry-2347"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:ruby_ebert-2347@hamill.co\">ruby_ebert-2347@hamill.co</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "personal_collection_id": 2,
                            "initials": "AM",
                            "first_name": "Arturio",
                            "last_name": "Mueller",
                            "role": "member",
                            "organisation_membership_id": 1
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/users/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "user",
                          "attributes": {
                            "username": "Jacobson-2348",
                            "email": "elois-2348@hessel.io",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:13:20.875Z",
                            "full_name": "Jacobson-2348",
                            "slugs": [
                              "jacobson-2348"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:elois-2348@hessel.io\">elois-2348@hessel.io</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "personal_collection_id": 3,
                            "initials": null,
                            "first_name": null,
                            "last_name": null,
                            "role": "member",
                            "organisation_membership_id": 2
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/users/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of Users by id": {
                    "summary": "List of Users by id",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "user",
                          "attributes": {
                            "username": "Jacobson-2350",
                            "email": "elois-2350@hessel.io",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:13:21.594Z",
                            "full_name": "Jacobson-2350",
                            "slugs": [
                              "jacobson-2350"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:elois-2350@hessel.io\">elois-2350@hessel.io</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "personal_collection_id": 3,
                            "initials": null,
                            "first_name": null,
                            "last_name": null,
                            "role": "member",
                            "organisation_membership_id": 2
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/users/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2
                        ],
                        "recordsTotal": 1
                      }
                    }
                  },
                  "List of Users by search queries": {
                    "summary": "List of Users by search queries",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "user",
                          "attributes": {
                            "username": "Terry-2351",
                            "email": "ruby_ebert-2351@hamill.co",
                            "deleted_at": null,
                            "created_at": "2021-03-31T07:13:22.139Z",
                            "full_name": "Arturio Mueller",
                            "slugs": [
                              "arturio-mueller",
                              "terry-2351"
                            ],
                            "position": null,
                            "email_link": "<a href=\"mailto:ruby_ebert-2351@hamill.co\">ruby_ebert-2351@hamill.co</a>",
                            "mobile_phone": null,
                            "office_phone": null,
                            "personal_collection_id": 2,
                            "initials": "AM",
                            "first_name": "Arturio",
                            "last_name": "Mueller",
                            "role": "member",
                            "organisation_membership_id": 1
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/users/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a single User by its id.",
        "operationId": "getUser",
        "summary": "Get User",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of User to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of User attributes to be included in response."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "User": {
                    "summary": "User",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "user",
                        "attributes": {
                          "username": "Terry-2354",
                          "email": "ruby_ebert-2354@hamill.co",
                          "created_at": "2021-03-31T07:13:23.559Z",
                          "full_name": "Arturio Mueller",
                          "slugs": [
                            "arturio-mueller",
                            "terry-2354"
                          ],
                          "email_link": "<a href=\"mailto:ruby_ebert-2354@hamill.co\">ruby_ebert-2354@hamill.co</a>",
                          "personal_collection_id": 2,
                          "initials": "AM",
                          "first_name": "Arturio",
                          "last_name": "Mueller",
                          "role": "member",
                          "organisation_membership_id": 1
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/users/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "patch": {
        "description": "Update a User.",
        "operationId": "updateUser",
        "summary": "Update User",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a User to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "User": {
                    "summary": "User",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "user",
                        "attributes": {
                          "username": "NewName",
                          "email": "ruby_ebert-2357@hamill.co",
                          "created_at": "2021-03-31T07:13:25.358Z",
                          "full_name": "Arturio Mueller",
                          "slugs": [
                            "arturio-mueller",
                            "terry-2357"
                          ],
                          "email_link": "<a href=\"mailto:ruby_ebert-2357@hamill.co\">ruby_ebert-2357@hamill.co</a>",
                          "personal_collection_id": 2,
                          "initials": "AM",
                          "first_name": "Arturio",
                          "last_name": "Mueller",
                          "role": "member",
                          "organisation_membership_id": 1
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/users/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "Update a User.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              },
              "example": {
                "data": {
                  "type": "user",
                  "attributes": {
                    "username": "NewName"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Get a list of existing Versions.",
        "operationId": "getVersions",
        "summary": "Get Versions",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Version attributes to be included in the response."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/VersionsFilter"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          },
          {
            "name": "recursive",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/VersionsFilter"
            },
            "description": "Recursive filters"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                },
                "examples": {
                  "List of Versions": {
                    "summary": "List of Versions",
                    "value": {
                      "data": [
                        {
                          "id": "36",
                          "type": "version",
                          "attributes": {
                            "item_type": "Sample",
                            "item_id": 1,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                1
                              ],
                              "name": [
                                null,
                                "Krypton"
                              ],
                              "owner_id": [
                                null,
                                1
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:16.801Z"
                              ],
                              "identifier": [
                                null,
                                "e12f9226-ce2b-4c45-8d6e-6292ead593e1"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:16.801Z"
                              ],
                              "organisation_id": [
                                null,
                                1
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:16.801Z",
                            "display_name": "Krypton (e12f9226-ce2b-4c45-8d6e-6292ead593e1)",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/36"
                          }
                        },
                        {
                          "id": "35",
                          "type": "version",
                          "attributes": {
                            "item_type": "Permission",
                            "item_id": 3,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                3
                              ],
                              "rules": [
                                {},
                                {
                                  "creating": true,
                                  "deleting": true,
                                  "updating": true,
                                  "executing": true,
                                  "updating_rules": true,
                                  "updating_structure": true
                                }
                              ],
                              "user_id": [
                                null,
                                1
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:16.843Z"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:16.843Z"
                              ],
                              "resource_id": [
                                null,
                                1
                              ],
                              "collection_id": [
                                null,
                                2
                              ],
                              "resource_type": [
                                null,
                                "Sample"
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "resource_owner_id": [
                                null,
                                1
                              ],
                              "resource_search_doc_id": [
                                null,
                                6
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:16.843Z",
                            "display_name": "Krypton (e12f9226-ce2b-4c45-8d6e-6292ead593e1)",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/35"
                          }
                        },
                        {
                          "id": "38",
                          "type": "version",
                          "attributes": {
                            "item_type": "Sample",
                            "item_id": 2,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                2
                              ],
                              "name": [
                                null,
                                "Phosphorus"
                              ],
                              "owner_id": [
                                null,
                                1
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:16.873Z"
                              ],
                              "identifier": [
                                null,
                                "5d652e42-a901-49e7-8766-4f87867f3a67"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:16.873Z"
                              ],
                              "organisation_id": [
                                null,
                                1
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:16.873Z",
                            "display_name": "Phosphorus (5d652e42-a901-49e7-8766-4f87867f3a67)",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/38"
                          }
                        },
                        {
                          "id": "37",
                          "type": "version",
                          "attributes": {
                            "item_type": "Permission",
                            "item_id": 4,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                4
                              ],
                              "rules": [
                                {},
                                {
                                  "creating": true,
                                  "deleting": true,
                                  "updating": true,
                                  "executing": true,
                                  "updating_rules": true,
                                  "updating_structure": true
                                }
                              ],
                              "user_id": [
                                null,
                                1
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:16.905Z"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:16.905Z"
                              ],
                              "resource_id": [
                                null,
                                2
                              ],
                              "collection_id": [
                                null,
                                2
                              ],
                              "resource_type": [
                                null,
                                "Sample"
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "resource_owner_id": [
                                null,
                                1
                              ],
                              "resource_search_doc_id": [
                                null,
                                7
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:16.905Z",
                            "display_name": "Phosphorus (5d652e42-a901-49e7-8766-4f87867f3a67)",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/37"
                          }
                        },
                        {
                          "id": "39",
                          "type": "version",
                          "attributes": {
                            "item_type": "Sample",
                            "item_id": 1,
                            "event": "update",
                            "object": {
                              "id": 1,
                              "name": "Krypton",
                              "slug": null,
                              "owner_id": 1,
                              "created_at": "2021-04-12T14:38:16.801Z",
                              "deleted_at": null,
                              "identifier": "e12f9226-ce2b-4c45-8d6e-6292ead593e1",
                              "updated_at": "2021-04-12T14:38:16.801Z",
                              "organisation_id": 1,
                              "custom_attributes": []
                            },
                            "object_changes": {
                              "name": [
                                "Krypton",
                                "Updated"
                              ],
                              "updated_at": [
                                "2021-04-12T14:38:16.801Z",
                                "2021-04-12T14:38:16.924Z"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:16.924Z",
                            "display_name": "Updated (e12f9226-ce2b-4c45-8d6e-6292ead593e1)",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/39"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 5,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          36,
                          35,
                          38,
                          37,
                          39
                        ],
                        "recordsTotal": 5
                      }
                    }
                  },
                  "returns related versions recursively": {
                    "summary": "returns related versions recursively",
                    "value": {
                      "data": [
                        {
                          "id": "83",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowRun",
                            "item_id": 1,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                1
                              ],
                              "owner_id": [
                                null,
                                11
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:22.719Z"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:22.719Z"
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_template_id": [
                                null,
                                1
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:22.719Z",
                            "display_name": "My Premium Workflow",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/83"
                          }
                        },
                        {
                          "id": "73",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 1,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                1
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": "Test"
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "string",
                                  "maxLength": 100,
                                  "defaultValue": "Test"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/someString"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:22.909Z"
                              ],
                              "identifier": [
                                null,
                                "someString"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:22.909Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:22.909Z",
                            "display_name": "someString",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/73"
                          }
                        },
                        {
                          "id": "74",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 2,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                2
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Relationship"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "relationship",
                                  "prepare": true,
                                  "resourceType": "devices"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/balance"
                              ],
                              "prepare": [
                                false,
                                true
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.008Z"
                              ],
                              "identifier": [
                                null,
                                "balance"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.008Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.008Z",
                            "display_name": "balance",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/74"
                          }
                        },
                        {
                          "id": "75",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 3,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                3
                              ],
                              "type": [
                                null,
                                "WorkflowFields::File"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": ""
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "file",
                                  "output": false,
                                  "prepare": true,
                                  "readOnly": true,
                                  "mediaType": "application/my-instruments-config-file-type"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/instrumentInstructions"
                              ],
                              "prepare": [
                                false,
                                true
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.144Z"
                              ],
                              "identifier": [
                                null,
                                "instrumentInstructions"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.144Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.144Z",
                            "display_name": "instrumentInstructions",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/75"
                          }
                        },
                        {
                          "id": "76",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 4,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                4
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "mg"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/actualWeight"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.198Z"
                              ],
                              "identifier": [
                                null,
                                "actualWeight"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.198Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.198Z",
                            "display_name": "actualWeight",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/76"
                          }
                        },
                        {
                          "id": "77",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 5,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                5
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "ml"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/actualVolume"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.217Z"
                              ],
                              "identifier": [
                                null,
                                "actualVolume"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.217Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.217Z",
                            "display_name": "actualVolume",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/77"
                          }
                        },
                        {
                          "id": "78",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 6,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                6
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Script"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "script",
                                  "result": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  },
                                  "script": "actualWeight / actualVolume",
                                  "readOnly": true
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/density"
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.263Z"
                              ],
                              "identifier": [
                                null,
                                "density"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.263Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.263Z",
                            "display_name": "density",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/78"
                          }
                        },
                        {
                          "id": "79",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 7,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                7
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "string",
                                  "hidden": true,
                                  "maxLength": 100
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/selectorResult"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.281Z"
                              ],
                              "identifier": [
                                null,
                                "selectorResult"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.281Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.281Z",
                            "display_name": "selectorResult",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/79"
                          }
                        },
                        {
                          "id": "80",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 8,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                8
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "integer",
                                  "hidden": true
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/iterator"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.296Z"
                              ],
                              "identifier": [
                                null,
                                "iterator"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.296Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.296Z",
                            "display_name": "iterator",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/80"
                          }
                        },
                        {
                          "id": "81",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 9,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                9
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": [
                                    "one",
                                    "two",
                                    "three"
                                  ]
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "defaultValue": [
                                    "one",
                                    "two",
                                    "three"
                                  ]
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/collection"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.318Z"
                              ],
                              "identifier": [
                                null,
                                "collection"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.318Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.318Z",
                            "display_name": "collection",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/81"
                          }
                        },
                        {
                          "id": "82",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 10,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                10
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "title": [
                                null,
                                "Internal State"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {}
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things!",
                                  "defaultValue": {}
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/INTERNAL_STATE"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:23.339Z"
                              ],
                              "identifier": [
                                null,
                                "INTERNAL_STATE"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:23.339Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.339Z",
                            "display_name": "Internal State",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "84",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/82"
                          }
                        },
                        {
                          "id": "84",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowRun",
                            "item_id": 1,
                            "event": "update",
                            "object": {
                              "id": 1,
                              "title": null,
                              "owner_id": 11,
                              "created_at": "2021-04-12T14:38:22.719Z",
                              "deleted_at": null,
                              "run_number": 1,
                              "updated_at": "2021-04-12T14:38:22.719Z",
                              "description": null,
                              "organisation_id": 1,
                              "workflow_template_id": 1
                            },
                            "object_changes": {
                              "title": [
                                null,
                                "My Premium Workflow 1.0.0 run #1"
                              ],
                              "updated_at": [
                                "2021-04-12T14:38:22.719Z",
                                "2021-04-12T14:38:23.388Z"
                              ],
                              "description": [
                                null,
                                "Add a fancy description here. It even supports __Markdown__!\n"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:23.388Z",
                            "display_name": "My Premium Workflow 1.0.0 run #1",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/84"
                          }
                        },
                        {
                          "id": "88",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowStep",
                            "item_id": 1,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                1
                              ],
                              "pointer": [
                                null,
                                "/steps/weighing"
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:24.296Z"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:24.296Z"
                              ],
                              "step_number": [
                                0,
                                1
                              ],
                              "flow_pointer": [
                                null,
                                "/flow/0"
                              ],
                              "current_substep": [
                                -1,
                                0
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.296Z",
                            "display_name": "1. Weighing",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "90",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/88"
                          }
                        },
                        {
                          "id": "85",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 11,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                11
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Relationship"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "relationship",
                                  "defaultValue": null,
                                  "resourceType": "samples"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/sample"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:24.313Z"
                              ],
                              "identifier": [
                                null,
                                "sample"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:24.313Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.313Z",
                            "display_name": "sample",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "88",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/85"
                          }
                        },
                        {
                          "id": "86",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 12,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                12
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {
                                    "unit": "mg",
                                    "number": 100
                                  }
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "mg",
                                  "defaultValue": {
                                    "unit": "mg",
                                    "number": 100
                                  }
                                }
                              ],
                              "pointer": [
                                null,
                                "/steps/weighing/fields/target"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:24.410Z"
                              ],
                              "identifier": [
                                null,
                                "target"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:24.410Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowStep"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.410Z",
                            "display_name": "target",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "88",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/86"
                          }
                        },
                        {
                          "id": "87",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 13,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                13
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Timer"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {
                                    "history": [],
                                    "duration": 5000
                                  }
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "timer",
                                  "hidden": true,
                                  "defaultValue": null,
                                  "defaultDuration": "5s"
                                }
                              ],
                              "pointer": [
                                null,
                                "/steps/weighing/fields/SUBSTEP_0_TIMER"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:24.438Z"
                              ],
                              "identifier": [
                                null,
                                "SUBSTEP_0_TIMER"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:24.438Z"
                              ],
                              "field_scope_id": [
                                null,
                                1
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                1
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowStep"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.438Z",
                            "display_name": "SUBSTEP_0_TIMER",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "88",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/87"
                          }
                        },
                        {
                          "id": "89",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowStep",
                            "item_id": 1,
                            "event": "snapshots",
                            "object": null,
                            "object_changes": {
                              "snapshots": [
                                {
                                  "0": {
                                    "dependencies": {
                                      "sample": [
                                        [
                                          "field",
                                          "sample"
                                        ]
                                      ]
                                    }
                                  }
                                },
                                {
                                  "0": {
                                    "fields": {
                                      "sample": {
                                        "value": null,
                                        "version_id": 85
                                      }
                                    },
                                    "dependencies": {
                                      "sample": [
                                        [
                                          "field",
                                          "sample"
                                        ]
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.621Z",
                            "display_name": "1. Weighing",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "88",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/89"
                          }
                        },
                        {
                          "id": "90",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowRun",
                            "item_id": 1,
                            "event": "started",
                            "object": null,
                            "object_changes": null,
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:24.883Z",
                            "display_name": "My Premium Workflow 1.0.0 run #1",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "11",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": null
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/90"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 18,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          83,
                          73,
                          74,
                          75,
                          76,
                          77,
                          78,
                          79,
                          80,
                          81,
                          82,
                          84,
                          88,
                          85,
                          86,
                          87,
                          89,
                          90
                        ],
                        "recordsTotal": 18
                      }
                    }
                  },
                  "returns related versions recursively and filters the responce": {
                    "summary": "returns related versions recursively and filters the responce",
                    "value": {
                      "data": [
                        {
                          "id": "102",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 14,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                14
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": "Test"
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "string",
                                  "maxLength": 100,
                                  "defaultValue": "Test"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/someString"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.797Z"
                              ],
                              "identifier": [
                                null,
                                "someString"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.797Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.797Z",
                            "display_name": "someString",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/102"
                          }
                        },
                        {
                          "id": "103",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 15,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                15
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Relationship"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "relationship",
                                  "prepare": true,
                                  "resourceType": "devices"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/balance"
                              ],
                              "prepare": [
                                false,
                                true
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.819Z"
                              ],
                              "identifier": [
                                null,
                                "balance"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.819Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.819Z",
                            "display_name": "balance",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/103"
                          }
                        },
                        {
                          "id": "104",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 16,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                16
                              ],
                              "type": [
                                null,
                                "WorkflowFields::File"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": ""
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "file",
                                  "output": false,
                                  "prepare": true,
                                  "readOnly": true,
                                  "mediaType": "application/my-instruments-config-file-type"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/instrumentInstructions"
                              ],
                              "prepare": [
                                false,
                                true
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.842Z"
                              ],
                              "identifier": [
                                null,
                                "instrumentInstructions"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.842Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.842Z",
                            "display_name": "instrumentInstructions",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/104"
                          }
                        },
                        {
                          "id": "105",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 17,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                17
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "mg"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/actualWeight"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.864Z"
                              ],
                              "identifier": [
                                null,
                                "actualWeight"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.864Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.864Z",
                            "display_name": "actualWeight",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/105"
                          }
                        },
                        {
                          "id": "106",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 18,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                18
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "ml"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/actualVolume"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.886Z"
                              ],
                              "identifier": [
                                null,
                                "actualVolume"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.886Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.886Z",
                            "display_name": "actualVolume",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/106"
                          }
                        },
                        {
                          "id": "107",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 19,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                19
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Script"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "script",
                                  "result": {
                                    "type": "quantity",
                                    "unit": "mg"
                                  },
                                  "script": "actualWeight / actualVolume",
                                  "readOnly": true
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/density"
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.907Z"
                              ],
                              "identifier": [
                                null,
                                "density"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.907Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.907Z",
                            "display_name": "density",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/107"
                          }
                        },
                        {
                          "id": "108",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 20,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                20
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "string",
                                  "hidden": true,
                                  "maxLength": 100
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/selectorResult"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.930Z"
                              ],
                              "identifier": [
                                null,
                                "selectorResult"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.930Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.930Z",
                            "display_name": "selectorResult",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/108"
                          }
                        },
                        {
                          "id": "109",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 21,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                21
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "integer",
                                  "hidden": true
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/iterator"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.962Z"
                              ],
                              "identifier": [
                                null,
                                "iterator"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.962Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.962Z",
                            "display_name": "iterator",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/109"
                          }
                        },
                        {
                          "id": "110",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 22,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                22
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": [
                                    "one",
                                    "two",
                                    "three"
                                  ]
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "defaultValue": [
                                    "one",
                                    "two",
                                    "three"
                                  ]
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/collection"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:27.991Z"
                              ],
                              "identifier": [
                                null,
                                "collection"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:27.991Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:27.991Z",
                            "display_name": "collection",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/110"
                          }
                        },
                        {
                          "id": "111",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 23,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                23
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Basic"
                              ],
                              "title": [
                                null,
                                "Internal State"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {}
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "object",
                                  "title": "Internal State",
                                  "hidden": true,
                                  "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things!",
                                  "defaultValue": {}
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/INTERNAL_STATE"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:28.114Z"
                              ],
                              "identifier": [
                                null,
                                "INTERNAL_STATE"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:28.114Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:28.114Z",
                            "display_name": "Internal State",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "113",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/111"
                          }
                        },
                        {
                          "id": "114",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 24,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                24
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Relationship"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": null
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "relationship",
                                  "defaultValue": null,
                                  "resourceType": "samples"
                                }
                              ],
                              "pointer": [
                                null,
                                "/fields/sample"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:28.895Z"
                              ],
                              "identifier": [
                                null,
                                "sample"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:28.895Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowRun"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:28.895Z",
                            "display_name": "sample",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "117",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/114"
                          }
                        },
                        {
                          "id": "115",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 25,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                25
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Quantity"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {
                                    "unit": "mg",
                                    "number": 100
                                  }
                                }
                              ],
                              "hidden": [
                                null,
                                false
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "quantity",
                                  "unit": "mg",
                                  "defaultValue": {
                                    "unit": "mg",
                                    "number": 100
                                  }
                                }
                              ],
                              "pointer": [
                                null,
                                "/steps/weighing/fields/target"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:28.928Z"
                              ],
                              "identifier": [
                                null,
                                "target"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:28.928Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowStep"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:28.928Z",
                            "display_name": "target",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "117",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/115"
                          }
                        },
                        {
                          "id": "116",
                          "type": "version",
                          "attributes": {
                            "item_type": "WorkflowField",
                            "item_id": 26,
                            "event": "create",
                            "object": null,
                            "object_changes": {
                              "id": [
                                null,
                                26
                              ],
                              "type": [
                                null,
                                "WorkflowFields::Timer"
                              ],
                              "value": [
                                {
                                  "value": ""
                                },
                                {
                                  "value": {
                                    "history": [],
                                    "duration": 5000
                                  }
                                }
                              ],
                              "hidden": [
                                null,
                                true
                              ],
                              "schema": [
                                {},
                                {
                                  "type": "timer",
                                  "hidden": true,
                                  "defaultValue": null,
                                  "defaultDuration": "5s"
                                }
                              ],
                              "pointer": [
                                null,
                                "/steps/weighing/fields/SUBSTEP_0_TIMER"
                              ],
                              "read_only": [
                                true,
                                false
                              ],
                              "created_at": [
                                null,
                                "2021-04-12T14:38:28.963Z"
                              ],
                              "identifier": [
                                null,
                                "SUBSTEP_0_TIMER"
                              ],
                              "updated_at": [
                                null,
                                "2021-04-12T14:38:28.963Z"
                              ],
                              "field_scope_id": [
                                null,
                                2
                              ],
                              "organisation_id": [
                                null,
                                1
                              ],
                              "workflow_run_id": [
                                null,
                                2
                              ],
                              "field_scope_type": [
                                null,
                                "WorkflowStep"
                              ]
                            },
                            "whodunnit": null,
                            "change_reason": null,
                            "created_at": "2021-04-12T14:38:28.963Z",
                            "display_name": "SUBSTEP_0_TIMER",
                            "whodunnit_full_name": null
                          },
                          "relationships": {
                            "item_owner": {
                              "data": {
                                "id": "14",
                                "type": "user"
                              }
                            },
                            "parent": {
                              "data": {
                                "id": "117",
                                "type": "version"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/versions/116"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 13,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          102,
                          103,
                          104,
                          105,
                          106,
                          107,
                          108,
                          109,
                          110,
                          111,
                          114,
                          115,
                          116
                        ],
                        "recordsTotal": 13
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong versions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/versions/{id}": {
      "get": {
        "description": "Get a single Version by its id.",
        "operationId": "getVersion",
        "summary": "Get Version",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Version to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of Version attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                },
                "examples": {
                  "Version": {
                    "summary": "Version",
                    "value": {
                      "data": {
                        "id": "168",
                        "type": "version",
                        "attributes": {
                          "item_type": "Sample",
                          "item_id": 26,
                          "event": "create",
                          "object_changes": {
                            "id": [
                              null,
                              26
                            ],
                            "name": [
                              null,
                              "Phosphorus"
                            ],
                            "owner_id": [
                              null,
                              28
                            ],
                            "created_at": [
                              null,
                              "2021-04-12T14:38:37.807Z"
                            ],
                            "identifier": [
                              null,
                              "5f54a708-a10f-47b5-afe3-f8860f4e631b"
                            ],
                            "updated_at": [
                              null,
                              "2021-04-12T14:38:37.807Z"
                            ],
                            "organisation_id": [
                              null,
                              1
                            ]
                          },
                          "created_at": "2021-04-12T14:38:37.807Z",
                          "display_name": "Phosphorus (5f54a708-a10f-47b5-afe3-f8860f4e631b)"
                        },
                        "relationships": {
                          "item_owner": {
                            "data": {
                              "id": "28",
                              "type": "user"
                            }
                          },
                          "parent": {}
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/versions/168"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for versions given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/views/{id}": {
      "get": {
        "description": "Get a single View by its id.",
        "operationId": "getView",
        "summary": "Get View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of View to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of View attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `measurements`, `viewable`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 2
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1
                                  ]
                                },
                                "identifier": "8e26c5cc-a77e-46b7-8501-4558343baaf5"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    2
                                  ]
                                },
                                "identifier": "1d350307-270d-4d59-abd4-0862560ec878"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 6,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 5,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 4
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3
                                  ]
                                },
                                "identifier": "1b50768f-4bee-4cd3-95cb-0f8e121c796c"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    4
                                  ]
                                },
                                "identifier": "c0548486-f328-4a47-9d22-81dc9936f1a2"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 12,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 10,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 8,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    5
                                  ]
                                },
                                "identifier": "1354e206-d70e-4b0f-bebd-fd68464c2657"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    7
                                  ]
                                },
                                "identifier": "0c542ae0-7d05-4efe-949e-00c9e0bb8511"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    10
                                  ]
                                },
                                "identifier": "f6a7b3a8-c1b5-44ac-8ce8-f6ad07cf2117"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 6,
                                    "w": 12,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "md": {
                                    "h": 6,
                                    "w": 10,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "sm": {
                                    "h": 6,
                                    "w": 8,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xs": {
                                    "h": 6,
                                    "w": 6,
                                    "x": 0,
                                    "y": 11,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xxs": {
                                    "h": 5,
                                    "w": 4,
                                    "x": 0,
                                    "y": 11,
                                    "minH": 3,
                                    "minW": 4
                                  }
                                },
                                "settings": {
                                  "type": "LineChart",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1,
                                    3,
                                    13,
                                    15
                                  ]
                                },
                                "identifier": "9a686a6e-920b-43bf-bc04-7f0620eced53"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 14
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    13
                                  ]
                                },
                                "identifier": "831d2633-4a9b-4b37-84ed-9a6028058f8b"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    14
                                  ]
                                },
                                "identifier": "2903cadf-ee0a-4c87-a244-a08d53f1198b"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 6,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 5,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 16
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    15
                                  ]
                                },
                                "identifier": "3391d2cf-5e3c-4122-b177-b86527a432c4"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    16
                                  ]
                                },
                                "identifier": "e9cd8b26-4bd1-4cfa-ada5-2b3f4bb01ebf"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 12,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 10,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 8,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    17
                                  ]
                                },
                                "identifier": "fd268770-5146-4f70-b80a-40e8982d5f63"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    19
                                  ]
                                },
                                "identifier": "aabb2010-44da-47af-9335-05b44eaa45f9"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:13:39.143Z",
                                      "2021-03-31T07:08:39.144Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    22
                                  ]
                                },
                                "identifier": "15a30c8f-479a-481a-9ee1-4a0058748fee"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {
                              "a834e2a4-167f-4f47-9022-9e6ef2c490c2": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "6ff94c9a-f31e-4886-b3d4-5106ae338871": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "0b9610b8-7957-45a1-90cd-9185dc23cfcd": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "bae4b009-d337-4767-893f-890d14e0e056": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "d61bd24e-87c5-4409-b471-48bd0e0b0008": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "2de5a39b-39ae-43bf-b9ac-5d6dc22c0d25": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9faa73a1-1f49-4523-9cf6-346b33fc776f": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "efba8de2-8be0-4fcc-a954-ee2c21cf7806": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "d0657a9f-8bae-4754-bf0a-0f7fb3fd1efe": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "ff8c56ef-bc9c-400e-ad18-11af7b7f34c2": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "000f6637-b494-4005-b771-c05338b51c6f": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "54ce4f9c-a988-4a22-beb6-2a610da255a6": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4ba05e2d-6a24-4a7c-8c34-a3d5f537a5dd": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "475ab4b2-51b4-47a1-8118-dba286dd5e26": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9d204902-c7f8-4ce2-ae03-742cd225278b": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:38.331Z",
                                  "2021-03-30T21:32:38.331Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "08f1f6e9-ba4d-49d9-a112-aa3360728295": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4fc01268-8919-4fc4-b047-ee921d86cb63": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "2343eb50-6589-48bd-85fa-a5525f2d8c75": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1414d19e-0bd7-4cc7-a410-8940f8f37be3": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4fc51967-1005-4236-90a8-f6fbd9eae768": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "ef8f98e1-b534-4ab2-92c6-789ff0ca1a6c": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9729cb99-1200-4d96-9682-f39aea9b82ed": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "d777448d-f6d2-4f7d-9572-891a6b5a21b5": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "8b55d5e9-9880-4fa3-bd01-551bba948167": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "dd92783e-0f3f-4c83-8f5a-4c5c646f868c": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "63a96604-f473-4341-a111-2fd77f80e9bb": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "52e8b81c-d3b9-473d-9bee-4f7f4c39fff6": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "2c67e575-afa8-4abd-b8ca-c75cf875c2bb": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1e8e88cb-e897-4b0c-a79f-1421a6cdf582": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "15745656-7a6f-4717-ac4a-134db0a55cef": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:11.945Z",
                                  "2021-03-31T06:48:11.945Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "8e26c5cc-a77e-46b7-8501-4558343baaf5": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1d350307-270d-4d59-abd4-0862560ec878": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1b50768f-4bee-4cd3-95cb-0f8e121c796c": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c0548486-f328-4a47-9d22-81dc9936f1a2": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1354e206-d70e-4b0f-bebd-fd68464c2657": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "0c542ae0-7d05-4efe-949e-00c9e0bb8511": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "f6a7b3a8-c1b5-44ac-8ce8-f6ad07cf2117": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9a686a6e-920b-43bf-bc04-7f0620eced53": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "831d2633-4a9b-4b37-84ed-9a6028058f8b": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "2903cadf-ee0a-4c87-a244-a08d53f1198b": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "3391d2cf-5e3c-4122-b177-b86527a432c4": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "e9cd8b26-4bd1-4cfa-ada5-2b3f4bb01ebf": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "fd268770-5146-4f70-b80a-40e8982d5f63": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "aabb2010-44da-47af-9335-05b44eaa45f9": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "15a30c8f-479a-481a-9ee1-4a0058748fee": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:13:39.143Z",
                                  "2021-03-31T07:08:39.144Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              }
                            }
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "viewable"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/views/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      },
      "patch": {
        "description": "Update a View.",
        "operationId": "updateView",
        "summary": "Update View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a View to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "i": "f085345a-0e47-4ea4-afcf-b2667505937d",
                                    "moved": "false",
                                    "static": "false"
                                  }
                                },
                                "settings": {
                                  "type": "Button",
                                  "label": "send",
                                  "device": "1",
                                  "command": "send"
                                },
                                "identifier": "f085345a-0e47-4ea4-afcf-b2667505937d"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {}
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "viewable"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/views/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ],
        "requestBody": {
          "description": "Update a View.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateView"
              },
              "example": {
                "data": {
                  "type": "view",
                  "attributes": {
                    "layout": {
                      "elements": [
                        {
                          "layouts": {
                            "lg": {
                              "i": "f085345a-0e47-4ea4-afcf-b2667505937d",
                              "moved": "false",
                              "static": "false"
                            }
                          },
                          "settings": {
                            "type": "Button",
                            "label": "send",
                            "device": "1",
                            "command": "send"
                          },
                          "identifier": "f085345a-0e47-4ea4-afcf-b2667505937d"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/views/{id}/reset": {
      "put": {
        "description": "Reset the view to the orginal template.",
        "operationId": "resetView",
        "summary": "Reset View",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of View to reset."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewResponse"
                },
                "examples": {
                  "View": {
                    "summary": "View",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "view",
                        "attributes": {
                          "layout": {
                            "elements": [
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 2
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1
                                  ]
                                },
                                "identifier": "c02787fb-4c84-4d1f-9c80-87ba5d61f01e"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    2
                                  ]
                                },
                                "identifier": "1506f67d-72f2-473f-aed0-a6f1fd8346e9"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 6,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 5,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 4
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    3
                                  ]
                                },
                                "identifier": "5b5972bf-4f6c-4858-9be7-7c05234baf50"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    4
                                  ]
                                },
                                "identifier": "c680fbdd-a750-41e6-8091-8fd96a9bba33"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 12,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 10,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 8,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    5
                                  ]
                                },
                                "identifier": "6e441d8e-7573-4a8c-8441-ff214584978c"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    7
                                  ]
                                },
                                "identifier": "feb9c770-020e-4c61-a45f-7c3ff308fa58"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    10
                                  ]
                                },
                                "identifier": "c3a73021-395f-4980-b734-5f3d8359699f"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 6,
                                    "w": 12,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "md": {
                                    "h": 6,
                                    "w": 10,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "sm": {
                                    "h": 6,
                                    "w": 8,
                                    "x": 0,
                                    "y": 6,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xs": {
                                    "h": 6,
                                    "w": 6,
                                    "x": 0,
                                    "y": 11,
                                    "minH": 3,
                                    "minW": 4
                                  },
                                  "xxs": {
                                    "h": 5,
                                    "w": 4,
                                    "x": 0,
                                    "y": 11,
                                    "minH": 3,
                                    "minW": 4
                                  }
                                },
                                "settings": {
                                  "type": "LineChart",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    1,
                                    3,
                                    13,
                                    15
                                  ]
                                },
                                "identifier": "8e5f9a13-f3a0-42f8-924d-292f964a38b5"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 14
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    13
                                  ]
                                },
                                "identifier": "4033a930-8ec5-4d48-a82d-5966958cdf79"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    14
                                  ]
                                },
                                "identifier": "538e6b5a-ba95-4303-8471-605829067fcc"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 6,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 3,
                                    "w": 5,
                                    "x": 5,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 4,
                                    "y": 0,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 3,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 3,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 3,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "Gauge",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "setPoint": {
                                    "setPointType": "channel",
                                    "showSetPoint": true,
                                    "setPointSource": 16
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    15
                                  ]
                                },
                                "identifier": "320d9cbc-618b-4481-b7bd-2a5596312bd5"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 3,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 7,
                                    "minH": 1,
                                    "minW": 3
                                  }
                                },
                                "settings": {
                                  "type": "NumberInput",
                                  "label": "set",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    16
                                  ]
                                },
                                "identifier": "8c13cb57-1754-4a90-9007-49d1175dbd31"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 12,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 10,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 8,
                                    "x": 0,
                                    "y": 5,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    17
                                  ]
                                },
                                "identifier": "5a52603b-dc24-4e1e-86f8-6e63b6f45dee"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 6,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 5,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 4,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 9,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    19
                                  ]
                                },
                                "identifier": "cd0ba3cd-ace6-4f34-a599-33c964110307"
                              },
                              {
                                "layouts": {
                                  "lg": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "md": {
                                    "h": 1,
                                    "w": 5,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "sm": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 4,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xs": {
                                    "h": 1,
                                    "w": 6,
                                    "x": 0,
                                    "y": 8,
                                    "minH": 1,
                                    "minW": 2
                                  },
                                  "xxs": {
                                    "h": 1,
                                    "w": 4,
                                    "x": 0,
                                    "y": 10,
                                    "minH": 1,
                                    "minW": 2
                                  }
                                },
                                "settings": {
                                  "type": "Switch",
                                  "disabled": {
                                    "if": "error|orphaned|unknown|offline|off|loading",
                                    "channel": {
                                      "name": "status"
                                    }
                                  },
                                  "defaultScope": {
                                    "type": "range",
                                    "params": [
                                      "2021-03-31T06:14:00.547Z",
                                      "2021-03-31T07:09:00.547Z"
                                    ]
                                  },
                                  "inputChannels": [
                                    22
                                  ]
                                },
                                "identifier": "9c748d5d-0b48-4bfc-8bb2-8bf3dab15b0d"
                              }
                            ]
                          },
                          "viewable_type": "Measurement",
                          "data_scopes": {
                            "scopes": {
                              "c17d3e57-c654-455a-80b9-acfb7bf871ea": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c611148e-4961-48ec-9767-2c33d7c7219c": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "86af30d7-8039-4cba-a848-d7f038a17d0b": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "39d6537e-14b5-47e2-87c4-0f243dde809b": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "0fe4625d-4280-4023-b194-4329660ac168": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "bc8c11e6-b498-4404-8e14-73c3729570af": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "6aef1a97-ffae-4753-a7ab-997669e868dd": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c612744b-b2a0-42b6-b9b4-960891ac9d2d": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4d64e210-d405-4116-882c-a308506c7d96": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1398efd3-d4fd-475b-b325-275d7454eb29": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "f41fa22d-d780-40cb-ac3e-6b7d29767686": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "3add337c-1c9a-4310-970e-303eeb9784af": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c8a3e210-e953-4439-8526-51eb91ba0d26": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9e5ff54b-8fce-4ae0-bc57-a0751124c8b6": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "72c87cbc-5b2e-45df-8fa5-1b0738e4682f": {
                                "type": "range",
                                "params": [
                                  "2021-03-30T20:37:56.688Z",
                                  "2021-03-30T21:32:56.688Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "82e1940a-588c-44f8-8624-1ca045e2df9a": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "e89ec6f0-7298-4066-a25d-92c68cf55c48": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "119106cd-b50e-4298-8cb8-dc8d215c0c37": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c4229b7e-f258-410c-b270-c44e00acb04f": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "99f40e30-fc0b-41e6-8e74-7a303d14ce86": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "b24e875b-186b-49ef-b8b4-cbc1d847fde0": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "f8c545d7-9e9b-4716-9523-7853596d8c8e": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "0191a2ae-7b8a-4611-ae1c-ac05eedbd873": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1a6ebcde-b296-47d4-9dd1-2be8ecfd0938": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "18eb7710-79dc-430f-a68e-ea9beadfd715": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "43f3bf8b-05e2-469f-9835-d96d7c8d3f2f": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "3f81b679-657c-4462-991f-b83c3b0efa52": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "bff8695c-3df2-4b6b-919c-d6d568e40a56": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "0407640c-c8a0-4572-b9af-9d815f319f07": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4ca412ac-e479-47e4-b6d5-ddae5254fbbf": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T05:53:31.873Z",
                                  "2021-03-31T06:48:31.873Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c02787fb-4c84-4d1f-9c80-87ba5d61f01e": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  1,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "1506f67d-72f2-473f-aed0-a6f1fd8346e9": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  2,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "5b5972bf-4f6c-4858-9be7-7c05234baf50": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  3,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c680fbdd-a750-41e6-8091-8fd96a9bba33": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  4,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "6e441d8e-7573-4a8c-8441-ff214584978c": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  5,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "feb9c770-020e-4c61-a45f-7c3ff308fa58": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  7,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "c3a73021-395f-4980-b734-5f3d8359699f": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  10,
                                  11
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "8e5f9a13-f3a0-42f8-924d-292f964a38b5": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  1,
                                  3,
                                  13,
                                  15,
                                  11,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "4033a930-8ec5-4d48-a82d-5966958cdf79": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  13,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "538e6b5a-ba95-4303-8471-605829067fcc": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  14,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "320d9cbc-618b-4481-b7bd-2a5596312bd5": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  15,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "8c13cb57-1754-4a90-9007-49d1175dbd31": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  16,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "5a52603b-dc24-4e1e-86f8-6e63b6f45dee": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  17,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "cd0ba3cd-ace6-4f34-a599-33c964110307": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  19,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              },
                              "9c748d5d-0b48-4bfc-8bb2-8bf3dab15b0d": {
                                "type": "range",
                                "params": [
                                  "2021-03-31T06:14:00.547Z",
                                  "2021-03-31T07:09:00.547Z"
                                ],
                                "channels": [
                                  22,
                                  23
                                ],
                                "container": {
                                  "id": 3,
                                  "type": "View"
                                }
                              }
                            }
                          }
                        },
                        "relationships": {
                          "viewable": {
                            "data": {
                              "id": "1",
                              "type": "viewable"
                            }
                          },
                          "measurements": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/views/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/webhook_logs": {
      "get": {
        "description": "Get a list of existing WebhookLogs.",
        "operationId": "getWebhookLogs",
        "summary": "Get Webhook Logs",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookLog attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookLogsFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookLogsResponse"
                },
                "examples": {
                  "List of WebhookLogs": {
                    "summary": "List of WebhookLogs",
                    "value": {
                      "data": [
                        {
                          "id": "2",
                          "type": "webhook_log",
                          "attributes": {
                            "id": 2,
                            "status": "200",
                            "response_message": null,
                            "response_body": null,
                            "trigger": null,
                            "payload": null,
                            "created_at": "2021-03-31T07:14:08.310Z",
                            "updated_at": "2021-03-31T07:14:08.310Z",
                            "container_type": "WorkflowRun",
                            "container_id": 1
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/webhook_logs/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "webhook_log",
                          "attributes": {
                            "id": 3,
                            "status": "200",
                            "response_message": null,
                            "response_body": null,
                            "trigger": null,
                            "payload": null,
                            "created_at": "2021-03-31T07:14:08.374Z",
                            "updated_at": "2021-03-31T07:14:08.374Z",
                            "container_type": "WebhookSubscription",
                            "container_id": 1
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/webhook_logs/3"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          2,
                          3
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong webhook_logs attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `wrong`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_logs"
        ]
      }
    },
    "/webhook_logs/{id}": {
      "get": {
        "description": "Get a single WebhookLog by its id.",
        "operationId": "getWebhookLog",
        "summary": "Get Webhook Log",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WebhookLog to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookLog attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookLogResponse"
                },
                "examples": {
                  "WebhookLog": {
                    "summary": "WebhookLog",
                    "value": {
                      "data": {
                        "id": "3",
                        "type": "webhook_log",
                        "attributes": {
                          "id": 3,
                          "status": "200",
                          "created_at": "2021-03-31T07:14:16.607Z",
                          "updated_at": "2021-03-31T07:14:16.607Z",
                          "container_type": "WebhookSubscription",
                          "container_id": 1
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/webhook_logs/3"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (all fieldnames are invalid)": {
                    "summary": "Wrong Fields Set Error (all fieldnames are invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error (one fieldname is invalid)": {
                    "summary": "Wrong Fields Set Error (one fieldname is invalid)",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_logs given: `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_logs"
        ]
      }
    },
    "/webhook_subscriptions": {
      "get": {
        "description": "Get a list of existing WebhookSubscriptions.",
        "operationId": "getWebhookSubscriptions",
        "summary": "Get Webhook Subscriptions",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookSubscription attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookSubscriptionsFilter"
            }
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionsResponse"
                },
                "examples": {
                  "List of WebhookSubscriptions": {
                    "summary": "List of WebhookSubscriptions",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "webhook_subscription",
                          "attributes": {
                            "active": true,
                            "url": "http://localhost:5000",
                            "triggers": [
                              "some.random.trigger"
                            ],
                            "created_at": "2021-03-31T07:14:25.439Z",
                            "updated_at": "2021-03-31T07:14:25.439Z",
                            "headers": {}
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "http://localhost:5000"
                          }
                        },
                        {
                          "id": "2",
                          "type": "webhook_subscription",
                          "attributes": {
                            "active": true,
                            "url": "http://localhost:5000",
                            "triggers": [
                              "some.random.trigger"
                            ],
                            "created_at": "2021-03-31T07:14:25.444Z",
                            "updated_at": "2021-03-31T07:14:25.444Z",
                            "headers": {}
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "user": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            }
                          },
                          "links": {
                            "self": "http://localhost:5000"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong webhook_subscriptions attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_subscriptions given: `invalid`, `invalid2`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_subscriptions"
        ]
      },
      "post": {
        "description": "Create a WebhookSubscription.",
        "operationId": "createWebhookSubscription",
        "summary": "Create Webhook Subscription",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "4",
                        "type": "webhook_subscription",
                        "attributes": {
                          "active": true,
                          "url": "https://webhook.laboperator.com",
                          "triggers": [
                            "12"
                          ],
                          "created_at": "2021-03-31T07:14:32.834Z",
                          "updated_at": "2021-03-31T07:14:32.834Z",
                          "headers": {
                            "a": "b"
                          }
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "https://webhook.laboperator.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Missed Required Attributes Error": {
                    "summary": "Missed Required Attributes Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missed required attribute(s) for webhook_subscription: `url`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "url": [
                                "can't be blank"
                              ],
                              "triggers": [
                                "is too short (minimum is 1 character)"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "ID parameter given": {
                    "summary": "ID parameter given",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "ID parameter is not allowed for `create` requests.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_subscriptions"
        ],
        "requestBody": {
          "description": "Create a WebhookSubscription.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscription"
              },
              "example": {
                "data": {
                  "type": "webhook_subscription",
                  "attributes": {
                    "headers": {
                      "a": "b"
                    },
                    "url": "https://webhook.laboperator.com",
                    "triggers": [
                      "12"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhook_subscriptions/{id}": {
      "get": {
        "description": "Get a single WebhookSubscription by its id.",
        "operationId": "getWebhookSubscription",
        "summary": "Get Webhook Subscription",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WebhookSubscription to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WebhookSubscription attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "webhook_subscription",
                        "attributes": {
                          "active": true,
                          "url": "http://localhost:5000",
                          "triggers": [
                            "some.random.trigger"
                          ],
                          "created_at": "2021-03-31T07:14:28.454Z",
                          "updated_at": "2021-03-31T07:14:28.454Z",
                          "headers": {}
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "http://localhost:5000"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for webhook_subscriptions given: `invalid`, `invalid`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_subscriptions"
        ]
      },
      "patch": {
        "description": "Update a WebhookSubscription.",
        "operationId": "updateWebhookSubscription",
        "summary": "Update Webhook Subscription",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WebhookSubscription to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResponse"
                },
                "examples": {
                  "WebhookSubscription": {
                    "summary": "WebhookSubscription",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "webhook_subscription",
                        "attributes": {
                          "active": true,
                          "url": "http://localhost:5000",
                          "triggers": [
                            "some.random.trigger"
                          ],
                          "created_at": "2021-03-31T07:14:38.705Z",
                          "updated_at": "2021-03-31T07:14:38.969Z",
                          "headers": {
                            "a": "b"
                          }
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "user": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          }
                        },
                        "links": {
                          "self": "http://localhost:5000"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_subscriptions"
        ],
        "requestBody": {
          "description": "Update a WebhookSubscription.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscription"
              },
              "example": {
                "data": {
                  "type": "webhook_subscription",
                  "attributes": {
                    "headers": {
                      "a": "b"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WebhookSubscription.",
        "operationId": "deleteWebhookSubscription",
        "summary": "Delete Webhook Subscription",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WebhookSubscription to delete."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Delete",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "webhook_subscriptions"
        ]
      }
    },
    "/workflow_events": {
      "get": {
        "description": "Get a list of existing WorkflowEvents.",
        "operationId": "getWorkflowEvents",
        "summary": "Get Workflow Events",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowEvent attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowEventsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowEventsResponse"
                },
                "examples": {
                  "List of WorkflowEvents": {
                    "summary": "List of WorkflowEvents",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_event",
                          "attributes": {
                            "definition": {
                              "type": "add_step",
                              "payload": {
                                "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                                "fields": null,
                                "version": "1.0.0",
                                "fieldMapping": null
                              }
                            }
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_events/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_events attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_events"
        ]
      },
      "post": {
        "description": "Record a dynamic workflow modification event.",
        "operationId": "createWorkflowEvent",
        "summary": "Create Workflow Event",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowEventResponse"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_event",
                        "attributes": {
                          "definition": {
                            "type": "add_step",
                            "payload": {
                              "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                              "version": "1.0.0"
                            }
                          }
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_events/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request": {
                    "summary": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: Definition [{\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"AddStep Event\", \"description\"=>\"The event of adding a step to a running dynamic template.\\nThe added step will be appended as the last step of the run.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"add_step\"]}, \"payload\"=>{\"oneOf\"=>[{\"type\"=>\"object\", \"description\"=>\"Payload for externally defined step template\", \"required\"=>[\"uuid\", \"version\"], \"properties\"=>{\"uuid\"=>{\"$ref\"=>\"#/definitions/uuid\"}, \"version\"=>{\"$ref\"=>\"#/definitions/version\"}}}, {\"type\"=>\"object\", \"description\"=>\"Payload of locally defined step template\", \"required\"=>[\"step\"], \"properties\"=>{\"step\"=>{\"$ref\"=>\"#/definitions/memberName\"}}}]}}}, \"schema_pointer\"=>\"/definitions/workflow_event/addStep\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"MoveStep Event\", \"description\"=>\"The event of moving a step in a running dynamic template.\\nOnly steps which are not yet started can be moved.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"move_step\"]}, \"payload\"=>{\"type\"=>\"object\", \"require\"=>[\"from\", \"to\"], \"properties\"=>{\"from\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"to\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/moveStep\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"RemoveStep Event\", \"description\"=>\"The event of removing a step from a running dynamic template.\\nOnly steps which are not yet started can be removed\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"remove_step\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/removeStep\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveIf Event\", \"description\"=>\"The event of resolving the condition in an `if` flow of steps.\\n\\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\\nOtherwise, the steps included in `else` will be unfolded.\\n\\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\\nno steps will be unfolded.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_if\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/resolveIf\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveUntil Event\", \"description\"=>\"The event of resolving the condition in a `loop-until` flow of steps.\\n\\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_until\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/resolveUntil\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveWhile Event\", \"description\"=>\"The event of resolving the condition in a `while` flow of steps.\\n\\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_while\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"resolved\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"resolved\"=>{\"type\"=>\"boolean\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/resolveWhile\", \"type\"=>\"object\"}, {\"data\"=>nil, \"data_pointer\"=>\"\", \"schema\"=>{\"type\"=>\"object\", \"title\"=>\"ResolveForEach Event\", \"description\"=>\"The event of resolving a single iteration of `for-each` flow of steps.\\n\\nThe iteration will continue up to and including the last item in the source array.\\n\", \"properties\"=>{\"type\"=>{\"enum\"=>[\"resolve_for_each\"]}, \"payload\"=>{\"type\"=>\"object\", \"required\"=>[\"pointer\", \"iterator\"], \"properties\"=>{\"pointer\"=>{\"type\"=>\"string\", \"pattern\"=>\"^/flow/\"}, \"iterator\"=>{\"type\"=>\"integer\"}}}}}, \"schema_pointer\"=>\"/definitions/workflow_event/resolveForEach\", \"type\"=>\"object\"}]",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "definition": [
                                [
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "AddStep Event",
                                      "description": "The event of adding a step to a running dynamic template.\nThe added step will be appended as the last step of the run.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "add_step"
                                          ]
                                        },
                                        "payload": {
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "description": "Payload for externally defined step template",
                                              "required": [
                                                "uuid",
                                                "version"
                                              ],
                                              "properties": {
                                                "uuid": {},
                                                "version": {}
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "description": "Payload of locally defined step template",
                                              "required": [
                                                "step"
                                              ],
                                              "properties": {
                                                "step": {}
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/addStep",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "MoveStep Event",
                                      "description": "The event of moving a step in a running dynamic template.\nOnly steps which are not yet started can be moved.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "move_step"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "require": [
                                            "from",
                                            "to"
                                          ],
                                          "properties": {
                                            "from": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            },
                                            "to": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/moveStep",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "RemoveStep Event",
                                      "description": "The event of removing a step from a running dynamic template.\nOnly steps which are not yet started can be removed\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "remove_step"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "required": [
                                            "pointer"
                                          ],
                                          "properties": {
                                            "pointer": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/removeStep",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "ResolveIf Event",
                                      "description": "The event of resolving the condition in an `if` flow of steps.\n\nIf the condition resolves to a truthy value, the steps included in `then` will be unfolded.\nOtherwise, the steps included in `else` will be unfolded.\n\nIf `else` is not specified in the `if` flow and the condition resolves to a falsy value,\nno steps will be unfolded.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "resolve_if"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "required": [
                                            "pointer",
                                            "resolved"
                                          ],
                                          "properties": {
                                            "pointer": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            },
                                            "resolved": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/resolveIf",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "ResolveUntil Event",
                                      "description": "The event of resolving the condition in a `loop-until` flow of steps.\n\nIf the condition in `until` resolves to a falsy value, the steps included in `loop` will be unfolded.\nOtherwise, the execution will break out of the `loop-until` flow and continue to evaluate the next entry in the parent flow.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "resolve_until"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "required": [
                                            "pointer",
                                            "resolved"
                                          ],
                                          "properties": {
                                            "pointer": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            },
                                            "resolved": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/resolveUntil",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "ResolveWhile Event",
                                      "description": "The event of resolving the condition in a `while` flow of steps.\n\nIf the condition in `while` resolves to a truthy value, the steps included in `do` will be unfolded.\nOtherwise, the execution will break out of the `while` flow and continue to evaluate the next entry in the parent flow.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "resolve_while"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "required": [
                                            "pointer",
                                            "resolved"
                                          ],
                                          "properties": {
                                            "pointer": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            },
                                            "resolved": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/resolveWhile",
                                    "type": "object"
                                  },
                                  {
                                    "data": null,
                                    "data_pointer": "",
                                    "schema": {
                                      "type": "object",
                                      "title": "ResolveForEach Event",
                                      "description": "The event of resolving a single iteration of `for-each` flow of steps.\n\nThe iteration will continue up to and including the last item in the source array.\n",
                                      "properties": {
                                        "type": {
                                          "enum": [
                                            "resolve_for_each"
                                          ]
                                        },
                                        "payload": {
                                          "type": "object",
                                          "required": [
                                            "pointer",
                                            "iterator"
                                          ],
                                          "properties": {
                                            "pointer": {
                                              "type": "string",
                                              "pattern": "^/flow/"
                                            },
                                            "iterator": {
                                              "type": "integer"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "schema_pointer": "/definitions/workflow_event/resolveForEach",
                                    "type": "object"
                                  }
                                ]
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_events"
        ],
        "requestBody": {
          "description": "Create a WorkflowEvent.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowEvent"
              },
              "example": {
                "data": {
                  "type": "workflow_event",
                  "attributes": {
                    "definition": {
                      "type": "add_step",
                      "payload": {
                        "uuid": "1ab3372f-f2f0-45d3-8417-208ac835dfd3",
                        "version": "1.0.0"
                      }
                    }
                  },
                  "relationships": {
                    "workflow_run": {
                      "data": {
                        "type": "workflow_runs",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_fields": {
      "get": {
        "description": "Get a list of existing WorkflowFields.",
        "operationId": "getWorkflowFields",
        "summary": "Get Workflow Fields",
        "parameters": [
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowFieldsFilter"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowField attributes to be included in the response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include archived workflow fields."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldsResponse"
                },
                "examples": {
                  "List of WorkflowFields": {
                    "summary": "List of WorkflowFields",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "someString",
                            "pointer": "/fields/someString",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "string",
                              "maxLength": 100,
                              "defaultValue": "Test"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.366Z",
                            "created_at": "2021-03-31T07:15:02.366Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": "Test"
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "balance",
                            "pointer": "/fields/balance",
                            "read_only": false,
                            "prepare": true,
                            "output": true,
                            "schema": {
                              "type": "relationship",
                              "prepare": true,
                              "resourceType": "devices"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.373Z",
                            "created_at": "2021-03-31T07:15:02.373Z",
                            "deleted_at": null,
                            "value_type": "relationship",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/2"
                          }
                        },
                        {
                          "id": "3",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "instrumentInstructions",
                            "pointer": "/fields/instrumentInstructions",
                            "read_only": true,
                            "prepare": true,
                            "output": true,
                            "schema": {
                              "type": "file",
                              "output": false,
                              "prepare": true,
                              "readOnly": true,
                              "mediaType": "application/my-instruments-config-file-type"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.381Z",
                            "created_at": "2021-03-31T07:15:02.381Z",
                            "deleted_at": null,
                            "value_type": "file",
                            "value": {
                              "name": "__value______",
                              "type": ""
                            }
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/3"
                          }
                        },
                        {
                          "id": "4",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "actualWeight",
                            "pointer": "/fields/actualWeight",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "quantity",
                              "unit": "mg"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.387Z",
                            "created_at": "2021-03-31T07:15:02.387Z",
                            "deleted_at": null,
                            "value_type": "quantity",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/4"
                          }
                        },
                        {
                          "id": "5",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "actualVolume",
                            "pointer": "/fields/actualVolume",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "quantity",
                              "unit": "ml"
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.394Z",
                            "created_at": "2021-03-31T07:15:02.394Z",
                            "deleted_at": null,
                            "value_type": "quantity",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/5"
                          }
                        },
                        {
                          "id": "6",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "density",
                            "pointer": "/fields/density",
                            "read_only": true,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "script",
                              "result": {
                                "type": "quantity",
                                "unit": "mg"
                              },
                              "script": "actualWeight / actualVolume",
                              "readOnly": true
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.400Z",
                            "created_at": "2021-03-31T07:15:02.400Z",
                            "deleted_at": null,
                            "value_type": "script",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/6"
                          }
                        },
                        {
                          "id": "7",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "selectorResult",
                            "pointer": "/fields/selectorResult",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "string",
                              "hidden": true,
                              "maxLength": 100
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.408Z",
                            "created_at": "2021-03-31T07:15:02.408Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/7"
                          }
                        },
                        {
                          "id": "8",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "iterator",
                            "pointer": "/fields/iterator",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "integer",
                              "hidden": true
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.418Z",
                            "created_at": "2021-03-31T07:15:02.418Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": null
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/8"
                          }
                        },
                        {
                          "id": "9",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "collection",
                            "pointer": "/fields/collection",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [
                                "one",
                                "two",
                                "three"
                              ]
                            },
                            "hidden": false,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.428Z",
                            "created_at": "2021-03-31T07:15:02.428Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": [
                              "one",
                              "two",
                              "three"
                            ]
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/9"
                          }
                        },
                        {
                          "id": "10",
                          "type": "workflow_field",
                          "attributes": {
                            "title": "Internal State",
                            "identifier": "INTERNAL_STATE",
                            "pointer": "/fields/INTERNAL_STATE",
                            "read_only": false,
                            "prepare": false,
                            "output": true,
                            "schema": {
                              "type": "object",
                              "title": "Internal State",
                              "hidden": true,
                              "description": "Used by the workflow engine to store state data. Use with caution, as manipulating this can easily break things!",
                              "defaultValue": {}
                            },
                            "hidden": true,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.436Z",
                            "created_at": "2021-03-31T07:15:02.436Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": {}
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/10"
                          }
                        },
                        {
                          "id": "11",
                          "type": "workflow_field",
                          "attributes": {
                            "title": null,
                            "identifier": "MyField",
                            "pointer": "/fields/MyField",
                            "read_only": true,
                            "prepare": false,
                            "output": true,
                            "schema": {},
                            "hidden": null,
                            "field_scope_type": "WorkflowRun",
                            "updated_at": "2021-03-31T07:15:02.618Z",
                            "created_at": "2021-03-31T07:15:02.618Z",
                            "deleted_at": null,
                            "value_type": "basic",
                            "value": ""
                          },
                          "relationships": {
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            },
                            "field_scope": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_fields/11"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 11,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11
                        ],
                        "recordsTotal": 11
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_fields attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_fields given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_fields"
        ]
      }
    },
    "/workflow_fields/{id}": {
      "patch": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowField"
              }
            }
          }
        },
        "description": "Update a WorkflowField.",
        "operationId": "updateWorkflowField",
        "summary": "Update Workflow Field",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowField to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldResponse"
                },
                "examples": {
                  "WorkflowField": {
                    "summary": "WorkflowField",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2021-03-31T07:15:16.837Z",
                          "created_at": "2021-03-31T07:15:16.649Z",
                          "value_type": "basic",
                          "value": "25"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_fields/11"
                        }
                      }
                    }
                  },
                  "WorkflowField is updated with a provided reason": {
                    "summary": "WorkflowField is updated with a provided reason",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2021-03-31T07:15:19.296Z",
                          "created_at": "2021-03-31T07:15:19.047Z",
                          "value_type": "basic",
                          "value": "10mg"
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_fields/11"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_fields"
        ]
      },
      "get": {
        "description": "Get a single WorkflowField by its id.",
        "operationId": "getWorkflowField",
        "summary": "Get Workflow Field",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowField to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowField attributes to be included in the response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `field_scope`, `organisation`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowFieldResponse"
                },
                "examples": {
                  "WorkflowField": {
                    "summary": "WorkflowField",
                    "value": {
                      "data": {
                        "id": "11",
                        "type": "workflow_field",
                        "attributes": {
                          "identifier": "MyField",
                          "pointer": "/fields/MyField",
                          "read_only": true,
                          "prepare": false,
                          "output": true,
                          "schema": {},
                          "field_scope_type": "WorkflowRun",
                          "updated_at": "2021-03-31T07:15:09.273Z",
                          "created_at": "2021-03-31T07:15:09.273Z",
                          "value_type": "basic",
                          "value": ""
                        },
                        "relationships": {
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          },
                          "field_scope": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_fields/11"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_fields given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_fields"
        ]
      }
    },
    "/workflow_runs": {
      "get": {
        "description": "Get a list of existing WorkflowRuns.",
        "operationId": "getWorkflowRuns",
        "summary": "Get Workflow Runs",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowRun attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowRunsFilter"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include archived workflow runs."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunsResponse"
                },
                "examples": {
                  "List of WorkflowRuns": {
                    "summary": "List of WorkflowRuns",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_run",
                          "attributes": {
                            "title": "My Premium Workflow 1.0.0 run #1",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "state": "pending",
                            "run_number": 1,
                            "collaborator_ids": [],
                            "created_at": "2021-03-31T07:15:31.355Z",
                            "updated_at": "2021-03-31T07:15:31.486Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_template": {
                              "data": {
                                "id": "1",
                                "type": "workflow_template"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_steps": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_runs/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_runs attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ]
      },
      "post": {
        "description": "Create a WorkflowRun.",
        "operationId": "createWorkflowRun",
        "summary": "Create Workflow Run",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #2",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "state": "pending",
                          "run_number": 2,
                          "collaborator_ids": [],
                          "created_at": "2021-03-31T07:15:50.137Z",
                          "updated_at": "2021-03-31T07:15:50.309Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_steps": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_runs/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ],
        "requestBody": {
          "description": "Create a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowRun"
              },
              "example": {
                "data": {
                  "type": "workflow_run",
                  "relationships": {
                    "workflow_template": {
                      "data": {
                        "type": "workflow_templates",
                        "id": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_runs/{id}": {
      "get": {
        "description": "Get a single WorkflowRun by its id.",
        "operationId": "getWorkflowRun",
        "summary": "Get Workflow Run",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowRun to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowRun attributes to be included in response."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `workflow_template`"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #1",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "state": "pending",
                          "run_number": 1,
                          "collaborator_ids": [],
                          "created_at": "2021-03-31T07:15:35.870Z",
                          "updated_at": "2021-03-31T07:15:36.004Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_steps": {
                            "data": []
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_runs/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ]
      },
      "patch": {
        "description": "Update a WorkflowRun.",
        "operationId": "updateWorkflowRun",
        "summary": "Update Workflow Run",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowRun to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_run",
                        "attributes": {
                          "title": "My Premium Workflow 1.0.0 run #1",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "state": "active",
                          "run_number": 1,
                          "collaborator_ids": [
                            0
                          ],
                          "created_at": "2021-03-31T07:15:57.883Z",
                          "updated_at": "2021-03-31T07:15:58.401Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "workflow_template": {
                            "data": {
                              "id": "1",
                              "type": "workflow_template"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          },
                          "workflow_steps": {
                            "data": [
                              {
                                "id": "1",
                                "type": "workflow_step"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_runs/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Bad State Transition": {
                    "summary": "Bad State Transition",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Cannot transition from pending to completed.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Invalid State": {
                    "summary": "Invalid State",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Target state 'puzzled' is undefined.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ],
        "requestBody": {
          "description": "Update a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRun"
              },
              "example": {
                "data": {
                  "type": "workflow_run",
                  "attributes": {
                    "state": "active"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a WorkflowRun.",
        "operationId": "deleteWorkflowRun",
        "summary": "Delete Workflow Run",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowRun to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ]
      }
    },
    "/workflow_runs/{id}/report": {
      "get": {
        "description": "Get a WorkflowRun report.",
        "operationId": "reportWorkflowRun",
        "summary": "Report Workflow Run",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowRun to get."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunResponse"
                },
                "examples": {
                  "WorkflowRun": {
                    "summary": "WorkflowRun",
                    "value": {
                      "data": [
                        {
                          "type": "workflow_runs",
                          "id": 1,
                          "content": "Experiment My Premium Workflow 1.0.0 run #1"
                        },
                        {
                          "type": "workflow_steps",
                          "id": 1,
                          "step_number": 1,
                          "content": "Weighing: This is the information that will be generated by this step, when it's completed, in the report. We have a field reference here: Test. Completed by Kieth Welch"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Query parameter(s) `notallowed` is not allowed for this resource.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ]
      }
    },
    "/workflow_runs/restore": {
      "patch": {
        "description": "Restore a WorkflowRun.",
        "operationId": "restoreWorkflowRun",
        "summary": "Restore Workflow Run",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowRunsResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_run",
                          "attributes": {
                            "title": "My Premium Workflow 1.0.0 run #1",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "state": "pending",
                            "run_number": 1,
                            "collaborator_ids": [],
                            "created_at": "2021-03-31T07:16:18.992Z",
                            "updated_at": "2021-03-31T07:16:19.649Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "workflow_template": {
                              "data": {
                                "id": "1",
                                "type": "workflow_template"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            },
                            "workflow_steps": {
                              "data": []
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_runs/1"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_runs"
        ],
        "requestBody": {
          "description": "Restore a WorkflowRun.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/workflow_step_templates": {
      "get": {
        "description": "Get a list of existing WorkflowStepTemplates.",
        "operationId": "getWorkflowStepTemplates",
        "summary": "Get Workflow Step Templates",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStepTemplate attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowStepTemplatesFilter"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the template will be included as the `template` attribute."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include archived workflow templates."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplatesResponse"
                },
                "examples": {
                  "List of WorkflowStepTemplates": {
                    "summary": "List of WorkflowStepTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.0",
                            "title": "A Great Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "updated_at": "2021-03-31T07:16:24.279Z",
                            "created_at": "2021-03-31T07:16:24.279Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_step_templates/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  },
                  "List of found WorkflowStepTemplates": {
                    "summary": "List of found WorkflowStepTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.0",
                            "title": "A Great Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "updated_at": "2021-03-31T07:16:25.382Z",
                            "created_at": "2021-03-31T07:16:25.382Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_step_templates/1"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 1,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1
                        ],
                        "recordsTotal": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_step_templates attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_step_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowStepTemplate"
              }
            }
          }
        },
        "description": "Create a WorkflowStepTemplate.",
        "operationId": "createWorkflowStepTemplate",
        "summary": "Create Workflow Step Template",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate": {
                    "summary": "WorkflowStepTemplate",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step_template",
                        "attributes": {
                          "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                          "template_version": "1.0.0",
                          "title": "A Great Step",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "a-great-step",
                          "updated_at": "2021-03-31T07:16:35.062Z",
                          "created_at": "2021-03-31T07:16:35.062Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_step_templates/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request": {
                    "summary": "Bad Request",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: File can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ]
      }
    },
    "/workflow_step_templates/{id}": {
      "get": {
        "description": "Get a single WorkflowStepTemplate by its id.",
        "operationId": "getWorkflowStepTemplate",
        "summary": "Get Workflow Step Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStepTemplate to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStepTemplate attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `organisation`."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If this flag is set, the template will be included as the `template` attribute."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate": {
                    "summary": "WorkflowStepTemplate",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step_template",
                        "attributes": {
                          "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                          "template_version": "1.0.0",
                          "title": "A Great Step",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "a-great-step",
                          "updated_at": "2021-03-31T07:16:29.012Z",
                          "created_at": "2021-03-31T07:16:29.012Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_step_templates/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_step_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ]
      },
      "delete": {
        "description": "Delete a WorkflowStepTemplate.",
        "operationId": "deleteWorkflowStepTemplate",
        "summary": "Delete Workflow Step Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowStepTemplate to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Error (Template used by previous runs)": {
                    "summary": "Conflict Error (Template used by previous runs)",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent Workflow Steps",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ]
      }
    },
    "/workflow_step_templates/{id}/download": {
      "get": {
        "description": "Download a previously uploaded workflow template file.",
        "operationId": "downloadWorkflowStepTemplate",
        "summary": "Download Workflow Step Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStepTemplate with a file to download."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateResponse"
                },
                "examples": {
                  "WorkflowStepTemplate download": {
                    "summary": "WorkflowStepTemplate download",
                    "value": "---\nschema_version: '0.0.1' # version of the workflow template schema\ninfo:\n  version: '1.0.0'\n  uuid: b16e8146-d14e-4052-8ad8-0fd6d53d9ed0 # can be passed an external uuid\n  title: A Great Step\n  description: |\n    Add a fancy description here. It even supports __Markdown__!\n  author:\n    name: Max Mustermann\n    email: max.mustermann@company.com\n  slug: a-great-step\n\nfields:\n  sample: # basic types\n    type: string\n    maxLength: 100\n  powderDispenser: # relationships\n    type: relationship\n    resourceType: devices\n    prepare: true # required before starting the workflow\n\nsubsteps:\n  - primary: Load a {{sample}} into the {{powderDispenser}}.\n    secondary: Please, confirm when you are done.\n    confirm: true\n    timer:\n      type: timer\n      defaultDuration: 5s\n\n  - primary: |\n      The sample will be gravimetrically placed in a {{target}} reaction tube.\n    devices:\n      - powderDispenser\n    behaviors:\n      - title: Start gravimetrical measurement\n        when: ON_SUBSTEP_START\n        do:\n          - SEND_COMMAND:\n              device: powderDose\n              command: GET_GRAVIMETRICAL_MEASUREMENT\n              scope: substep # could be step or even workflow run?!\n\n  - primary: |\n      Results after gravimetrical placement are recorded: {{actual}}\n    behaviors:\n      - when: ON_SUBSTEP_START\n        delay: 4s\n        do:\n          - ALERT:\n              title: Finished!\n              text: We are done here.\n          - COMPLETE_SUBSTEP\n          - COMPLETE_STEP\n\n  - primary: Send results to ELN\n    behaviors:\n      - when: ON_SUBSTEP_COMPLETE\n        do:\n          - webhook:\n              url: https://my_endpoint.com/webhook\n              method: post\n              blocking: true\n              headers:\n                content-type: application/json\n              body: body_value\n              onSuccess:\n                processor: json\n                do:\n                  - SET_FIELD:\n                      field: actual\n                      value: data.value\n              onError:\n                processor: json\n                do:\n                  - REPEAT_SUBSTEP\n              onCode:\n                '404':\n                  processor: json\n                  do:\n                    - ALERT:\n                        title: Not Found\n                        text: Ensure that you're using a valid\n                          url / endpoint\n\n                '418':\n                  processor: json\n                  do:\n                    - ALERT:\n                        title: I'm a teapot\n                        text: For real! I'm a teapot\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ]
      }
    },
    "/workflow_step_templates/restore": {
      "patch": {
        "description": "Restore a WorkflowStepTemplate.",
        "operationId": "restoreWorkflowStepTemplate",
        "summary": "Restore Workflow Step Template",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplatesResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step_template",
                          "attributes": {
                            "uuid": "b16e8146-d14e-4052-8ad8-0fd6d53d9ed0",
                            "template_version": "1.0.0",
                            "title": "A Great Step",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "a-great-step",
                            "updated_at": "2021-03-31T07:16:50.285Z",
                            "created_at": "2021-03-31T07:16:50.044Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_step_templates/1"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_step_templates"
        ],
        "requestBody": {
          "description": "Restore a WorkflowStepTemplate.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/workflow_steps": {
      "get": {
        "description": "Get a list of existing WorkflowSteps.",
        "operationId": "getWorkflowSteps",
        "summary": "Get Workflow Steps",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStep attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowStepsFilter"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepsResponse"
                },
                "examples": {
                  "List of WorkflowSteps": {
                    "summary": "List of WorkflowSteps",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_step",
                          "attributes": {
                            "pointer": "/steps/buttonStep",
                            "flow_pointer": "/flow/2",
                            "step_number": 1,
                            "current_substep": -1,
                            "snapshots": {},
                            "created_at": "2021-03-31T07:16:54.013Z",
                            "updated_at": "2021-03-31T07:16:54.013Z",
                            "completed_at": null,
                            "deleted_at": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_steps/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_step",
                          "attributes": {
                            "pointer": "/steps/buttonStep",
                            "flow_pointer": "/flow/2",
                            "step_number": 1,
                            "current_substep": -1,
                            "snapshots": {},
                            "created_at": "2021-03-31T07:16:54.043Z",
                            "updated_at": "2021-03-31T07:16:54.043Z",
                            "completed_at": null,
                            "deleted_at": null
                          },
                          "relationships": {
                            "workflow_run": {
                              "data": {
                                "id": "1",
                                "type": "workflow_run"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_steps/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_steps attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_steps given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_steps"
        ]
      }
    },
    "/workflow_steps/{id}": {
      "get": {
        "description": "Get a single WorkflowStep by its id.",
        "operationId": "getWorkflowStep",
        "summary": "Get Workflow Step",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowStep to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowStep attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `value`, `value`."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepResponse"
                },
                "examples": {
                  "WorkflowStep": {
                    "summary": "WorkflowStep",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step",
                        "attributes": {
                          "pointer": "/steps/buttonStep",
                          "flow_pointer": "/flow/2",
                          "step_number": 1,
                          "current_substep": -1,
                          "snapshots": {},
                          "created_at": "2021-03-31T07:17:00.333Z",
                          "updated_at": "2021-03-31T07:17:00.333Z"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_steps/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_steps given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_steps"
        ]
      },
      "patch": {
        "description": "Update a WorkflowStep.",
        "operationId": "updateWorkflowStep",
        "summary": "Update Workflow Step",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowStep to update."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepResponse"
                },
                "examples": {
                  "WorkflowStep": {
                    "summary": "WorkflowStep",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_step",
                        "attributes": {
                          "pointer": "/steps/buttonStep",
                          "flow_pointer": "/flow/2",
                          "step_number": 1,
                          "current_substep": 1,
                          "snapshots": {},
                          "created_at": "2021-03-31T07:17:08.889Z",
                          "updated_at": "2021-03-31T07:17:09.201Z",
                          "completed_at": "2021-03-31T07:17:09.200Z"
                        },
                        "relationships": {
                          "workflow_run": {
                            "data": {
                              "id": "1",
                              "type": "workflow_run"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_steps/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Missing `data` member at document's top level.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_steps"
        ],
        "requestBody": {
          "description": "Update a WorkflowStep.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowStep"
              },
              "example": {
                "data": {
                  "type": "workflow_step",
                  "attributes": {
                    "current_substep": "1"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow_steps/{id}/trigger": {
      "put": {
        "responses": {
          "202": {
            "description": "Trigger Accepted",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Success": {
                    "summary": "Success",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Trigger Type": {
                    "summary": "Bad Trigger Type",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "The identifier invalid does not match any defined identifier. Recognized triggers are: CommandResponse, DataPoint, DeviceStatusUpdate, FieldUpdate, Manual, RunComplete, RunLock, RunPause, RunResume, RunStart, Scan, SelectorConfirm, StepComplete, StepStart, SubstepComplete, SubstepPause, SubstepResume, SubstepStart, TimerComplete, TimerReset, TimerStart, TimerStop.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Trigger Not Handled ": {
                    "summary": "Trigger Not Handled ",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "The identifier invalid does not match any defined identifier. Recognized triggers are: CommandResponse, DataPoint, DeviceStatusUpdate, FieldUpdate, Manual, RunComplete, RunLock, RunPause, RunResume, RunStart, Scan, SelectorConfirm, StepComplete, StepStart, SubstepComplete, SubstepPause, SubstepResume, SubstepStart, TimerComplete, TimerReset, TimerStart, TimerStop.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "param is missing or the value is empty: data\nDid you mean?  action\n               id\n               something\n               controller",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Signal a trigger to a workflow step.",
        "operationId": "triggerWorkflowStep",
        "summary": "Trigger Workflow Step",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The ID of the workflow step the trigger should fire for."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "tags": [
          "workflow_steps"
        ],
        "requestBody": {
          "description": "Trigger a WorkflowStep.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerSignal"
              },
              "example": {
                "data": {
                  "type": "manual",
                  "substep": "0",
                  "key": "clickable-button"
                }
              }
            }
          }
        }
      }
    },
    "/workflow_templates": {
      "get": {
        "description": "Get a list of existing WorkflowTemplates.",
        "operationId": "getWorkflowTemplates",
        "summary": "Get Workflow Templates",
        "parameters": [
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowTemplate attributes to be included in response."
          },
          {
            "name": "filter",
            "description": "Resources and/or attributes to filter by.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkflowTemplatesFilter"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include archived workflow templates."
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Pagination"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Sorting"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "Searching"
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplatesResponse"
                },
                "examples": {
                  "List of WorkflowTemplates": {
                    "summary": "List of WorkflowTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                            "template_version": "1.0.0",
                            "title": "My Premium Workflow",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2021-03-31T07:17:31.583Z",
                            "created_at": "2021-03-31T07:17:31.583Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_templates/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "ad9c1642-f26d-4dd0-8924-68182477e9c7",
                            "template_version": "1.0.1",
                            "title": "My Premium Workflow",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2021-03-31T07:17:32.122Z",
                            "created_at": "2021-03-31T07:17:32.122Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_templates/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  },
                  "List of found WorkflowTemplates": {
                    "summary": "List of found WorkflowTemplates",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                            "template_version": "1.0.0",
                            "title": "My Premium Workflow",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2021-03-31T07:17:33.446Z",
                            "created_at": "2021-03-31T07:17:33.446Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_templates/1"
                          }
                        },
                        {
                          "id": "2",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "ad9c1642-f26d-4dd0-8924-68182477e9c7",
                            "template_version": "1.0.1",
                            "title": "My Premium Workflow",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2021-03-31T07:17:33.969Z",
                            "created_at": "2021-03-31T07:17:33.969Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_templates/2"
                          }
                        }
                      ],
                      "meta": {
                        "pageSize": 2,
                        "pagesTotal": 1,
                        "recordsOrder": [
                          1,
                          2
                        ],
                        "recordsTotal": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Filter Error": {
                    "summary": "Wrong Filter Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong workflow_templates attributes given for filtering: `hair`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowTemplate"
              }
            }
          }
        },
        "description": "Create a WorkflowTemplate.",
        "operationId": "createWorkflowTemplate",
        "summary": "Create Workflow Template",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate": {
                    "summary": "WorkflowTemplate",
                    "value": {
                      "data": {
                        "id": "2",
                        "type": "workflow_template",
                        "attributes": {
                          "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                          "template_version": "1.0.0",
                          "title": "My Premium Workflow",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "my-premium-workflow",
                          "updated_at": "2021-03-31T07:17:51.336Z",
                          "created_at": "2021-03-31T07:17:51.336Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_templates/2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Bad Request Error": {
                    "summary": "Bad Request Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Validation failed: File can't be blank",
                          "title": "Bad Request",
                          "source": {
                            "messages": {
                              "file": [
                                "can't be blank"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error because of a missed scope": {
                    "summary": "Unauthorized Error because of a missed scope",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Insufficient OAuth2 scope to perform this operation. Required: Update",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Missing Type Error": {
                    "summary": "Conflict Missing Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Missing `type` member at document's `data` level.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Conflict Wrong Type Error": {
                    "summary": "Conflict Wrong Type Error",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "The given `type` member does not match the resource.",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      }
    },
    "/workflow_templates/{id}": {
      "get": {
        "description": "Get a single WorkflowTemplate by its id.",
        "operationId": "getWorkflowTemplate",
        "summary": "Get Workflow Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowTemplate to get."
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "object"
            },
            "description": "List of WorkflowTemplate attributes to be included in response."
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "List of related resource to include. Allowed values are: `owner`, `organisation`."
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Include `template` attribute in response."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Find in archive."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate": {
                    "summary": "WorkflowTemplate",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "workflow_template",
                        "attributes": {
                          "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                          "template_version": "1.0.0",
                          "title": "My Premium Workflow",
                          "description": "Add a fancy description here. It even supports __Markdown__!\n",
                          "slug": "my-premium-workflow",
                          "updated_at": "2021-03-31T07:17:39.043Z",
                          "created_at": "2021-03-31T07:17:39.043Z"
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "user"
                            }
                          },
                          "organisation": {
                            "data": {
                              "id": "1",
                              "type": "organisation"
                            }
                          }
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/workflow_templates/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Wrong Include Error": {
                    "summary": "Wrong Include Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `include` value(s) given: `spaceships`, `aliens`.",
                          "title": "Bad Request",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Wrong Fields Set Error": {
                    "summary": "Wrong Fields Set Error",
                    "value": {
                      "errors": [
                        {
                          "status": "400",
                          "code": "400",
                          "detail": "Wrong `fields` value(s) for workflow_templates given: `invalid`, `DROP TABLE USERS`.",
                          "title": "Bad Request",
                          "source": {
                            "messages": {}
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "description": "Delete a WorkflowTemplate.",
        "operationId": "deleteWorkflowTemplate",
        "summary": "Delete Workflow Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Id of a WorkflowTemplate to delete."
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Real destroy."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read",
              "delete"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "meta": {
                        "result": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthorized Error": {
                    "summary": "Unauthorized Error",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "You do not have the required permissions to access this resource. Note: OAuth 2 scopes do not overrule application level permissions.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  },
                  "Forbidden": {
                    "summary": "Forbidden",
                    "value": {
                      "errors": [
                        {
                          "status": "403",
                          "code": "403",
                          "detail": "Your organization settings do not allow permanent deletion.",
                          "title": "Forbidden",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Conflict Error (Template used by previous runs)": {
                    "summary": "Conflict Error (Template used by previous runs)",
                    "value": {
                      "errors": [
                        {
                          "status": "409",
                          "code": "409",
                          "detail": "Cannot delete record because of dependent Workflow Runs",
                          "title": "Conflict",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      }
    },
    "/workflow_templates/{id}/download": {
      "get": {
        "description": "Download a previously uploaded workflow template file.",
        "operationId": "downloadWorkflowTemplate",
        "summary": "Download Workflow Template",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of WorkflowTemplate with a file to download."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateResponse"
                },
                "examples": {
                  "WorkflowTemplate download": {
                    "summary": "WorkflowTemplate download",
                    "value": "---\nschema_version: '0.0.1' # version of the workflow template schema\ninfo:\n  version: '1.0.0' # version of the workflow\n  uuid: 848b05e2-7e86-4f9d-9067-825c3597ec28 # can be passed an external uuid\n  title: My Premium Workflow\n  description: |\n    Add a fancy description here. It even supports __Markdown__!\n  author:\n    name: Max Mustermann\n    email: max.mustermann@company.com\n  slug: my-premium-workflow\nconfig:\n  contextInfoSettings:\n    toggleButton:\n      label: Overflowing Context Toggle Button\n    contentPanel:\n      color: '#002b56'\n      height: 140\n  reportHeader: 'Experiment {{run.data.attributes.title}}'\ncontextInfo:\n  pages: # these pages will be displayed throughout the entire workflow run\n    - title: Global Info\n      content: |\n        *Once, if my memory serves me well, my life was a banquet where every heart revealed itself, where every wine flowed.* â Arthur Rimbaud\n\nbehaviors:\n  - when: run_start\n    do:\n      alert:\n        title: Starting!\n        text: Here we go!\n\nfields:\n  someString: # basic types\n    type: string\n    maxLength: 100\n    defaultValue: 'Test'\n  balance: # relationships\n    type: relationship\n    resourceType: devices\n    prepare: true # required before starting the workflow\n  instrumentInstructions: # files\n    type: file\n    mediaType: application/my-instruments-config-file-type\n    prepare: true\n    readOnly: true # can not be changed once the workflow is started\n    output: false # should not be part of a the workflows export output\n  actualWeight: # quantities\n    type: quantity\n    unit: mg\n  actualVolume:\n    type: quantity\n    unit: ml\n  density: # scripts\n    type: script\n    script: actualWeight / actualVolume\n    readOnly: true # script fields are required to be read-only\n    result:\n      type: quantity\n      unit: mg\n  selectorResult:\n    type: string\n    hidden: true\n    maxLength: 100\n  iterator:\n    type: integer\n    hidden: true\n  collection:\n    type: array\n    items:\n      type: string\n    defaultValue:\n      - one\n      - two\n      - three\n\nsteps:\n  weighing: # within the workflow this needs to be a unique reference\n    info:\n      title: Weighing\n\n    contextInfo: # these pages will be displayed only for this step\n      pages:\n        - title: Really Long Weighing Info Page Title\n          content: |\n            *One chord is fine. Two chords is pushing it. Three chords and you're into jazz.* â Lou Reed\n\n            ![music](https://source.unsplash.com/600x400/?music)\n\n    fields:\n      sample:\n        type: relationship\n        resourceType: samples\n      target:\n        type: quantity\n        unit: mg\n      actual:\n        type: quantity\n        unit: mg\n\n    substeps:\n      - primary: Place the {{sample}} on the balance.\n        description: |\n          Your fancy markdown body with formatting, images and what not else!\n        confirm: true\n        timer:\n          type: timer\n          defaultDuration: 5s\n      - primary: Selector\n        confirm: true\n        selector:\n          layout: list\n          result: selectorResult\n          title: 'Treats'\n          description: |\n            You nailed that first substep. You deserve to treat yourself. Choose ~~one~~ **multiple** options!\n          multiSelection: true\n          skipBehaviors: false\n          options:\n            - primary: 'Red Hawk Cheese'\n              secondary: |\n                Red Hawk is a type of American triple-crÃ¨me aged cow's-milk cheese with a brine-washed rind produced by the Cowgirl Creamery in Point Reyes Station, California.\n              thumbnail: https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg/320px-Cowgirl_Creamery_Point_Reyes_-_Red_Hawk_cheese.jpg\n              value: 'cheese'\n            - primary: 'Red Wine'\n              secondary: |\n                Wine comes in at the mouth. And love comes in at the eye; Thatâs all we shall know for truth, before we grow old and die.\n              thumbnail: https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Tempranillowine.jpg/320px-Tempranillowine.jpg\n              value: 'wine'\n            - primary: 'Espresso'\n              secondary: |\n                The size can be a single, double, or triple, using a proportional amount of ground coffee, roughly 7, 14, and 21 grams; correspondingly sized filter baskets are used.\n              thumbnail: https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Doppio.jpg/320px-Doppio.jpg\n              value: 'espresso'\n    reportSummary: \"{{template.steps.weighing.info.title}}: This is the information that will be generated by this step, when it's completed, in the report. We have a field reference here: {{someString}}. Completed by {{operator.data.attributes.full_name}}\"\n\n  dosing:\n    uuid: b3fc8c2b-aa03-4ab7-9172-377ef38fd860\n    version: 1.0.0\n\n  stirring:\n    info:\n      title: Stirring\n    contextInfo:\n      pages:\n        - title: Dosing Info\n          content: |\n            *I like to occasionally write an infinite loop to remind my computer who's boss.* â Ben Awad\n    reportSummary: This is the report for the stirring step.\n\n    substeps:\n      - primary: The wheel on the bus goes round and round\n\n  externalStep:\n    info:\n      title: A Great Step\n      description: |\n        Add a fancy description here. It even supports __Markdown__!\n      author:\n        name: Max Mustermann\n        email: max.mustermann@company.com\n      slug: a-great-step\n\n    behaviors:\n      - when: ON_SUBSTEP_START\n        do:\n          notify:\n            text: 'Starting substep of externalStep'\n            variant: info\n            autoHideDuration: 50\n\n    fields:\n      sample: # basic types\n        type: string\n        maxLength: 100\n      powderDispenser: # relationships\n        type: relationship\n        resourceType: devices\n        prepare: true # required before starting the workflow\n\n    substeps:\n      - primary: Load a {{sample}} into the {{powderDispenser}}.\n        secondary: Please, confirm when you are done.\n        confirm: true\n\n      - primary: |\n          The sample will be gravimetrically placed in a {{target}} reaction tube.\n        devices:\n          - powderDispenser\n        behaviors:\n          - title: Start gravimetrical measurement\n            when: ON_SUBSTEP_START\n            do:\n              - SEND_COMMAND:\n                  device: powderDose\n                  command: GET_GRAVIMETRICAL_MEASUREMENT\n                  scope: substep # could be step or even workflow run?!\n\n          - title: Record result\n            when:\n              ON_COMMAND_RESPONSE:\n                device: powderDose\n                command: GET_GRAVIMETRICAL_MEASUREMENT\n            and: data.value >= 9 && data.value <= 11\n            do:\n              - SET_FIELD:\n                  field: actual\n                  value: data.value\n              - COMPLETE_SUBSTEP\n            else:\n              - ALERT:\n                  title: Tolerance Missed\n                  text: |\n                    Result is not within tolerance of 1 {{target.unit}} of the\n                    target of {{target}}. Repeat the step.\n              - REPEAT_STEP # note that we repeat the entire step not only substep\n\n      - primary: |\n          Results after gravimetrical placement are recorded: {{actual}}\n        behaviors:\n          - when: ON_SUBSTEP_START\n            delay: 4s\n            do:\n              - COMPLETE_SUBSTEP\n              - COMPLETE_STEP\n\n      - primary: Send results to ELN\n        behaviors:\n          - when: ON_SUBSTEP_COMPLETE\n            do:\n              - webhook:\n                  url: http://localhost:5000/__cypress__/webhook?status=200&body=6\n                  method: post\n                  blocking: false\n                  headers:\n                    content-type: application/json\n                  body: |\n                    {\n                      \"registered_value\": \"{{someString}}\",\n                      \"description\": \"some information goes here\"\n                    }\n                  onSuccess:\n                    processor: json\n                    do:\n                      - SET_FIELD:\n                          field: actual\n                          value: data.value\n                      - webhook:\n                          url: http://localhost:5000/__cypress__/webhook?status=204\n                  onError:\n                    processor: json\n                    do:\n                      - REPEAT_SUBSTEP\n                  onCode:\n                    '404':\n                      processor: json\n                      do:\n                        - ALERT:\n                            title: Not Found\n                            text: Ensure that you're using a valid\n                              url / endpoint\n\n                    '418':\n                      processor: json\n                      do:\n                        - ALERT:\n                            title: I'm a teapot\n                            text: For real! I'm a teapot\n\n  alert:\n    info:\n      title: Alert completed\n    substeps:\n      - primary: Ahoy, Matey!\n    behaviors:\n      - title: Alert that we are done.\n        when: ON_STEP_START\n        do:\n          - ALERT:\n              title: Finished!\n              text: We are done here.\n\n  buttonStep:\n    info:\n      title: A step with a handled button.\n    substeps:\n      - primary: This is a step with a button.\n        buttons:\n          - label: Click me\n            key: clickable-button\n        behaviors:\n          - when:\n              MANUAL:\n                key: clickable-button\n            do:\n              - COMPLETE_SUBSTEP\n\nflow:\n  - weighing:\n      fields:\n        target:\n          number: 100\n          unit: mg\n      fieldMapping:\n        actualWeight: actual\n        sample: sample\n\n  - parallel:\n      streamA:\n        - dosing\n        - dosing\n      streamB:\n        - stirring\n  - buttonStep\n  - if: 'true'\n    then: alert\n    else:\n      - alert\n      - buttonStep\n  - loop:\n      - weighing\n      - weighing\n    until: field1 > 20\n  - forEach: iterator\n    step: 1\n    to: 10\n    do: weighing\n  - while: 'true'\n    do:\n      - weighing\n      - weighing\n  - forEach: iterator\n    in: collection\n    do: weighing\n  - externalStep:\n      fields:\n        sample: 'MySample'\n      fieldMapping:\n        balance: powderDispenser\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      }
    },
    "/workflow_templates/restore": {
      "patch": {
        "description": "Restore a WorkflowTemplate.",
        "operationId": "restoreWorkflowTemplate",
        "summary": "Restore Workflow Template",
        "security": [
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplatesResponse"
                },
                "examples": {
                  "Ok": {
                    "summary": "Ok",
                    "value": {
                      "data": [
                        {
                          "id": "1",
                          "type": "workflow_template",
                          "attributes": {
                            "uuid": "848b05e2-7e86-4f9d-9067-825c3597ec28",
                            "template_version": "1.0.0",
                            "title": "My Premium Workflow",
                            "description": "Add a fancy description here. It even supports __Markdown__!\n",
                            "slug": "my-premium-workflow",
                            "updated_at": "2021-03-31T07:18:08.059Z",
                            "created_at": "2021-03-31T07:18:07.818Z",
                            "deleted_at": null
                          },
                          "relationships": {
                            "owner": {
                              "data": {
                                "id": "1",
                                "type": "user"
                              }
                            },
                            "organisation": {
                              "data": {
                                "id": "1",
                                "type": "organisation"
                              }
                            }
                          },
                          "links": {
                            "self": "https://localhost/api/v2/laboperator/workflow_templates/1"
                          }
                        }
                      ]
                    }
                  },
                  "Ignore Record Not Found Error": {
                    "summary": "Ignore Record Not Found Error",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ],
        "requestBody": {
          "description": "Restore a WorkflowTemplate.",
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResource"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/attachments/{id}": {
      "get": {
        "description": "Get a single Attachment by its id.",
        "operationId": "getAttachment",
        "summary": "Get Attachment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Attachment to get."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                },
                "examples": {
                  "Attachment": {
                    "summary": "Attachment",
                    "value": {
                      "data": {
                        "id": "1",
                        "type": "attachment",
                        "attributes": {
                          "content_type": "text/plain",
                          "original_filename": "attachment.txt"
                        },
                        "links": {
                          "self": "https://localhost/api/v2/laboperator/attachments/1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "attachments"
        ]
      }
    },
    "/attachments/{id}/download": {
      "get": {
        "description": "Download a single Attachment by its id.",
        "operationId": "downloadAttachment",
        "summary": "Download Attachment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "An id of Attachment to download."
          }
        ],
        "security": [
          {
            "oauth2": [
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                },
                "examples": {
                  "Attachment": {
                    "summary": "Attachment",
                    "value": "attachment\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Unauthenticated Error": {
                    "summary": "Unauthenticated Error",
                    "value": {
                      "errors": [
                        {
                          "status": "401",
                          "code": "401",
                          "detail": "Authentication failed. The access token is invalid.",
                          "title": "Unauthorized",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Record Not Found Error": {
                    "summary": "Record Not Found Error",
                    "value": {
                      "errors": [
                        {
                          "status": "404",
                          "code": "404",
                          "detail": "We haven't found the resource you are looking for.",
                          "title": "Not Found",
                          "source": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "attachments"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Fields",
      "description": "The `fields` parameter allows you to only fetch required information in\na query. It can be combined with other query parameters. By reducing the transferred\n\n### Examples\n\n- _return a single attribute:_ `devices?fields[devices]=name`\n- _return multiple attributes:_ `devices?fields[devices]=name,created_at`\n- _along with included resources:_ `devices?include=connector&fields[devices]=name&fields[connector]=name`\n",
      "x-traitTag": true
    },
    {
      "name": "Filtering",
      "description": "Filtering of resource's instances is available via a `filter` query\nparameter. Can be combined with other query parameters.\n\n### List of available comparison operators:\n\n| Operator | Query Symbol |\n|---|---|\n| greater than ('>') | `gt` |\n| greater or equal ('>=') | `ge` |\n| less than ('<') | `lt` |\n| less or equal ('<=') | `le` |\n| equal (default) ('=') | `eq` |\n| not equal ('!=') | `ne` |\n| like (match at least partly) ('~*') | `lk` |\n| unlike (does not match even partly) ('!~*') | `nlk` |\n| match json objects ('@>') | `json` |\n\n### Examples\n\n- `devices?filter[devices][status]=offline`\n- _can be used on both the main resource and included:_ `devices?include=tasks&filter[devices][name]=DeviceName&filter[devices][status]=offline&filter[tasks][name]=SecondTask`\n- _can be used with comparison operators:_ `tasks?filter[tasks][created_at][ge]=2014-01-01`.\n",
      "x-traitTag": true
    },
    {
      "name": "Pagination",
      "description": "Pagination of resource's instances is available via a `page` query\nparameter. Can be combined with other query paraters.\n\n### Examples\n\n- _number of pages to fetch:_ `devices?page[devices][number]=10`\n- _number of records per page:_ `devices?page[devices][size]=2`\n- _fetch the first page of records_ `devices?page[devices][size]=2&page[devices][first]`\n- _fetch the last page of records_ `devices?page[devices][size]=2&page[devices][last]`\n- _fetch the next page of records_ `devices?page[devices][size]=2&page[devices][next]`\n- _fetch the previous page of records_ `devices?page[devices][size]=2&page[devices][prev]`\n- _show the total number of available pages:_ `devices?page[devices][total]`\n",
      "x-traitTag": true
    },
    {
      "name": "Searching",
      "description": "Full-text search of resource's instances is available via a `search` query\nparameter. Can be combined with other query parameters.\n\n### Examples\n\n- _search users:_ `users?search[users]=John%20engineer`\n- _search samples:_ `samples?search[samples]=solution%20fr8wv3mt`\n- _search devices:_ `devices?search[devices]=online`\n",
      "x-traitTag": true
    },
    {
      "name": "Sorting",
      "description": "Sorting of resource's instances is available via a `sort` query\nparameter. Can be combined with other query parameters.\n\n### Examples\n\n- _sort in an ascending order by a given attribute:_ `devices?sort[devices]=created_at`\n- _sort in a descending order by a given attribute:_ `devices?sort[devices]=-created_at`\n- _accepts multiple attributes:_ `sort[devices]=-created_at,name`\n",
      "x-traitTag": true
    },
    {
      "name": "applications",
      "x-displayName": "Applications",
      "x-traitTag": false
    },
    {
      "name": "attachments",
      "x-displayName": "Attachments",
      "x-traitTag": false
    },
    {
      "name": "authentications",
      "x-displayName": "Authentications",
      "x-traitTag": false
    },
    {
      "name": "automations",
      "x-displayName": "Automations",
      "x-traitTag": false
    },
    {
      "name": "channels",
      "x-displayName": "Channels",
      "x-traitTag": false
    },
    {
      "name": "collections",
      "x-displayName": "Collections",
      "x-traitTag": false
    },
    {
      "name": "command_executions",
      "x-displayName": "Command Executions",
      "description": "A command execution is created for every command send to a device. If\nthe driver supports it the execution will also track confirmation and\ncompletion or failure of the command.\n",
      "x-traitTag": false
    },
    {
      "name": "comments",
      "x-displayName": "Comments",
      "description": "<span style=\"color:#f44336\">Attention! This feature in under development.</span>\n",
      "x-traitTag": false
    },
    {
      "name": "connectors",
      "x-displayName": "Connectors",
      "x-traitTag": false
    },
    {
      "name": "dashboards",
      "x-displayName": "Dashboards",
      "x-traitTag": false
    },
    {
      "name": "data_points",
      "x-displayName": "Data Points",
      "x-traitTag": false
    },
    {
      "name": "device_classes",
      "x-displayName": "Device Classes",
      "x-traitTag": false
    },
    {
      "name": "device_drivers",
      "x-displayName": "Device Drivers",
      "x-traitTag": false
    },
    {
      "name": "device_types",
      "x-displayName": "Device Types",
      "x-traitTag": false
    },
    {
      "name": "devices",
      "x-displayName": "Devices",
      "x-traitTag": false
    },
    {
      "name": "exports",
      "x-displayName": "Exports",
      "x-traitTag": false
    },
    {
      "name": "measurements",
      "x-displayName": "Measurements",
      "x-traitTag": false
    },
    {
      "name": "notification_settings",
      "x-displayName": "Notification Settings",
      "x-traitTag": false
    },
    {
      "name": "notification_triggers",
      "x-displayName": "Notification Triggers",
      "x-traitTag": false
    },
    {
      "name": "notifications",
      "x-displayName": "Notifications",
      "x-traitTag": false
    },
    {
      "name": "organisation_memberships",
      "x-displayName": "Organisation Memberships",
      "x-traitTag": false
    },
    {
      "name": "organisations",
      "x-displayName": "Organisations",
      "x-traitTag": false
    },
    {
      "name": "permissions",
      "x-displayName": "Permissions",
      "x-traitTag": false
    },
    {
      "name": "ports",
      "x-displayName": "Ports",
      "x-traitTag": false
    },
    {
      "name": "protocol_rules",
      "x-displayName": "Protocol Rules",
      "x-traitTag": false
    },
    {
      "name": "protonotifications",
      "x-displayName": "Protonotifications",
      "x-traitTag": false
    },
    {
      "name": "samples",
      "x-displayName": "Samples",
      "x-traitTag": false
    },
    {
      "name": "schemas",
      "x-displayName": "Schemas",
      "x-traitTag": false
    },
    {
      "name": "signatures",
      "x-displayName": "Signatures",
      "x-traitTag": false
    },
    {
      "name": "smart_views",
      "x-displayName": "Smart Views",
      "x-traitTag": false
    },
    {
      "name": "update_requests",
      "x-displayName": "Update Requests",
      "x-traitTag": false
    },
    {
      "name": "users",
      "x-displayName": "Users",
      "x-traitTag": false
    },
    {
      "name": "versions",
      "x-displayName": "Versions",
      "x-traitTag": false
    },
    {
      "name": "views",
      "x-displayName": "Views",
      "x-traitTag": false
    },
    {
      "name": "webhook_logs",
      "x-displayName": "Webhook Logs",
      "x-traitTag": false
    },
    {
      "name": "webhook_subscriptions",
      "x-displayName": "Webhook Subscriptions",
      "x-traitTag": false
    },
    {
      "name": "workflow_events",
      "x-displayName": "Workflow Events",
      "x-traitTag": false
    },
    {
      "name": "workflow_fields",
      "x-displayName": "Workflow Fields",
      "x-traitTag": false
    },
    {
      "name": "workflow_runs",
      "x-displayName": "Workflow Runs",
      "x-traitTag": false
    },
    {
      "name": "workflow_step_templates",
      "x-displayName": "Workflow Step Templates",
      "x-traitTag": false
    },
    {
      "name": "workflow_steps",
      "x-displayName": "Workflow Steps",
      "x-traitTag": false
    },
    {
      "name": "workflow_templates",
      "x-displayName": "Workflow Templates",
      "x-traitTag": false
    }
  ]
}
